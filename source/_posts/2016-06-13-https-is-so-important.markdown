---
layout: post
title: "我也想来谈谈HTTPS"
date: 2016-06-13 17:50:10 +0800
comments: true
categories:
---
##我们需要安全

2014年8月份Google在它的官博上发表[《HTTPS as a ranking signal》](https://webmasters.googleblog.com/2014/08/https-as-ranking-signal.html)
 公告已经调整其搜索引擎算法，采用 HTTPS 加密的网站在搜索结果中的排名将会更高，其目标非常简单，就是要鼓励全球网站采用安全度更高的HTTPS以保证访客安全。

同一年（2014年），百度开始对外开放了https的访问，并于3月初正式对全网用户进行了https跳转。对百度自身来说，https能够保护用户体验，减少劫持/隐私泄露对用户的伤害。

2015年，百度开放收录https站点公告。继启用https加密之后，百度搜索再次重磅推出：全面支持https页面直接收录；另外从相关性的角度，百度搜索引擎认为权值相同的站点，采用https协议的页面更加安全，排名上会优先对待。

##安全的技术需求有哪些
从信息安全的角度说，网络信息安全与保密的技术特征主要表现在系统的保密性、完整性、真实性、可靠性、可用性、不可抵赖性等。

对于一个包含用户敏感信息的网站（从实际角度出发），我们期望实现HTTP安全技术能够满足至少以下需求：

* 服务器认证（客户端知道它们是在与真正的而不是伪造的服务器通话）
* 客户端认证（服务器知道它们是在与真正的而不是伪造的客户端通话）
* 完整性（客户端和服务器的数据不会被修改）
* 加密（客户端和服务器的对话是私密的，无需担心被窃听）
* 效率（一个运行的足够快的算法，以便低端的客户端和服务器使用）
* 普适性（基本上所有的客户端和服务器都支持这个协议）
* 管理的可扩展性（在任何地方的任何人都可以立即进行安全通信）
* 适应性（能够支持当前最知名的安全方法）
* 在社会上的可行性（满足社会的政治文化需要）

##HTTPS和HTTP的不同：TLS安全层（会话层）

超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，HTTPS，也被称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种网络安全传输协议。

HTTPS开发的主要目的，是提供对网络服务器的认证，保证交换信息的机密性和完整性。该协议由网景公司首创，所有主要的浏览器和服务器都支持此协议。

在计算机网络上，HTTPS经由超文本传输协议进行通信，但利用SSL/TLS來对包进行加密，即所有的HTTP请求和响应数据在发送到网络上之前，都要进行加密。如下图：

![Alt text](/images/https-layer.png "HTTPS数据层结构")

很明显，安全操作，即数据编码（加密）和解码（解密）的工作是由SSL一层来完成，而其他的部分和HTTP协议没有太多的不同。下面这张图，更详细的展示了TLS层的里面的结构。

![Alt text](/images/TLS.png "TLS层")

##还是想要说说基本原理
今天的重点是介绍HTTPS背后的基本原理和概念，涉及到的概念：密码学基础知识-非对称加密算法，数字证书，CA中心等。

**先谈 对称加密算法（一堆概念和解释）**

对称加密算法是应用较早的加密算法，技术成熟。在对称加密算法中，数据发信方将明文（原始数据）和加密密钥一起经过特殊加密算法处理后，使其变成复杂的加密密文发送出去。收信方收到密文后，若想解读原文，则需要使用加密用过的密钥及相同算法的逆算法对密文进行解密，才能使其恢复成可读明文。在对称加密算法中，使用的密钥只有一个，发收信双方都使用这个密钥对数据进行加密和解密，这就要求解密方事先必须知道加密密钥。

目前，比较常用的对称加密算法：DES（不安全），3DES（相对安全），AES（高级对称加密算法，相对安全）。

**非对称加密算法（加密和签名）（又一堆概念和解释）**

非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。 非对称加密算法实现机密信息交换的基本过程是：甲方生成一对密钥并将其中的一把作为公用密钥向其它方公开；得到该公用密钥的乙方使用该密钥对机密信息进行加密后再发送给甲方；甲方再用自己保存的另一把专用密钥对加密后的信息进行解密。
另一方面，甲方可以使用乙方的公钥对机密信息进行签名后再发送给乙方；乙方再用自己的私匙对数据进行验签。

目前，常用的非对称加密算法：RSA（1024/2048位，目前比较流行的），ECC（椭圆曲线加密算法，更前沿的算法，相对RSA，需要的秘钥更短）。

**那么，有一个很重要的问题：加密算法是如何保证数据传输的安全？**

利用数学计算的困难性

RSA算法基于一个十分简单的数论事实（这是秘钥部分，算法部分是模运算）：将两个大素数/质数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。   
椭圆加密算法（ECC）是一种公钥加密体制，最初由Koblitz和Miller两人于1985年提出，其数学基础是利用椭圆曲线上的有理点构成Abel加法群上椭圆离散对数的计算困难性。

加密算法是公开的，关键在于秘钥

针对加密算法的破解，是在没有密钥的情况下，把明文给还原出来。不过更细的还分为只知道密文的唯密文攻击，知道若干明文密文对的已知明文攻击，能够构造确定明文让对方加密并得到对应密文的选择明文攻击等。

密码学中有柯克霍夫斯基原则，即加密算法的安全性依赖的是密钥的保密而不是算法的保密。

因为，保证秘钥的定期更换是非常重要的。

**数字证书，用来实现身份认证和秘钥交换（继续一堆概念和解释）**

数字证书是一个经证书授权中心数字签名的包含公开密钥拥有者信息以及公开密钥的文件。最简单的证书包含一个公开密钥、名称以及证书授权中心的数字签名。

数字证书是一种权威性的电子文档，可以由权威公正的第三方机构，即CA（例如中国各地方的CA公司）中心签发的证书，也可以由企业级CA系统进行签发。
它以数字证书为核心的加密技术(加密传输、数字签名、数字信封等安全技术)可以对网络上传输的信息进行加密和解密、数字签名和签名验证，确保网上传递信息的机密性、完整性及交易的不可抵赖性。使用了数字证书，即使您发送的信息在网上被他人截获，甚至您丢失了个人的账户、密码等信息，仍可以保证您的账户、资金安全。

身份认证

身份认证是建立每一个TLS连接的不可或缺的部分。比如，你有可能和任何一方建立一个加密的通道，包括攻击者，除非我们可以确定通信的服务端是我们可以信任的，否则，所有的加密（保密）工作都没有任何作用。

而身份认证的方式就是通过证书，证书是以数字方式签名的声明，它将公钥的值与持有相应私钥的主体(个人、设备和服务)的身份绑定在一起。通过在证书上签名，CA可以核实与证书上公钥相应的私钥为证书所指定的主体所拥有。

![Alt text](/images/certificate.png "certificate")

![Alt text](/images/letsencrpt.png "letsencrpt")

简单的介绍了下概念，我们再回到HTTPS上。

##TLS协议
如上面的那张所示，HTTPS的安全主要靠的是TLS协议层的操作。那么它到底做了什么，来建立一条安全的数据传输通道呢？

**TLS握手：安全通道是如何建立的**

![Alt text](/images/TLS-handshake-protocol.png "TLS握手")

0 ms
TLS运行在一个可靠的TCP协议上，意味着我们必须首先完成TCP协议的三次握手。

56 ms
在TCP连接建立完成之后，客户端会以明文的方式发送一系列说明，比如使用的TLS协议版本，客户端所支持的加密算法等。

84 ms
服务器端拿到TLS协议版本，根据客户端提供的加密算法列表选择一个合适的加密算法，然后将选择的算法连同服务器的证书一起发送到客户端。

112 ms
假设服务器和客户端协商后，得到一个共同的TLS版本和加密算法，客户端检测服务端的证书，非常满意，客户端就会要么使用RSA加密算法（公钥加密）或者DH秘钥交换协议，得到一个服务器和客户端公用的对称秘钥。

由于历史和商业原因，基于RSA的秘钥交换占据了TLS协议的大片江山：客户端生成一个对称秘钥，使用服务器端证书的公钥加密，然后发送给服务器端，服务器端利用私钥解密得到对称秘钥。

140 ms
服务器处理由客户端发送的秘钥交换参数，验证消息的完整性，通过验证MAC，返回一个加密过的“Finished”消息给客户端。

168 ms
客户端用协商得到的堆成秘钥解密“Finished”消息，验证MAC，如果一切ok，那么这个加密的通道就建立完成，可以开始数据传输了。
