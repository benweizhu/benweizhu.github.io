<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NO END FOR LEARNING]]></title>
  <link href="http://benweizhu.github.io/atom.xml" rel="self"/>
  <link href="http://benweizhu.github.io/"/>
  <updated>2018-04-21T21:45:39+08:00</updated>
  <id>http://benweizhu.github.io/</id>
  <author>
    <name><![CDATA[ZHU Benwei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React的思考（四）- componentDidMakeSense之生命周期面试调侃]]></title>
    <link href="http://benweizhu.github.io/blog/2018/04/21/deep-thinking-in-react-4/"/>
    <updated>2018-04-21T20:51:50+08:00</updated>
    <id>http://benweizhu.github.io/blog/2018/04/21/deep-thinking-in-react-4</id>
    <content type="html"><![CDATA[<p>看到一个老外的博客用了这样一个标题《componentDidMakeSense — React Component Lifecycle Explanation》，我只能说：老哥你太有才了，本来都不太想写这篇文章，冲你这个标题，我再啰嗦下生命周期。</p>

<h3>没有水平的面试官老喜欢问的问题</h3>

<p>面试官：“你能说一下React的生命周期函数调用过程吗？”</p>

<p>我以及和我一样的人：“大哥，是不是我背出来，你就录用我？不是的话，你给我10秒钟，网不卡的话，我立马Google给你答案”</p>

<p>手贱，给你们扩皮了一份。
<strong>Mounting</strong></p>

<p>constructor()  <br/>
static getDerivedStateFromProps()  <br/>
componentWillMount() / UNSAFE_componentWillMount()  <br/>
render()  <br/>
componentDidMount()</p>

<p><strong>Updating</strong></p>

<p>componentWillReceiveProps() / UNSAFE_componentWillReceiveProps()  <br/>
static getDerivedStateFromProps()  <br/>
shouldComponentUpdate()  <br/>
componentWillUpdate() / UNSAFE_componentWillUpdate()  <br/>
render() <br/>
getSnapshotBeforeUpdate()  <br/>
componentDidUpdate()</p>

<p><strong>Unmounting</strong></p>

<p>componentWillUnmount()</p>

<p><strong>Error Handling</strong></p>

<p>componentDidCatch()</p>

<h3>你不如这样问</h3>

<p>你那么问别人问题，既不实际，也很尴尬，别人还觉得你没水平。不如我们结合实际问些问题：</p>

<p>1.组件需要做一次网络请求来获取数据，请问应该怎么写？组件有一些事件订阅放在哪个位置比较合适？为什么？</p>

<p>2.在哪些生命周期函数里面我不应该调用setState？如果调用了，会导致什么样的问题？</p>

<p>3.如果我这么写constructor来初始化对象会有什么问题？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">color</span><span class="o">:</span> <span class="nx">props</span><span class="p">.</span><span class="nx">color</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.你以前的经历中，用到了哪些生命周期函数？遇到过什么奇怪的问题没有？</p>

<p>等等，这样会显得你比较有水平，如果朋友们还问过其他类型的问题？请不惜赐教！我会好好收藏的。</p>

<h3>其他参考资料</h3>

<p>官方文档其实就是不错的和最准确的 <a href="https://reactjs.org/docs/react-component.html#the-component-lifecycle" title="the-component-lifecycle">the-component-lifecycle</a></p>

<p>另外推荐看 <a href="https://reactarmory.com/guides/lifecycle-simulators">https://reactarmory.com/guides/lifecycle-simulators</a></p>

<p>另外，放心，我这些面试问题都没有给答案，不会被套路的，大不了，我换个方式问。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React的思考（三）- 总结下shouldComponentUpdate]]></title>
    <link href="http://benweizhu.github.io/blog/2018/04/20/deep-thinking-in-react-3/"/>
    <updated>2018-04-20T11:10:09+08:00</updated>
    <id>http://benweizhu.github.io/blog/2018/04/20/deep-thinking-in-react-3</id>
    <content type="html"><![CDATA[<p>Google来，百度去，原来网上已经有一大堆讲解shouldComponentUpdate的文章，差点就打算放弃了，为了学习精神，那我就集百家之长，小总结一下。</p>

<h3>它的作用</h3>

<p>首先，简单说一下shouldComponentUpdate的作用（如果你已经知道，请不要跳过，帮助我审查下有没有描述错误）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">shouldComponentUpdate</span><span class="p">(</span><span class="nx">nextProps</span><span class="p">,</span> <span class="nx">nextState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>extends React.Component和写Functional Stateless Component（它不能复写shouldComponentUpdate），shouldComponentUpdate默认都是返回true。</p>

<p>这意味着，当props或者state更新时，该组件一定会调用render方法。</p>

<p>也就意味着，React一定会去对比该组件节点上的VisualDOM，但是，不一定会去更新真实DOM，因为reconciliation的结果可能是相等的。（一致性对比，对比新返回的元素是否和之前的元素是否一样）</p>

<p>如果，你将shouldComponentUpdate复写，返回false，那么componentWillUpdate()，render()和componentDidUpdate()都不会被调用，那么该组件不会更新。</p>

<p>当shouldComponentUpdate返回true，这个过程是向叶子节点传递的，比如：父节点返回true，它有两个叶子节点A和B，那么A和B会被要求执行mount或者update的生命周期，如果A的shouldComponentUpdate返回false，B返回true，那么只有B更新。</p>

<p>React官方的<a href="https://reactjs.org/docs/optimizing-performance.html#shouldcomponentupdate-in-action" title="ShouldComponentUpdate In Action">ShouldComponentUpdate In Action</a>讲解的很清楚。</p>

<h3>逃生出口</h3>

<p>听起来貌似很有道理，谁不希望减少无谓的计算，提高性能。</p>

<p>然而，我又看到这样一句话：React team called shouldComponentUpdate an &ldquo;escape hatch&#8221;（逃生出口）instead of &#8220;turbo button&#8221;（涡轮增压按钮）。在 github issue <a href="https://github.com/facebook/react/issues/5677" title="Stateless functional components and shouldComponentUpdate">Stateless functional components and shouldComponentUpdate</a>上也有人这么说。
听上去总结起来，有两个原因：</p>

<p>1.维护自定义的shouldComponentUpdate成本太高，有可能加了一个新的prop，但是忘记更新shouldComponentUpdate的代码，导致bug   <br/>
2.也许shouldComponentUpdate的比较计算逻辑比起直接重新render更加浪费性能</p>

<h3>尴尬了</h3>

<p>那这就尴尬了，这到底是写还是不写呢？当被问到这个问题的时候，永远都有一个正确但不受人欢迎的答案：“Well, it depends”（好吧，看情况）。</p>

<h3>React.Component，PureComponent和Function</h3>

<p>与其思考这个没有人能够给出准确答案的问题，不如我们思考怎么样结合对shouldComponentUpdate的理解，合理的写组件，设计合理的状态结构树。</p>

<p>大家对React.Component和Functional Stateless Component比较熟，一个就是extends React.Component，一个就是函数，前面也说了，它们的shouldComponentUpdate永远返回true。</p>

<p>React里还有一个顶级的组件API：<a href="https://reactjs.org/docs/react-api.html#reactpurecomponent" title="PureComponent">PureComponent</a>。
这个PureComponent，对shouldComponentUpdate有一个默认实现，官方称为shallow的prop和state对比。啥意思呢？就是帮你对比this.props和this.state上的第一层叶子节点的引用。</p>

<p>如果，某一个叶子节点里面深层的一个元素改变了，而该叶子节点本身的引用没变，shouldComponentUpdate是检查不出来的。</p>

<p>什么类型的组件比较适合写成PureComponent呢？比如：基础组件Button，它本身的属性就相对简单，完全可以和普通HTML的button元素相似，这样就可以将组件的属性拍平一层展现，用PureComponent正好满足shallow对比。</p>

<h3>总结</h3>

<p>一切不分析性能瓶颈而做的性能优化，都是无用功，shouldComponentUpdate不一定是你的性能瓶颈，但是，我们在这里讨论shouldComponentUpdate，为React组件的更新的问题开了一个头，后面介绍Redux和Object.assign还会在提到组件（不）更新的问题。</p>

<p>周五了，祝大家周末愉快。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React的思考（二）- 逃不开的生命周期函数之构造函数]]></title>
    <link href="http://benweizhu.github.io/blog/2018/04/18/deep-thinking-in-react-2/"/>
    <updated>2018-04-18T21:23:11+08:00</updated>
    <id>http://benweizhu.github.io/blog/2018/04/18/deep-thinking-in-react-2</id>
    <content type="html"><![CDATA[<p>这一定是一个老生常谈的话题，你们就别多想了，跟我一起回顾一遍，看我说的有没有道理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kr">class</span> <span class="nx">Timer</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">seconds</span><span class="o">:</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="nx">Seconds</span><span class="o">:</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">seconds</span><span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Timer</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nx">mountNode</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Constructor</h3>

<p>构造函数（或者构造器），这个概念对于熟悉基于类的面向对象语言的朋友们肯定烂熟于心，但是对于JavaScript而言，这个概念往往容易让人困惑。</p>

<p>在JavaScript的世界里，构造函数和普通函数没有什么区别，你一样的可以像普通函数一样调用它，但如果通过new关键字来调用函数，该函数就成为了构造函数，this指针就会指向新创建的对象。</p>

<p>比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">function</span> <span class="nx">Person</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;CodePlayer&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Person</span><span class="p">()</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">Window</span> <span class="p">{</span><span class="nx">external</span><span class="o">:</span> <span class="nb">Object</span><span class="p">,</span> <span class="nx">chrome</span><span class="o">:</span> <span class="nb">Object</span><span class="p">,</span> <span class="nb">document</span><span class="o">:</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">WPCOMSharing</span><span class="o">:</span> <span class="nb">Object</span><span class="p">,</span> <span class="nx">RecaptchaTemplates</span><span class="o">:</span> <span class="nb">Object</span><span class="err">…</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">()</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">Person</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;CodePlayer&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>更多具体的解释请参考我以前的一篇博客：<a href="http://benweizhu.github.io/blog/2015/12/31/javascript-contructor-new-prototype/" title="JavaScript渐入佳境 - 构造函数、new、原型">JavaScript渐入佳境 - 构造函数、new、原型</a>。</p>

<h3>ES6的Class、extends、super</h3>

<p>上面是一个ES5的例子，然而，当我们写React代码时，我们会用到ES6语法，会用到class，constructor以及super关键字，他们的作用是什么？</p>

<p>我们先看下面一个跟React无关的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="c1">//ES6</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">Rectangle</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">constructor</span> <span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">width</span>  <span class="o">=</span> <span class="nx">width</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//翻译成ES5</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Rectangle</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//ES6</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">Shape</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">Rectangle</span> <span class="kr">extends</span> <span class="nx">Shape</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">constructor</span> <span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">super</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">width</span>  <span class="o">=</span> <span class="nx">width</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//概念性翻译成ES5</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Share</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Rectangle</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Shape</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">width</span>  <span class="o">=</span> <span class="nx">width</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Rectangle</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</span><span class='line'><span class="nx">Rectangle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">Rectangle</span><span class="p">;</span>
</span><span class='line'><span class="nx">Rectangle</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">Shape</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>简单来说，class的作用就是定义Shape和Rectangle两个function（这就是被人用烂的词，语法糖），extends的作用是定义函数Rectangle的prototype和<strong>proto</strong>属性来实现原型链的继承，super的作用是在Rectangle函数中执行Share函数，并绑定this指针。</p>

<p>建议查看Babel的编译结果，它是更准确的ES5转义：<a href="https://babeljs.io/repl/#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;code_lz=MYGwhgzhAEDKAWYAOBTaBvAUJgvp0kMASisAC5gB2A5iGigB5kqUAmMCyaW0v0wAe0oQyAJwCu5AaOgAKAJasANNAYqAnioDuisvBXwU86vDIBKDJj7XoEcalELlqjWYDcVm7z3yIAOh1WPV4AXmhAvQ8vb3hfP0NjU2gwhJMyKL48PCA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;lineWrap=true&amp;presets=es2015&amp;prettier=false&amp;targets=&amp;version=6.26.0&amp;envVersion=" title="babel链接">babel链接</a></p>

<blockquote><p>如果以后有人问我，JavaScript和Java有什么关系，我不会说它们没关系，我会告诉那个人，ES6抄袭Java的语法范式。</p></blockquote>

<h3>React中的constructor</h3>

<p>我们再来回到React上，看ES6和Babel编译后的结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="c1">//ES6</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">Rectangle</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//不完全Babel编译代码</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Rectangle</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">_classCallCheck</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">Rectangle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">_possibleConstructorReturn</span><span class="p">(</span>
</span><span class='line'>    <span class="k">this</span><span class="p">,</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">Rectangle</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">||</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">Rectangle</span><span class="p">))</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">)</span> <span class="c1">// 看这里</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//ES6</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">Rectangle</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
</span><span class='line'>    <span class="nx">constructor</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//不完全Babel编译代码</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Rectangle</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">_classCallCheck</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">Rectangle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="nx">_possibleConstructorReturn</span><span class="p">(</span>
</span><span class='line'>     <span class="k">this</span><span class="p">,</span>
</span><span class='line'>     <span class="p">(</span><span class="nx">Rectangle</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">||</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">Rectangle</span><span class="p">))</span>
</span><span class='line'>       <span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">props</span><span class="p">)</span> <span class="c1">// 看这里</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们创建一个组件时，如果不需要在constructor里面做任何初始化的操作时，我们是不需要复写constructor的，因为Babel编译后，会将整个arguments都绑定上this指针后传递给被Rectangle的原型（React.Component），并执行，它替我们将constructor中super()的操作做了，如上所示。</p>

<p>如果有需要在constructor中做初始化的操作时，那么必须带上super(props)并放在最前面，因为它的作用是调用Rectangle的原型（React.Component），并绑定this指针。</p>

<p>那么，哪些初始化的操作可以在constructor里面做呢？原则上只有一个，那就是初始化state。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kr">class</span> <span class="nx">Timer</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">seconds</span><span class="o">:</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有三个问题：</p>

<p>1.为什么不用this.setState()来执行？</p>

<p>原因：1.this.state够直接了，你还要怎样？2.this.setState()是一个异步执行的函数，执行完之后，组件的响应式重新渲染（render），你这第一次渲染都还没开始呢。3.在这里this.setState()是一个空指令，这么写，不会任何起作用，不信你可以试试。</p>

<p>2.那么能不能在constructor里面执行网络请求来初始化数据？</p>

<p>我问过许多来面试的候选人，你的网络请求会放置在什么时候执行，我印象中确实有人回答我说在constructor中。听起来，在constructor中获取数据来初始化挺合理的。而且确实有人问：<a href="https://stackoverflow.com/questions/39338464/reactjs-why-is-the-convention-to-fetch-data-on-componentdidmount" title="Stack Overflow">Stack Overflow</a></p>

<p>然而，我们在官方文档上看到这样一句话：避免在构造函数中引入任何有副作用的代码（比如data fetching或者DOM manipulation）或执行订阅的操作，如果有，请在componentDidMount里执行。</p>

<p>关于这个位置的理解，我常常这样解释，就像你用jQuery写代码一样，你一定会等到document ready之后，才开始操作DOM或执行网络请求（也是为了操作DOM），否则，很有可能遇到undefined的情况。虽然，React这里也许和jQuery不一样，但我认为它的理由是相似的。（如果不对，请纠正我）。</p>

<p>3.那么可不可以传递props到state呢？非常像Java的写法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">color</span><span class="o">:</span> <span class="nx">props</span><span class="p">.</span><span class="nx">initialColor</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Java</span>
</span><span class='line'><span class="kr">public</span> <span class="nx">Shape</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Shape</span><span class="p">(</span><span class="nb">String</span> <span class="nx">color</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这么写，没有说完全错误，但是你需要注意的是，要同时实现getDerivedStateFromProps()在React 16中，或者16之前的componentWillReceiveProps，来保证当父组件更新时，props能有传递到state，因为constructor只会执行一次。</p>

<p>如果出现这种使用场景，我们需要思考一下，能否将state的控制向上提升，将Shape组件仅仅作为Presentional Component，这样减少在不同的两个位置（父组件和它自己）来控制组件的状态。</p>

<h4>this.handleClick = this.handleClick.bind(this);</h4>

<p>官方文档说，在constructor里面只做两件事情，初始化state，和绑定event的handler函数的this指针到组件对象本身。既然是this指针这么困惑的话题，我再啰嗦一句这里做了什么：</p>

<p>当函数（这里指这个组件）就成为了构造函数，该函数中this指针就会指向新创建的对象，也就是constructor里面的this就是指向的它自己（该组件的实例），那么this.handleClick = this.handleClick.bind(this);就能保证在handleClick函数里面的this指针，无论handleClick被传递到了哪里，可能被基础DOM元素button使用，也可能被子组件传递到别的位置，handleClick里面的this指针都能指向该组件的（如果是下面的例子就是Toggle），这样里面的this.setState才能起作用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kr">class</span> <span class="nx">Toggle</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span><span class="nx">isToggleOn</span><span class="o">:</span> <span class="kc">true</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// This binding is necessary to make `this` work in the callback</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">handleClick</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">prevState</span> <span class="o">=&gt;</span> <span class="p">({</span>
</span><span class='line'>      <span class="nx">isToggleOn</span><span class="o">:</span> <span class="o">!</span><span class="nx">prevState</span><span class="p">.</span><span class="nx">isToggleOn</span>
</span><span class='line'>    <span class="p">}));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">isToggleOn</span> <span class="o">?</span> <span class="s1">&#39;ON&#39;</span> <span class="o">:</span> <span class="s1">&#39;OFF&#39;</span><span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>总结</h3>

<p>别小看一个constructor函数，这里面的知识点可多了。总结一下，就是只干这些事情，其他的别干：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span><span class="nx">isToggleOn</span><span class="o">:</span> <span class="kc">true</span><span class="p">};</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React的思考（一）- 官网首页的信息量就挺大]]></title>
    <link href="http://benweizhu.github.io/blog/2018/04/17/deep-thinking-in-react-1/"/>
    <updated>2018-04-17T21:11:23+08:00</updated>
    <id>http://benweizhu.github.io/blog/2018/04/17/deep-thinking-in-react-1</id>
    <content type="html"><![CDATA[<p>没错，这个标题有些大的，也挺抽象，给自己画了一个大饼，就看能不能给圆上。</p>

<h2>从官网的首页开始</h2>

<h3>先看小标题</h3>

<p>我们就从<a href="https://reactjs.org/" title="React">React</a>官方网站的首页开始我们的思考。先看它的小标题：</p>

<blockquote><p>A JavaScript library for building user interfaces。</p></blockquote>

<p>React从一开始就将自己到底是一个什么样的存在，定义的非常的清楚。看清楚，我不是一个框架，我就是一个JavaScript的库，那我是干什么用的呢？构建用户的界面（UI），其他的乱七八糟的事情我不管。</p>

<p>有人可能会问，其他乱七八糟事情的是什么？比如：页面的路由，网络请求，逻辑控制器（Controller），服务等等，是不是听起来挺像前几年某A打头的框架做的事情，这里我就不点名了，大家心里都清楚，没有谁对谁错，此一时彼一时的。</p>

<p>为什么React是这样的一个定义呢？关于这一点，我们可以在Pete Hunt在2013年5月份写的一篇博客<a href="https://reactjs.org/blog/2013/06/05/why-react.html" title="Why did we build React?">Why did we build React?</a>中看到一些insight。比如：
简单摘录一段：</p>

<p><em>React isn’t an MVC framework.</em></p>

<p><em>React is a library for building composable user interfaces. It encourages the creation of reusable UI components which present data that changes over time.</em></p>

<p>鄙人简单理解和翻译：我不是MVC框架。React是一个用于构建可组合用户界面的库。它鼓励创建可重用的UI组件，以呈现随时间变化的数据。Pete Hunt将React的目的说的很透彻。</p>

<p>React官网也通过这样一句话，给自己了一个清晰的定位，并且在这个清晰的定位下，给出下面三个基本特性：Declarative，Component-Based和Learn Once, Write Anywhere。我们一个个来看：</p>

<h4>Declarative</h4>

<p>Declarative，声明式的，嗯呐嗯呐，这是什么意思？相信大家对“声明”这个词比较了解，比如：声明一个变量，声明一个函数。</p>

<p>要理解它，首先要引入另外一个东西，叫做Imperative Programming（命令式编程）。声明式编程和命令式编程，都是一种编程范式，那么他们的区别是什么？简单来说就是what和how的区别。</p>

<p><em>命令式编程：命令“机器”如何去做事情(how)，这样不管你想要的是什么(what)，它都会按照你的命令实现。</em></p>

<p><em>声明式编程：告诉“机器”你想要的是什么(what)，让“机器”想出如何去做(how)。</em></p>

<p>命令式编程应该大家都比较好理解，比如：操作几个变量，最后计算出你想要的结果，这里的重点在于你通过指令操作它们得到结果。那么声明式呢？举个例子，比如，SQL语句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='SQL'><span class='line'><span class="k">Select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">JSLibrary</span> <span class="k">where</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;React&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你没告诉SQL该怎么去搜索，只是告诉它要找到名字是React的库，对吧？</p>

<p>React就是采用声明式的编程范式思想，你只需要设计在不同状态下，组件应该是长什么样子，React自己会帮助完成组件的更新。它的最直接明白的对比（反面教材），就是通过jQuery操作DOM来更新UI。</p>

<p>React的这种开发模式和有限状态机的思想是一致的，在预知所有状态的条件下，去规划你的代码，也因此衍生了Redux, MobX这样的状态管理库。</p>

<h4>Component-Based</h4>

<p>基于组件的，这个相对比较好理解，组件是什么？对数据和方法的简单封装。它应该具备具有独立性，封装性，可重用性，职责单一，有自己的状态等等。React组件就封装了自己的状态来构建复杂的UI的组件。</p>

<p><em>Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.</em></p>

<p>官方网站上说：组件的逻辑是用JavaScript编写，而不是模板，所以你轻松的传递数据到应用，并且让状态不和DOM打交道。</p>

<p>如果你十分好奇，这里的“而不是模板”是什么意思？Pete Hunt的那篇文章其实说的很清楚，传统的Web应用是通过HTML或者模板引擎（比如后端模板引擎：JSP，HAML等，前端模板引擎：handlebar,ejs等）来构建UI的，而React使用有完整功能编程语言来渲染视图。</p>

<p>其实，我是不太认同的，JSX不算模板，VueTemplate不算模板？不过JSX允许你用JavaScript的方式做一些逻辑的处理，而不像JSP需要些JSTL和ctag的的逻辑标签，如果我的理解有误，请务必纠正我。</p>

<h4>Learn Once, Write Anywhere</h4>

<p>这个，看看就行，官方网站这里特指的是React Native可以开发移动端的应用，不过大家也不要太天真，你理解成React和React-Native的思想和语法是融会贯通的就行了，不要真的以为可以很轻松的将组件在React和RN之间移植，否则你会被鄙视的。</p>

<p>另外提一点，在ElectronJS的帮助下，可以通过React开发桌面应用，这个倒是真可行。</p>

<h3>总结</h3>

<p>你看，首页的信息量其实挺大吧，认证阅读和思考，其实收获不少，总结下来就是：我是一个用来实现基于状态的UI组件的JavaScript库（妈呀，有点绕）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何用GoCD给阿里云的ECS配置Docker环境和部署SpringBoot的Docker应用到]]></title>
    <link href="http://benweizhu.github.io/blog/2018/01/22/go-cd-aliyun-spring-boot-docker/"/>
    <updated>2018-01-22T11:29:23+08:00</updated>
    <id>http://benweizhu.github.io/blog/2018/01/22/go-cd-aliyun-spring-boot-docker</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle对资源的过滤处理]]></title>
    <link href="http://benweizhu.github.io/blog/2017/11/23/gradle-resource-filtering/"/>
    <updated>2017-11-23T13:01:08+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/11/23/gradle-resource-filtering</id>
    <content type="html"><![CDATA[<p>两种场景需要动态的处理资源：</p>

<p>1.对resource下的资源进行处理  <br/>
2.对war包中其他资源，比如：jsp文件进行处理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.apache.tools.ant.filters.*</span>
</span><span class='line'>
</span><span class='line'><span class="n">processResources</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">filter</span> <span class="n">ReplaceTokens</span><span class="o">,</span> <span class="nl">tokens:</span> <span class="o">[</span>
</span><span class='line'>        <span class="s">&quot;application.version&quot;</span><span class="o">:</span> <span class="n">project</span><span class="o">.</span><span class="na">property</span><span class="o">(</span><span class="s">&quot;application.version&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.apache.tools.ant.filters.*</span>
</span><span class='line'>
</span><span class='line'><span class="n">war</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">filter</span> <span class="n">ReplaceTokens</span><span class="o">,</span> <span class="nl">tokens:</span> <span class="o">[</span>
</span><span class='line'>            <span class="err">&#39;</span><span class="n">versionDate</span><span class="err">&#39;</span><span class="o">:</span> <span class="s">&quot;${new Date().format(&#39;yyyyMMdd&#39;)}&quot;</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span>
</span><span class='line'>            <span class="err">&#39;</span><span class="n">copyright</span><span class="err">&#39;</span>  <span class="o">:</span> <span class="s">&quot;${new Date().format(&#39;yyyy&#39;)}&quot;</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>比较简单，一眼就看完了，就不多介绍了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解ES6 Promise]]></title>
    <link href="http://benweizhu.github.io/blog/2017/07/01/understand-promise/"/>
    <updated>2017-07-01T19:20:31+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/07/01/understand-promise</id>
    <content type="html"><![CDATA[<p>本文的内容来自于 ES6-Promise-Workshop： <a href="https://github.com/benweizhu/es6-promise-workshop">https://github.com/benweizhu/es6-promise-workshop</a></p>

<h2>什么是Promise？ Promise用来做什么？</h2>

<p>延迟操作？网络请求？回调函数？它们统称为“异步操作”。</p>

<ul>
<li>User interaction(mouse, keyboard, etc)</li>
<li>AJAX</li>
<li>Timers &hellip;</li>
</ul>


<h2>为什么大家觉得刚开始写Promise会不太习惯？</h2>

<p>因为：</p>

<p>习惯了jQuery的回调</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/user&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>习惯同步的Get方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//Java</span>
</span><span class='line'><span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">getUser</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="na">getUsername</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>当有一天</p>

<p>AngularJS通过Service返回一个Promise的时候，我们仍然将Service命名为UserService，但此时返回是一个Promise，而不是User本身。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">userService</span><span class="p">.</span><span class="nx">getUser</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">user</span><span class="p">.</span><span class="nx">username</span><span class="p">;</span>
</span><span class='line'><span class="c1">// undefined</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Promise是一个JavaScript对象</h2>

<p>JavaScript对象创建的方法有两个：字面量和new关键字</p>

<h2>ES6 Promise语法</h2>

<p>通过new关键字创建一个Promise，并传递一个函数作为参数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 业务代码</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Promise中业务代码的执行有两个结果：成功（resolve）或者 失败（reject）</strong></p>

<p>成功调用resolve</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">resolve</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span> <span class="c1">// pass 42 to then cb</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>失败调用reject</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">));</span> <span class="c1">// pass Error obj to catch cb</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">promise</span><span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">));</span> <span class="c1">// pass Error obj to catch cb</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">resolveCb</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是常见的Promise教程顺其自然的语法讲解，resolve会将传入的参数传递给then的回调函数，reject会传递给catch或者then的第二个参数。</p>

<h2>Promise是异步操作</h2>

<p>这个时候，我们思考一个问题：我们一直说Promise是解决异步操作的，那么上面的代码中，哪一部分是异步的呢？</p>

<p>先思考下，异步操作中，到底哪一步是异步，比如，ajax调用：代码顺序（同步）执行，发现了一个ajax操作，顺序（同步）执行它，ajax发出一个网络请求，这个网络请求操作交给了浏览器，当网络请求返回，调用对应的callback函数。</p>

<p>真正的异步操作是指这个回调函数，它并没有在JavaScript代码顺序（同步）执行的过程中被调用，而是在晚一些时候才被执行。</p>

<p>那么对于上面的Promise，构造函数传入的函数，是顺序执行的。在这个Promise的传递函数中，没有进行任何的异步操作（比如网络请求），而是顺序执行的，直接调用resolve或者reject将状态设置为成功或者失败。</p>

<p>但是当运行promise.then或者promise.catch，即便当时promise的状态已经是确定的，then和catch里面的函数仍然是异步执行。</p>

<h2>Promise实现网络请求</h2>

<p>过去，我们都是使用开源的Promise网络请求工具库，比如Fetch，Axios。今天我们来自己通过ES6 Promoise和XHR实现一个Promise网络请求工具。</p>

<p>代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">fetchData</span><span class="p">(</span><span class="nx">URL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nx">URL</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">resolve</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">statusText</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">statusText</span><span class="p">));</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="nx">fetchData</span><span class="p">(</span><span class="s1">&#39;https://raw.githubusercontent.com/benweizhu/es6-promise-workshop/master/data/books.json&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">responseText</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;json&#39;</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">responseText</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">responseText</span><span class="p">))</span>
</span><span class='line'><span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实非常简单，你只要记得在fetchData执行完之后，你需要一个promise，那么fetchData中就需要通过new关键字创建并返回，剩下的就是将XHR的操作放在传入的构造函数中。</p>

<h2>Promise Chain</h2>

<p>先看代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">increment</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">value</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">output</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="cm">/**  1 + 1 = 2 **/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">promise</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">increment</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Promise.resolve(1)是Promise提供的快速创建一个Promise的方法。</p>

<p>这里，我们通过代码反向推导，promise可以调用then或者catch方法，当我们看到then方法后面可以继续调用then方法时，就可以明白，then方法也返回了一个promise，这个promise的then方法中的函数接收到的参数是上一个then方法中的函数return的结果。</p>

<p>假设现在我们来实现( 1 + 1 ) * 2 = 4</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">doubleUp</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">value</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">increment</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">value</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">output</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="cm">/** ( 1 + 1 ) * 2 = 4 **/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">promise</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">increment</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">doubleUp</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么，这里很容混淆的时候，以前你可能会认为.then方法之所以可以chain，是因为then的函数中返回了一个promise，但其实不是这个原因。</p>

<p><strong>那么，如果真的返回了一个promise，结果是什么呢?答案是：</strong></p>

<p>如果你返回类似于promise的内容，下一个then()则会等待，并仅在promise产生结果（成功/失败）时调用</p>

<p>举个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">resolveAfterTime</span><span class="p">(</span><span class="nx">num</span><span class="p">,</span> <span class="nx">time</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">resolve</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="nx">time</span><span class="p">)</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">resolveAfterTime</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">1000</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">resolveAfterTime</span><span class="p">(</span><span class="nx">value</span> <span class="o">+</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5000</span><span class="p">);</span>
</span><span class='line'><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一个log在1秒后打印，第二个log在5秒后打印。</p>

<h2>终极作业</h2>

<p>链式调用请求书列表中每本书的详细内容，并返回JSON数据</p>

<p><a href="https://raw.githubusercontent.com/benweizhu/es6-promise-workshop/master/data/books.json">https://raw.githubusercontent.com/benweizhu/es6-promise-workshop/master/data/books.json</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;《重构 改善既有代码的设计》&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;price&quot;</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://raw.githubusercontent.com/benweizhu/es6-promise-workshop/master/data/refactoring.json&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;《JavaScript编程精粹》&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;price&quot;</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://raw.githubusercontent.com/benweizhu/es6-promise-workshop/master/data/javascript-the-good-parts.json&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>这里我们会用到Promise.all</h3>

<p>Promise.all: 接收一个promise对象的数组作为参数，当这个数组里的所有promise对象全部变为resolve或reject状态的时候，它才会去调用.then方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">fetchData</span><span class="p">(</span><span class="nx">URL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nx">URL</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">resolve</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">statusText</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">statusText</span><span class="p">));</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fetchData</span><span class="p">(</span><span class="s2">&quot;https://raw.githubusercontent.com/benweizhu/es6-promise-workshop/master/data/books.json&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">books</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">booksPromise</span> <span class="o">=</span> <span class="nx">books</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">book</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">fetchData</span><span class="p">(</span><span class="nx">book</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">booksPromise</span><span class="p">);</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">bookDetailsList</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">bookDetailsList</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">bookDetails</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">img</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;img&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">img</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">bookDetails</span><span class="p">).</span><span class="nx">imageUrl</span><span class="p">;</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">img</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React应用在产品环境下的性能优化]]></title>
    <link href="http://benweizhu.github.io/blog/2017/05/12/react-redux-production-optimisation/"/>
    <updated>2017-05-12T18:21:55+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/05/12/react-redux-production-optimisation</id>
    <content type="html"><![CDATA[<p>只有10%~20%的最终用户响应时间花在了下载HTML文档上，其余的80%~90%时间花在了下载页面中的 <strong>所有组件</strong> 上。   - 性能黄金法则，Steve Souders</p>

<p>Steve Souders在2007年提出这样的“性能黄金法则”，我猜测当他看到React这样一项技术之后，一定会觉得自己的这个法则居然如此的准确，可能甚至觉得这个比例不够极致。（虽然此组件非React组件，但是我还是忍不住想笑）</p>

<p>所以，今天我们就来聊聊，React应用在产品环境下的性能优化问题。</p>

<h2>Bundle大小分析</h2>

<p>在开始做任何的优化之前，你需要知道痛点在什么地方？既然Steve说80%~90%时间花在了下载页面中的 <strong>所有组件</strong> 上，那么就从了解项目的模块组成开始。</p>

<p><strong>1.Webpack运行时的输出</strong></p>

<p>在没有任何外部力量帮助的情况下，我们可以直接阅读Webpack的输出
<img src="http://benweizhu.github.io/images/react-production/webpack-output.png" width="500" alt="react ouput" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>webpack --display-chunks</span></code></pre></td></tr></table></div></figure>


<p>可以查看模块在哪个分块中出现，帮助我们查找分块中重复的依赖。</p>

<p><strong>2.bundle-size-analyzer</strong></p>

<p><a href="https://github.com/robertknight/webpack-bundle-size-analyzer" title="webpack-bundle-size-analyzer">webpack-bundle-size-analyzer</a>是我个人比较喜欢的模块大小分析工具，使用起来非常简单，输出也非常清晰。</p>

<p><img src="http://benweizhu.github.io/images/react-production/webpack-analyzer.png" width="500" alt="webpack-analyzer" /></p>

<p><strong>3.webpack-bundle-analyzer</strong></p>

<p><a href="https://github.com/th0r/webpack-bundle-analyzer" title="webpack-bundle-analyzer">webpack-bundle-analyzer</a>在github上star人数更多，功能也相对更加齐全（fancy）。
<img src="http://benweizhu.github.io/images/react-production/webpack-bundle-analyzer.gif" width="500" alt="webpack-bundle-analyzer.gif" /></p>

<h2>代码分离（Code Splitting）</h2>

<p><strong>1.Vendor代码分离</strong></p>

<p>代码分离是Webpack核心功能之一，典型的做法是将第三方依赖代码从应用代码中抽离出来，这样可以利用浏览器的缓存来提高性能（减少下载次数）。</p>

<p>Webpack官方文档有非常详细的介绍： <a href="https://webpack.js.org/guides/code-splitting-libraries/" title="code-splitting-libraries">code-splitting-libraries</a>，我就不在这里赘述，下面是一个简单代码样例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpack&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">env</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">entry</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">main</span><span class="o">:</span> <span class="s1">&#39;./index.js&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">vendor</span><span class="o">:</span> <span class="s1">&#39;react&#39;</span><span class="p">,</span> <span class="s1">&#39;react-dom&#39;</span><span class="p">,</span> <span class="s1">&#39;react-redux&#39;</span><span class="p">,</span> <span class="s1">&#39;babel-polyfill&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">output</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">filename</span><span class="o">:</span> <span class="s1">&#39;[name].[chunkhash].js&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">path</span><span class="o">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;dist&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span>
</span><span class='line'>                <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;vendor&#39;</span> <span class="c1">// Specify the common bundle&#39;s name.</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.CSS代码</strong></p>

<p>也许你还会想要的就是将CSS文件分离，原因是一样的。官方文档也给出了非常详细的介绍：<a href="https://webpack.js.org/guides/code-splitting-css/" title="code-splitting-css">code-splitting-css</a>，所以同样也不赘述了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">extractCSS</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExtractTextPlugin</span><span class="p">(</span><span class="s1">&#39;styles.css&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">module</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">rules</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.scss$/</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">use</span><span class="o">:</span> <span class="nx">extractCSS</span><span class="p">.</span><span class="nx">extract</span><span class="p">([</span><span class="s1">&#39;css-loader&#39;</span><span class="p">,</span> <span class="s1">&#39;postcss-loader&#39;</span><span class="p">,</span> <span class="s1">&#39;sass-loader&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="nx">extractCSS</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.React-Router按需分离</strong></p>

<p>当应用逐渐变得复杂后，你会发现，仅仅将代码分离为vendor和app两个bundle，远远是不够的，要么vendor.js文件特别大，要么app.js文件特别大，这个时候你一定会想到，要按需加载（异步加载）。</p>

<p>ES2015 Loader spec中定义了一个import()方法来在运行时动态加载ES2015的模块，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">determineDate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">import</span><span class="p">(</span><span class="s1">&#39;moment&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">moment</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">moment</span><span class="p">().</span><span class="nx">format</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Failed to load moment&#39;</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">determineDate</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Webpack会将import()方法看做一个“代码分离点”，将被加载的模块放在一个单独的文件块中。</p>

<p>那么，如果你的应用采用了React-Router，我们就可以根据路由，按需加载所使用的组件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">errorLoading</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="err">`</span><span class="nx">Dynamic</span> <span class="nx">page</span> <span class="nx">loading</span> <span class="nx">failed</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">error</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">loadRoute</span><span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">module</span> <span class="o">=&gt;</span> <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">module</span><span class="p">.</span><span class="k">default</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">Router</span> <span class="nx">history</span><span class="o">=</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="nx">queryKey</span><span class="o">=</span><span class="s2">&quot;false&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/user&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;UserPage&quot;</span> <span class="nx">getComponent</span><span class="o">=</span><span class="p">{(</span><span class="nx">location</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">System</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="s1">&#39;./components/UserPage&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">loadRoute</span><span class="p">(</span><span class="nx">cb</span><span class="p">,</span> <span class="kc">false</span><span class="p">)).</span><span class="k">catch</span><span class="p">(</span><span class="nx">errorLoading</span><span class="p">)}}</span>
</span><span class='line'>  <span class="o">/&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/data&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;DataPage&quot;</span> <span class="nx">getComponent</span><span class="o">=</span><span class="p">{(</span><span class="nx">location</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">System</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="s1">&#39;./components/DataPage&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">loadRoute</span><span class="p">(</span><span class="nx">cb</span><span class="p">,</span> <span class="kc">false</span><span class="p">)).</span><span class="k">catch</span><span class="p">(</span><span class="nx">errorLoading</span><span class="p">)}}</span>
</span><span class='line'>  <span class="o">/&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/about&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;AboutPage&quot;</span> <span class="nx">getComponent</span><span class="o">=</span><span class="p">{(</span><span class="nx">location</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">System</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="s1">&#39;./components/AboutPage&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">loadRoute</span><span class="p">(</span><span class="nx">cb</span><span class="p">,</span> <span class="kc">false</span><span class="p">)).</span><span class="k">catch</span><span class="p">(</span><span class="nx">errorLoading</span><span class="p">)}}</span>
</span><span class='line'>  <span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/Router&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Webpack会根据分离点生成对应的JS文件</p>

<p><img src="http://benweizhu.github.io/images/react-production/require-on-demand.jpg" width="500" alt="" /></p>

<p><strong>4.大文件异步加载</strong></p>

<p>笔者遇到过这样的需求，采用了某图表库来做地图绘制，但是地图库JS文件或者JSON文件特别的大，即便压缩之后也有400+KB。所以，我将该依赖放在应用（SPA）的首页，并采用了异步加载，这样，首屏加载速度不会依赖于它，而用户从首页到需要使用该地图的部分还存在一些操作过程，所以留存了一些时间来异步加载地图数据。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">System</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="s1">&#39;./map/china.js&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">().</span><span class="k">catch</span><span class="p">(</span><span class="nx">errorLoading</span><span class="p">);</span>
</span><span class='line'><span class="nx">System</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="s1">&#39;./map/world.js&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">().</span><span class="k">catch</span><span class="p">(</span><span class="nx">errorLoading</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>当首页需要的JS加载完成之后，才开始加载：</p>

<p><img src="http://benweizhu.github.io/images/react-production/async-require.gif" alt="" /></p>

<h2>运行webpack -p</h2>

<p>Webpack的官方文档有详细的说明，对于产品环境的构建应该运行webpack -p：<a href="https://webpack.js.org/guides/production-build/" title="production-build">production-build</a>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">webpack</span> <span class="o">--</span><span class="nx">optimize</span><span class="o">-</span><span class="nx">minimize</span> <span class="o">--</span><span class="nx">define</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span><span class="o">=</span><span class="s2">&quot;&#39;production&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时，Webpack会做几件事情，我们也需要根据这些事情做相关的配置：</p>

<p><strong>1.对JS代码进行压缩</strong></p>

<p>&ndash;optimize-minimize 标签会对JS代码用UglifyJsPlugin做压缩，并根据Webpack中配置的devtool配置SourceMap</p>

<p><strong>2.SourceMap</strong></p>

<p>即便在产品环境下，仍然建议使用SourceMap，方便产品环境的bug定位，但是对于开发环境和产品环境，我们需要使用不同力度的SourceMap，才能既方便开发也兼容产品环境性能。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// webpack config</span>
</span><span class='line'>  <span class="nx">devtool</span><span class="o">:</span> <span class="nx">isProd</span> <span class="o">?</span> <span class="s1">&#39;cheap-source-map&#39;</span> <span class="o">:</span> <span class="s1">&#39;cheap-module-inline-source-map&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>官方提供了7种Devtool，而且有更详细的关于devtool的配置，请详见 <a href="https://webpack.js.org/configuration/devtool/" title="devtool">devtool</a>。
<strong>3.Node环境变量production</strong></p>

<p>将redux的中间件和开发环境使用的devtool通过变量分离
&ndash;define process.env.NODE_ENV=&ldquo;&lsquo;production&rsquo;&rdquo; 标签会以下面的方式使用DefinePlugin：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpack&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="cm">/*...*/</span>
</span><span class='line'>  <span class="nx">plugins</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">DefinePlugin</span><span class="p">({</span>
</span><span class='line'>      <span class="s1">&#39;process.env.NODE_ENV&#39;</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="s1">&#39;production&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个时候，就可以在产品代码里面获取到此环境变量。这个时候我们要做的就是根据环境变量的不同，来进行不同的配置，比如：这样写log</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">!==</span> <span class="s1">&#39;production&#39;</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于产品环境就等价于：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时UglifyJS插件就会将它去除掉。</p>

<p>又比如：在react-redux开发中，我们一般都会配置开发插件DevTool，或者log中间件，但其实，在产品环境中，我们不需要，这个时候就需要根据环境变量来动态配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">applyMiddleware</span><span class="p">,</span> <span class="nx">compose</span><span class="p">,</span> <span class="nx">createStore</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;redux&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">thunkMiddleware</span> <span class="nx">from</span> <span class="s1">&#39;redux-thunk&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">createLogger</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;redux-logger&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">rootReducer</span> <span class="nx">from</span> <span class="s1">&#39;./reducers&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">promiseMiddleware</span> <span class="nx">from</span> <span class="s1">&#39;redux-promise-middleware&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">finalCreateStore</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">===</span> <span class="s1">&#39;production&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">finalCreateStore</span> <span class="o">=</span> <span class="nx">compose</span><span class="p">(</span>
</span><span class='line'>      <span class="nx">applyMiddleware</span><span class="p">(</span><span class="nx">promiseMiddleware</span><span class="p">(),</span> <span class="nx">thunkMiddleware</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)(</span><span class="nx">createStore</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">finalCreateStore</span> <span class="o">=</span> <span class="nx">compose</span><span class="p">(</span>
</span><span class='line'>      <span class="nx">applyMiddleware</span><span class="p">(</span><span class="nx">promiseMiddleware</span><span class="p">(),</span> <span class="nx">thunkMiddleware</span><span class="p">,</span> <span class="nx">createLogger</span><span class="p">()),</span>
</span><span class='line'>      <span class="nb">window</span><span class="p">.</span><span class="nx">devToolsExtension</span> <span class="o">?</span> <span class="nb">window</span><span class="p">.</span><span class="nx">devToolsExtension</span><span class="p">()</span> <span class="o">:</span> <span class="nx">f</span> <span class="o">=&gt;</span> <span class="nx">f</span>
</span><span class='line'>    <span class="p">)(</span><span class="nx">createStore</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">finalCreateStore</span><span class="p">(</span><span class="nx">rootReducer</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tree Shaking</h2>

<p><a href="https://webpack.js.org/guides/tree-shaking/" title="Webpack TreeShake">Webpack TreeShake</a></p>

<p>清理无用的JS代码，真实导入有用的模块。配置起来非常简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;presets&quot;</span><span class="o">:</span> <span class="p">[[</span><span class="s2">&quot;es2015&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;modules&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">}],</span> <span class="s2">&quot;react&quot;</span><span class="p">,</span> <span class="s2">&quot;stage-0&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://benweizhu.github.io/images/react-production/tree-shake.png" alt="tree-shake.png" /></p>

<h2>Babel对React代码的优化</h2>

<p>除了从产品环境模块架构上优化，Babel也在编译阶段优化React应用性能作出了巨大贡献。</p>

<p><strong>1.transform-react-constant-elements插件</strong></p>

<p><a href="https://babeljs.io/docs/plugins/transform-react-constant-elements/" title="transform-react-constant-elements">transform-react-constant-elements</a>，自从React0.14版本，我们可以将React元素以及他们的属性对象当做普通的值对象看待。这时候我们就可以重用那些输入是immutable的React元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">Hr</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">hr</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;hr&quot;</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">_ref</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">hr</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;hr&quot;</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">Hr</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">_ref</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>从而减少对React.createElement的调用。</p>

<p><strong>2.transform-react-inline-elements插件</strong></p>

<p><a href="https://babeljs.io/docs/plugins/transform-react-inline-elements/" title="transform-react-inline-elements">transform-react-inline-elements</a>，自从React0.14版本，可以将React元素内联为对象，Babel将React.createElement方法替换成babelHelpers.jsx来转换元素为对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">Baz</span> <span class="nx">foo</span><span class="o">=</span><span class="s2">&quot;bar&quot;</span> <span class="nx">key</span><span class="o">=</span><span class="s2">&quot;1&quot;</span><span class="o">&gt;&lt;</span><span class="err">/Baz&gt;;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">babelHelpers</span><span class="p">.</span><span class="nx">jsx</span><span class="p">(</span><span class="nx">Baz</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foo</span><span class="o">:</span> <span class="s2">&quot;bar&quot;</span>
</span><span class='line'><span class="p">},</span> <span class="s2">&quot;1&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">output</span><span class="o">:</span>
</span><span class='line'><span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="nx">Baz</span><span class="p">,</span><span class="nx">props</span><span class="o">:</span><span class="p">{</span><span class="nx">foo</span><span class="o">:</span><span class="s2">&quot;bar&quot;</span><span class="p">},</span><span class="nx">key</span><span class="o">:</span><span class="s2">&quot;1&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.其他开源Babel插件</strong></p>

<p>除了以上两个官方插件，在开源世界还有许多其他Babel插件可以优化代码，而且非常实用，这里留给大家自己去探索： <a href="https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types" title="transform-react-remove-prop-types">transform-react-remove-prop-types</a>， <a href="https://github.com/thejameskyle/babel-react-optimize/tree/master/packages/babel-plugin-transform-react-pure-class-to-function" title="transform-react-pure-class-to-function">transform-react-pure-class-to-function</a>， <a href="https://github.com/thejameskyle/babel-react-optimize" title="babel-react-optimize">babel-react-optimize</a>（综合所有优化的插件，此处应该有掌声）</p>

<h2>代码本身的优化</h2>

<p>除了利用工具和构建，以及模块按需加载，来提高产品环境下的代码性能，最最基础的还是开发在平时写代码的需要注意的一些基础原则</p>

<p><strong>1.只导入需要的包</strong></p>

<p>以Lodash为例，比如：如果你只用到isEqual，那么就不要把整个lodash都引入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">isEqual</span> <span class="nx">from</span> <span class="s1">&#39;lodash/isEqual&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过<a href="https://github.com/lodash/babel-plugin-lodash" title="babel-plugin-lodash">babel-plugin-lodash</a>和<a href="https://github.com/lodash/lodash-webpack-plugin" title="lodash-webpack-plugin">lodash-webpack-plugin</a>来缩小应用所需要的lodash的模块</p>

<p><a href="https://medium.com/making-internets/why-using-chain-is-a-mistake-9bc1f80d51ba" title="用高阶函数Flow来代替Chain">用高阶函数Flow来代替Chain</a>，以避免将整个ladash都加载。</p>

<p><strong>2.使用ESLint</strong></p>

<p>合理的使用ESLint，除了帮助团队指导代码风格，也可以告诉你如何正确的写React应，比如，当组件是纯presentational组件时，就应该使用PureComponent或者纯函数组件，这些eslint都会告诉你。</p>

<p><strong>3.利用React官方的<a href="https://facebook.github.io/react/docs/perf.html" title="Perf工具">Perf工具</a></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Perf</span><span class="p">.</span><span class="nx">start</span><span class="p">()</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="nx">Perf</span><span class="p">.</span><span class="nx">stop</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>服务器端优化</h2>

<p>使用Gzip压缩倒不是React应用才有的性能优化策略，但还是要提一下，因为确实有用。</p>

<p><strong>1.Nginx服务器端配置</strong></p>

<p>我猜测大部分的情况下，都会用Nginx来部署静态资源，斗胆提供一个nginx的gzip配置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gzip</span> <span class="nx">on</span><span class="p">;</span> <span class="c1">//仅仅配置这一行是不会起作用的</span>
</span><span class='line'><span class="nx">gzip_types</span>  <span class="nx">text</span><span class="o">/</span><span class="nx">plain</span> <span class="nx">application</span><span class="o">/</span><span class="nx">javascript</span> <span class="nx">application</span><span class="o">/</span><span class="nx">x</span><span class="o">-</span><span class="nx">javascript</span> <span class="nx">text</span><span class="o">/</span><span class="nx">javascript</span> <span class="nx">text</span><span class="o">/</span><span class="nx">xml</span> <span class="nx">text</span><span class="o">/</span><span class="nx">css</span><span class="p">;</span>
</span><span class='line'><span class="nx">gzip_proxied</span>    <span class="nx">no</span><span class="o">-</span><span class="nx">cache</span> <span class="nx">no</span><span class="o">-</span><span class="nx">store</span> <span class="kr">private</span> <span class="nx">expired</span> <span class="nx">auth</span><span class="p">;</span>
</span><span class='line'><span class="nx">gzip_min_length</span> <span class="mi">1000</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.手动压缩</strong></p>

<p>另外一种方式，就是我们自己手动压缩Gzip，这样可以减少Nginx编码带来的性能消耗，Webpack插件
<a href="https://github.com/webpack-contrib/compression-webpack-plugin" title="compression-webpack-plugin">compression-webpack-plugin</a>可以做到。</p>

<h2>还有什么别的提高性能的办法呢？</h2>

<p><strong>1.服务器端渲染如何</strong></p>

<p>有人会说，<strong>服务器端渲染如何？</strong> 这个要看情况。服务器端渲染一般主要用来处理首屏渲染性能（注意是首次加载）和搜索引擎爬虫问题。如果你的JS文件特别大，那么服务器端渲染能够，让用户在加载完HTML和CSS之后立刻看到页面。如果不是首次加载，那么其实JS是可以缓存在客户端的，所以即便不用服务器端渲染，之后也不会很慢。</p>

<p>相对的缺点是：配置起来比较麻烦，但如果是一劳永逸的事情，还是值得一做的。</p>

<p>更多关于<a href="http://andrewhfarmer.com/server-side-render/" title="是否应该进行服务器端渲染">是否应该进行服务器端渲染</a>，<a href="https://medium.com/walmartlabs/the-benefits-of-server-side-rendering-over-client-side-rendering-5d07ff2cefe8" title="服务器端渲染的好处">服务器端渲染的好处</a> 以及<a href="http://redux.js.org/docs/recipes/ServerRendering.html" title="如何进行服务器端渲染">如何进行服务器端渲染</a>？请查看相关文章。</p>

<p><strong>2.ServiceWork</strong></p>

<p>渐进式 Web 应用程序思想（PWA）最近可火了，2017年<a href="https://www.thoughtworks.com/radar" title="ThoughtWorks技术雷达">ThoughtWorks技术雷达</a>将<a href="https://www.thoughtworks.com/radar/techniques/progressive-web-applications" title="“Progressive Web Applications”">“Progressive Web Applications”</a>放在了试验阶段。</p>

<p>简单介绍什么是service worker:</p>

<blockquote><p>在2014年，W3C公布了service worker的草案，service worker提供了很多新的能力，使得web app拥有与native app相同的离线体验、消息推送体验。
service worker是一段脚本，与web worker一样，也是在后台运行。
作为一个独立的线程，运行环境与普通脚本不同，所以不能直接参与web交互行为。native app可以做到离线使用、消息推送、后台自动更新，service worker的出现是正是为了使得web app也可以具有类似的能力。</p></blockquote>

<p>Github： <a href="https://github.com/GoogleChrome/sw-toolbox" title="Google sw-toolbox">Google sw-toolbox</a>, <a href="https://github.com/goldhand/sw-precache-webpack-plugin" title="sw-precache-webpack-plugin">sw-precache-webpack-plugin</a>和<a href="https://github.com/NekR/offline-plugin" title="offline-plugin">offline-plugin</a></p>

<p><strong>3.Preload</strong></p>

<p>Preload 作为一个新的web标准，旨在提高性能和为web开发人员提供更细粒度的加载控制。Preload使开发者能够自定义资源的加载逻辑，且无需忍受基于脚本的资源加载器带来的性能损失。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">“preload”</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>作为新的标准，浏览器兼容性是你有必要考虑的一个方面：</p>

<p><img src="http://benweizhu.github.io/images/react-production/preload.png!web" alt="preload" /></p>

<p>github: <a href="https://github.com/GoogleChrome/preload-webpack-plugin" title="preload-webpack-plugin">preload-webpack-plugin</a></p>

<h2>最后</h2>

<p>文章内容有点长，但我相信这些都是干货是值得一读的，前端产品环境性能优化确实是一个说不完的话题，前端技术更新迭代也没有多少其他计算机技术能够匹敌的，这也对前端开发工程师（全栈开发工程师）的技术敏感度和追求新技术的态度有很高的要求。</p>

<p>作者：Benwei，ThoughtWorks高级咨询师，全栈开发工程师，《实战Gradle》译者</p>

<p>转载原文地址： <a href="http://benweizhu.github.io/blog/2017/05/12/react-redux-production-optimisation/">http://benweizhu.github.io/blog/2017/05/12/react-redux-production-optimisation/</a></p>

<p>参考文献：  <br/>
1.<a href="https://hackernoon.com/optimising-your-application-bundle-size-with-webpack-e85b00bab579">https://hackernoon.com/optimising-your-application-bundle-size-with-webpack-e85b00bab579</a>  <br/>
2.<a href="https://brotzky.co/blog/code-splitting-react-router-webpack-2/">https://brotzky.co/blog/code-splitting-react-router-webpack-2/</a>  <br/>
3.<a href="http://www.jianshu.com/p/f4054b2dcc6e">http://www.jianshu.com/p/f4054b2dcc6e</a>  <br/>
4.<a href="http://2ality.com/2015/12/webpack-tree-shaking.html">http://2ality.com/2015/12/webpack-tree-shaking.html</a>  <br/>
5.<a href="https://hackernoon.com/how-i-built-a-super-fast-uber-clone-for-mobile-web-863680d2100f">https://hackernoon.com/how-i-built-a-super-fast-uber-clone-for-mobile-web-863680d2100f</a>  <br/>
6.<a href="http://andrewhfarmer.com/server-side-render/">http://andrewhfarmer.com/server-side-render/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术雷达之Web VR浅尝]]></title>
    <link href="http://benweizhu.github.io/blog/2017/04/26/web-vr/"/>
    <updated>2017-04-26T21:25:15+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/04/26/web-vr</id>
    <content type="html"><![CDATA[<h3>VR的风口</h3>

<p>VR（Virtual Reality）即虚拟现实，这个作为由美国VPL公司创始人拉尼尔在20世纪80年代初提出的一个概念，在16，17年成为了除AI（在此感谢“阿法狗”）之外，最为接近风口的技术行业。</p>

<p>雷总说过“站在台风口，猪都能飞上天”，何况这只猪还有点本事。</p>

<p>回想一下，在这个风口上，哪些人已经参与进去了？VR设备厂家（VR眼镜），视频拍摄设备厂家（360度全景视频拍摄相机），视频制作工作室，游戏工作室，还有CCTV5体育台（忍不住笑出声），最后还有我们普罗大众（整个生态链上的消费者）。</p>

<h3>Web VR</h3>

<p>有时候，我还真的很羡慕那些做游戏开发的程序员，一边拿着高工资，一边实现着小时候的梦想，偶尔通宵紧急修bug也情有可原，看看他们现在又多了个玩具。</p>

<p>光羡慕可不行，我要充分发挥自己的能动性为最具程序员群众基础的Web程序员谋福利。</p>

<p>我们除了作为一个普通的消费者参与到VR的风口中，当真没有别的办法了？<a href="https://www.thoughtworks.com/radar" title="ThoughtWorks技术雷达">ThoughtWorks技术雷达</a>第16卷（2017年）告诉你，答案就是Web VR。</p>

<p><strong>什么是Web VR</strong></p>

<p><video width='640' height='320' preload='none' controls poster='https://s3-ap-northeast-1.amazonaws.com/for-benwei-blog/what-is-web-vr.png'><source src='https://s3-ap-northeast-1.amazonaws.com/for-benwei-blog/What+is+WebVR.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<p>下面快速的引用一下本期技术雷达对Web VR的描述：</p>

<blockquote><p>Web VR是一组可让你通过浏览器访问VR设备的实验性JavaScript API。它已经获得了技术社区的支持，并有正式版本和每日构建的版本可用。如果你想在浏览器中构造VR 体验，那么WebVR将会是一个不错的开始。此项技术以及相关补充工具，例如 Three.js，A-Frame，ReactVR，Argon.js和Awe.js都能够为浏览器带来AR体验。除了互联网委员会标准以外，该领域中的各种工具也将有助于促进AR和VR更广泛的应用。</p></blockquote>

<p>WebVR更主要的是一种开放标准，目的是能够从浏览器给用户带来VR体验。 &ndash;webvr.info</p>

<p>今天最主要的目的就是和大家一起快速的浏览一下三个github上比较火的开源Web VR技术。</p>

<h4>Three.js</h4>

<p>github: <a href="https://github.com/mrdoob/three.js/">https://github.com/mrdoob/three.js/</a></p>

<p>光看这个名字，就能深深的感受它，和3d，和VR，和Web有着非比寻常的相关系。Three.js其实不是一个很新的东西，2010年的4月就已经发布了它的第一个开源版本R1（至今有7年了）。它是一个JavaScript 3D库，提供Canvas，SVG，CSS3D的渲染方式，但更多的是封装了底层的WebGL图形接口，以提供简化、高效的三维图形程序开发。</p>

<p><a href="https://threejs.org/examples/webvr_rollercoaster.html" title="一个Three.js VR例子">一个Three.js VR例子</a>（可惜需要兼容性的浏览器，Android的Chrome，HTC Vive，Gear VR等）</p>

<h4>A-Frame</h4>

<p>github: <a href="https://github.com/aframevr/aframe/">https://github.com/aframevr/aframe/</a></p>

<p>A-Frame相对Three.js要更新一些，第一个开源版本发布于2015年12月。它是由Mozilla旗下的VR研究团队MozVR推出的开源框架，A-Frame旨在帮助开发者更轻松的开发在浏览器中运行的高性能响应式的VR体验。</p>

<p>和Three.js不同，A-Frame是纯粹的VR Web框架，而且它与现代Web开发的趋势结合更加紧密，使用Web开发者熟悉的HTML标签来创建WebVR场景，提供自定义的语义化标签，降低学习成本。你只需要仅仅几行代码就可以创建一个VR场景，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://aframe.io/releases/0.5.0/aframe.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a-scene&gt;</span>
</span><span class='line'>      <span class="nt">&lt;a-box</span> <span class="na">color=</span><span class="s">&quot;#6173F4&quot;</span> <span class="na">opacity=</span><span class="s">&quot;0.8&quot;</span> <span class="na">depth=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;&lt;/a-box&gt;</span>
</span><span class='line'>      <span class="nt">&lt;a-sphere</span> <span class="na">radius=</span><span class="s">&quot;2&quot;</span> <span class="na">src=</span><span class="s">&quot;texture.png&quot;</span> <span class="na">position=</span><span class="s">&quot;1 1 0&quot;</span><span class="nt">&gt;&lt;/a-sphere&gt;</span>
</span><span class='line'>      <span class="nt">&lt;a-sky</span> <span class="na">color=</span><span class="s">&quot;#ECECEC&quot;</span><span class="nt">&gt;&lt;/a-sky&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/a-scene&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为A-Frame基于DOM，他可以和现有其他现代Web框架结合。比如：<a href="https://github.com/aframevr/aframe-react" title="A-Frame-React">A-Frame-React</a>。
<img src="http://benweizhu.github.io/images/vrweb/a-frame-works-with-everything.jpg" alt="" /></p>

<p><a href="https://aframe.io/a-blast/" title="A-Blast">A-Blast</a> - Mozilla基于A-Frame研发的VR游戏（请在Wifi环境下打开）。</p>

<p><strong>超强的场景Inspector工具 - A-Frame Inspector</strong>   <br/>
A-Frame提供一个场景查看工具A-Frame Inspector，可以让你改变场景，操作组件。
<img src="http://benweizhu.github.io/images/vrweb/a-frame-inspector.gif" alt="Inspector工具" /></p>

<h4>ReactVR</h4>

<p>Mozilla都建立了自己的专门的VR团队来专注于A-Frame的研发，你想其他的巨头们就不会蠢蠢欲动，Facebook就是其中一个。</p>

<p>github: <a href="https://github.com/facebook/react-vr">https://github.com/facebook/react-vr</a></p>

<p>一个好消息是React于2017年04月19日正式推出ReactVR（即正式开源），即去年第一次在Twitter上公布React VR项目已过去10个月了。</p>

<p>React的优势在于它已经在广大人民群众中打下坚实的基础，并且拥有了一群忠实的粉丝。从技术角度上谈，React VR使用了一个简化版的OVRUI库，其内部使用的是我们上面已经介绍的Three.js（即通过WebGL来渲染场景）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">AppRegistry</span><span class="p">,</span> <span class="nx">Pano</span><span class="p">,</span> <span class="nx">Text</span><span class="p">,</span> <span class="nx">View</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-vr&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">WelcomeToVR</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Displays &quot;hello&quot; text on top of a loaded 360 panorama image.</span>
</span><span class='line'>    <span class="c1">// Text is 0.8 meters in size and is centered three meters in front of you.</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">View</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Pano</span> <span class="nx">source</span><span class="o">=</span><span class="p">{</span><span class="nx">asset</span><span class="p">(</span><span class="s1">&#39;chess-world.jpg&#39;</span><span class="p">)}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Text</span>
</span><span class='line'>          <span class="nx">style</span><span class="o">=</span><span class="p">{{</span>
</span><span class='line'>            <span class="nx">fontSize</span><span class="o">:</span> <span class="mf">0.8</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">layoutOrigin</span><span class="o">:</span> <span class="p">[</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">],</span>
</span><span class='line'>            <span class="nx">transform</span><span class="o">:</span> <span class="p">[{</span><span class="nx">translate</span><span class="o">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">]}],</span>
</span><span class='line'>          <span class="p">}}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">hello</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">AppRegistry</span><span class="p">.</span><span class="nx">registerComponent</span><span class="p">(</span><span class="s1">&#39;WelcomeToVR&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">WelcomeToVR</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://benweizhu.github.io/images/vrweb/hellovr.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Debug]]></title>
    <link href="http://benweizhu.github.io/blog/2017/04/26/web-debug/"/>
    <updated>2017-04-26T21:18:54+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/04/26/web-debug</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端不止系列 - 时间都去哪了？]]></title>
    <link href="http://benweizhu.github.io/blog/2017/04/15/website-effecient/"/>
    <updated>2017-04-15T18:58:04+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/04/15/website-effecient</id>
    <content type="html"><![CDATA[<p>只有10%~20%的最终用户响应时间花在了下载HTML文档上，其余的80%~90%时间花在了下载页面中的所有组件上。   - 性能黄金法则，Steve Souders</p>

<p><img src="http://benweizhu.github.io/images/performance/golden-top10.png" width="400" title="前十名网站" alt="Alt text" /></p>

<p>性能黄金法则由《高性能网站建站指南》的作者Steve Souders在2007年提出。在2012年，他重新发表了一篇博客<a href="https://www.stevesouders.com/blog/2012/02/10/the-performance-golden-rule/" title="《The Performance Golden Rule》">《The Performance Golden Rule》</a>，分析并统计排名前10，10个在10000排名左右网站的加载时间，并计算了在<a href="http://httparchive.org/index.php" title="HTTP Archive">HTTP Archive</a>上被抓取到的50000个网站的前后端耗时占比，而最终验证了自2007年提出的这个理念的准确性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端不止系列 - 请告诉我，你要什么样的图标]]></title>
    <link href="http://benweizhu.github.io/blog/2017/04/03/svg-and-icon-font/"/>
    <updated>2017-04-03T09:47:12+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/04/03/svg-and-icon-font</id>
    <content type="html"><![CDATA[<h4>一个图标的生命周期（工作流程）</h4>

<p><img src="http://benweizhu.github.io/images/svg/icomoon-svg.png" width="265" title="图标的生命周期" alt="Alt text" />   <br/>
图标库(选择阶段) -> 图标使用（开发阶段）</p>

<p><img src="http://benweizhu.github.io/images/svg/ai-ps-svg.png" width="400" title="图标的生命周期" alt="Alt text" />   <br/>
图标设计（设计阶段） -> 图标导出（沟通阶段） -> 图标使用（开发阶段）</p>

<p>第一种方式是一般是小公司或者独立开发者的工作流程。而对于大型组织或公司，因为拥有更完善的团队和资源，一般是第二种方式，能够获得更多自主权和建立企业VI（Visual Identity，企业视觉识别）的能力。</p>

<p>但无论是哪种方式，都包括两个角色：设计师和Web开发，只是第一种工作方式中，设计师是不可见的。</p>

<h4>图标的设计和使用</h4>

<p>设计阶段通常是由不了解Web开发的设计师们来完成的，他们会根据产品的需要，绘画出满足需求的图标。</p>

<p><img src="http://benweizhu.github.io/images/svg/ThoughtWorksContactUSIcon.jpg" width="400" title="ThoughtWorksContactUSIcon" alt="Alt text" />  <br/>
ThoughtWorks官网Contact with us图标</p>

<p>然后交给Web开发人员使用，为什么要先介绍图标的使用，而一笔跳过导出过程呢？原因很简单，因为我们需要先知道服务的对象是谁，才知道如何正确的为它服务。</p>

<h5>常见的三种使用图标的方式</h5>

<p>1.使用图片</p>

<p>直接将设计师画好的图标，以PNG格式的图片一个个分离导出，这是最直观的图标打包方式。</p>

<p><img src="http://benweizhu.github.io/images/svg/taobao.png" width="300" title="iconfont cn taobao icon" alt="Alt text" /> <br/>
1688DPL中台图标库</p>

<p>它的优点是：（1）能够使用彩色的图标（2）能够支持大部分浏览器；缺点是：（1）图标大小是固定的（不能根据场景自由缩放）（2）Retina屏幕需要两倍图。</p>

<p>开发人员拿到这样的图标，通常会需要先合成为一张图片，以方便制作<a href="https://css-tricks.com/css-sprites/" title="雪碧图">雪碧图</a>，这个过程可以由开发人员自己完成，也可以由设计师（设计师可以根据源文件中心导出一张包含所有图标的PNG文件）。</p>

<p>制作雪碧图的工具有很多，我比较常用的在线雪碧图工具是：<a href="http://www.spritecow.com/" title="Sprite Cow">Sprite Cow</a>，或者NodeJS平台下的构建工具插件，如：<a href="https://github.com/mixtur/webpack-spritesmith" title="webpack-spritesmith">webpack-spritesmith</a>。</p>

<p>2.直接使用svg</p>

<p>使用SVG（可缩放矢量图形），W3C标准，<strong>最看好的Web端图形解决方案</strong>。它能提供如裁剪路径、Alpha通道、滤镜效果等复杂渲染能力，具备传统图片没有的矢量功能，还可以被记事本等阅读器、搜索引擎访问。</p>

<p>设计师可以轻松的在设计绘图软件（AI，PS）的帮助下导出SVG格式的图标/图片。</p>

<p>但目前，国内svg还并没有被非常广泛的使用，原因是它的兼容性，不能够很好的兼容旧的IE版本和一些Android原生浏览器。</p>

<p><img src="http://benweizhu.github.io/images/svg/svg-support.png" width="400" title="svg support" alt="Alt text" />  <br/>
Can I use svg?</p>

<p><img src="http://benweizhu.github.io/images/svg/baidu.jpg" width="400" title="baidu tong ji" alt="Alt text" />    <br/>
百度2017年前三个月的浏览器使用统计，目前国内还有超过20%的用户仍在使用IE8，9甚至是IE7。</p>

<p>3.IconFont</p>

<p>IconFont是目前最为流行的图标解决方案，顾名思义，它就是字体文件，你可以用任何一个字体编辑工具打开它，如果你打开某一个查看，你会发现它就是一些路径，这些路径可以用AI，PS，Sketch等软件来绘制。</p>

<p><img src="http://benweizhu.github.io/images/svg/font-awesome.png" width="300" title="font awesome" alt="Alt text" /></p>

<p>IconFont的优点在于能够用CSS控制样式，无限缩放而不失真，支持IE7+，兼顾屏幕阅读器，不过缺点是不能支持彩色（拥有多种颜色的图标）图标。获得IconFont的方式也很简单，设计师将图标通过AI/PS转成SVG文件，然后由开发人员通过工具（在线或者本地）转换为IconFont，比如：国外的<a href="https://icomoon.io/" title="icomoon.io">icomoon.io</a>，国内的<a href="http://iconfont.cn/" title="iconfont.cn">iconfont.cn</a>，开源构建工具插件有<a href="https://github.com/nfroidure/gulp-iconfont" title="gulp-iconfont">gulp-iconfont</a>等等。</p>

<h4>产生适合Web开发的图标</h4>

<p>“产生适合Web开发的图标”是我们今天要关注的重点。</p>

<p>1.使用图片的方式</p>

<p>如果开发人员直接使用图片，则相对简单，设计师只需要针对普通屏幕和Retina屏幕准备两套图（单倍图和两倍图）。</p>

<p>以国内某著名的中文小说阅读网站为例，会针对不同的设备使用不同倍数的logo图片，以保证在如Retina屏幕下的清晰度。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.logo-wrap</span> <span class="nc">.logo</span> <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">219px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">52px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="sx">url(/qd/images/logo.0.2.png)</span> <span class="k">no-repeat</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="o">(</span><span class="nt">min--moz-device-pixel-ratio</span><span class="nd">:1</span><span class="nc">.3</span><span class="o">),(</span><span class="nt">-o-min-device-pixel-ratio</span><span class="o">:</span> <span class="nt">2</span><span class="nc">.6</span> <span class="o">/</span> <span class="nt">2</span><span class="o">),(</span><span class="nt">-webkit-min-device-pixel-ratio</span><span class="nd">:1</span><span class="nc">.3</span><span class="o">),(</span><span class="nt">min-device-pixel-ratio</span><span class="nd">:1</span><span class="nc">.3</span><span class="o">),(</span><span class="nt">min-resolution</span><span class="nd">:1</span><span class="nc">.3dppx</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nc">.logo-wrap</span> <span class="nc">.logo</span> <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">background</span><span class="o">:</span> <span class="sx">url(/qd/images/logo3x.0.2.png)</span> <span class="k">no-repeat</span><span class="p">;</span>
</span><span class='line'>      <span class="k">background-repeat</span><span class="o">:</span> <span class="k">no-repeat</span><span class="p">;</span>
</span><span class='line'>      <span class="k">background</span><span class="o">-</span><span class="k">size</span><span class="o">:</span> <span class="m">217px</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.使用SVG</p>

<p>关于转换成SVG，这里就要引荐一下Sara Soueidan在Generate London 2015 Conference上的演讲<a href="https://www.youtube.com/watch?v=q4QI9iOeyPo" title="《Sara Soueidan: SVG for Web Designers (and Developers)》">《Sara Soueidan: SVG for Web Designers (and Developers)》</a>（YouTube视频需要翻墙），如果不方便，Sara Soueidan有一篇博客<a href="https://sarasoueidan.com/blog/svg-tips-for-designers/" title="《Tips for Creating and Exporting Better SVGs for the Web》">《Tips for Creating and Exporting Better SVGs for the Web》</a>更详细的讲解关于SVG导出的内容，当然，还有一篇国内的翻译文章<a href="http://www.w3cplus.com/svg/svg-tips-for-designers.html" title="《创建和导出SVG的技巧》">《创建和导出SVG的技巧》</a>，最后在推荐一篇Adobe工程师michael chaize写的关于AI导出SVG的文章<a href="http://creativedroplets.com/export-svg-for-the-web-with-illustrator-cc/" title="《Export SVG for the web with Illustrator CC》">《Export SVG for the web with Illustrator CC》</a>。</p>

<p>不过，我觉得看视频更直观，顺便领略一下这位优秀的 <strong>阿拉伯女性前端开发工程师（兼自由作家和演讲人）</strong> 的风采。</p>

<p>博客和视频中谈到了多个点导出SVG需要注意的地方，篇幅限制，这里简单描述三个tip：</p>

<p><strong>（1）选择适合绘画的画板</strong>。</p>

<p>你有在网页上嵌入过SVG吗，给它指定一个高度和宽度，然后发现它其实比你指定的尺寸要小？开发人员常常会遇到这样的问题。</p>

<p>大多数情况下，这是因为SVG视窗中有一定大小的白色空白的空间。视窗是按照你在样式表中指定的尺寸显示的，但是它里面有额外的空白——在图形周围——使得你的图片看起来好像“缩水”了，因为这块空白是占空间的，在视窗里面。为了避免这种情况，你需要确保你的画板是刚刚好放下里面的图像的，不要大太多。</p>

<p>画板的尺寸就是导出的SVG的视窗的尺寸，所有画板上的空白都会最终变成视窗中的白色空白。</p>

<p><img src="http://benweizhu.github.io/images/svg/fit-artboard.png" width="400" title="fit artboard" alt="Alt text" /></p>

<p><em>对于没有AI工具的开发，可以在下面的SVGO优化选项中选择“Prefer viewBox to width/height”。</em></p>

<p><strong>（2）选择合适的导出选项</strong></p>

<p><img src="http://benweizhu.github.io/images/svg/export-options.png" width="400" title="保存" alt="Alt text" />   <br/>
上面的图片中展示的选项是推荐的生成适合Web使用的SVG的。如果你不想使用Web字体，可以选择把文本转换成轮廓。</p>

<p><img src="http://benweizhu.github.io/images/svg/output-fewer.png" width="400" title="output-fewer" alt="Alt text" /><br/>
如果SVG中包含大量的文字，这个选项output fewer tspan elements可以很大程度降低svg的大小。</p>

<p><strong>（3）优化SVG</strong></p>

<p>通常是建议在把SVG从图形编辑器中导出后，再用单独的优化工具来进行优化。比如：删除无用Comments和Metadata，简化代码，简化单个路径等。推荐的第三方工具：NodeJS工具<a href="https://jakearchibald.github.io/svgomg/" title="svgomg">svgomg</a>，AI插件<a href="https://github.com/davidderaedt/SVG-NOW" title="SVG-NOW">SVG-NOW</a>，Sketch插件<a href="https://github.com/BohemianCoding/svgo-compressor" title="Svgo-compressor">Svgo-compressor</a>等，请参考Sara Soueidan的文章<a href="https://sarasoueidan.com/blog/svgo-tools/" title="《Useful SVGO[ptimization] Tools》">《Useful SVGO[ptimization] Tools》</a>。</p>

<p><img src="http://benweizhu.github.io/images/svg/svgomg.png" width="400" title="优化svg" alt="Alt text" /></p>

<p>3.IconFont</p>

<p>前面提到IconFont一般是由SVG通过工具转换而来，而如果开发最终需要使用IconFont展示图标，则对于导出的SVG有一些特殊要求。我在本文的前面一小节，已经介绍了几款IconFont的转换工具，每一款工具其实都有详细的文档说明SVG绘制的规则，尽管不尽相同，但有一些基本原则是一致的：</p>

<p>（1）将文字转换为路径  <br/>
（2）不可以使用图片（字体只是路径） <br/>
（3）修剪画板（trimming to art boundaries）（前面已经介绍过） <br/>
（4）将描边转化为闭合图形 <br/>
（5）简化无用的节点  <br/>
等等</p>

<p>更多关于IconFont的绘画规则，请参考：<a href="http://iconfont.cn/plus/help/detail?helptype=draw" title="Iconfont.cn文档">Iconfont.cn文档</a>，<a href="https://icomoon.io/#docs/importing" title="Icomoon文档">Icomoon文档</a>，<a href="https://github.com/nfroidure/gulp-iconfont#preparing-svgs" title="gulp-iconfont文档">gulp-iconfont文档</a>，<a href="https://github.com/fontello/fontello/wiki/How-to-use-custom-images" title="fontello文档">fontello文档</a>。</p>

<h4>尽早的沟通</h4>

<p>无论是开发还是设计师，最重要的还是沟通，借用Sara Soueidan的一句“设计师和开发者应该成为好朋友”。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端不止系列 - Retina屏幕下两倍图]]></title>
    <link href="http://benweizhu.github.io/blog/2017/03/25/css-retina-image/"/>
    <updated>2017-03-25T16:40:09+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/03/25/css-retina-image</id>
    <content type="html"><![CDATA[<h3>所见不一定即所得</h3>

<blockquote><p>眼睛是心灵的窗户，也是蒙蔽你的一种途径。</p></blockquote>

<p>假设，我给你一张图片，你觉得肉眼可以观察到全部的细节吗？</p>

<h3>屏幕上一张清晰的图片</h3>

<p>肉眼在屏幕上看到图片的清晰度由三个因素决定，一是图片像素本身是否精细，二是屏幕分辨率，三是屏幕大小。</p>

<p>我们来逐步分析它们之间的关系：</p>

<h4>屏幕分辨率</h4>

<p>屏幕分辨率也就是设备分辨率，设备像素，它是物理的像素，比如，新的iPhone7，屏幕分辨率是1334 x 750像素分辨率，326 ppi。</p>

<p><img src="http://benweizhu.github.io/images/iphone7-screen.png" width="400" title="iPhone7分辨率" alt="Alt text" /></p>

<h4>图像大小</h4>

<p>如果你学过《数字图像处理》这门课，那你对下面的解释就是非常熟悉了。</p>

<p>位图是由像素（Pixel）组成的，像素是位图最小的信息单元，存储在图像栅格中。每个像素都具有特定的位置和颜色值。按从左到右、从上到下的顺序来记录图像中每一个像素的信息，如：像素在屏幕上的位置、像素的颜色等。位图图像质量是由单位长度内像素的多少来决定的。单位长度内像素越多，分辨率越高，图像的效果越好。</p>

<p><img src="http://benweizhu.github.io/images/tw-logo.png" width="200" title="ThoughtWorks Logo" alt="Alt text" /></p>

<p>假设，以上这个logo的图像大小是1334 x 750像素和iPhone7屏幕分辨率一样，那么,一位图像素对应的就是一个设备像素，这就是会是一个完全保真的显示。因为一个位置像素不能进一步分裂，我想这一点应该大家非常容易理解，也就是一个萝卜一个坑。</p>

<h4>屏幕分辨率和屏幕尺寸</h4>

<p><img src="http://benweizhu.github.io/images/resolution.png" width="400" title="Windows分辨率" alt="Alt text" /></p>

<p>相信大部分人对上面这个设置肯定特别熟悉，有些人可能对XP，甚至98系统的样式更熟悉（一不小心暴露了年龄），在Windows系统下，提高屏幕分辨率一般都需要提高屏幕尺寸。</p>

<p>因为在固定屏幕的情况下，提高屏幕分辨率（如上图），图像和文字显示目标会相应缩小，原因是系统并不会自动根据屏幕尺寸和分辨率关系相应的调整文字和图标的大小，这是Windows系统自身的行为。</p>

<p>我相信，如果家里有年长的人使用电脑，肯定屏幕分辨率调的很低，因为这样文字和图标才会比较大，我家06年买的台式机就是这样。</p>

<p>也因此，我们很容易有一个错觉，那就是屏幕越大，分辨率就能越大（在单位面积内像素数量固定的情况下，尺寸越大，单个屏幕拥有的像素就越多，分辨率自然就越大）。</p>

<p><strong>直到，苹果Retina屏幕的出现，原来小屏幕也可以拥有大分辨率。</strong></p>

<h4>PPI的概念</h4>

<p>PPI，像素密度，即每英寸所拥有的像素数目（比如：上面iPhone 7的PPI是326），PPI数值越高，代表显示屏能够以越高的密度显示图像，画面的细节就会越丰富。</p>

<p>以Retina屏幕为例，它并不是像普通显示器那样通过增大尺寸来增加分辨率，而是靠提升屏幕单位面积内的像素数量，即像素密度来提升分辨率，这样就有了高像素密度屏幕。</p>

<p>根据上面的分析，分辨率提升了，那么图标和文字尺寸就会变小，但是Mac的操作系统不同，它自动采取相应的模式（如Mac下的HiDPI）进行适配，将缩小后的字体（苹果一直采用矢量字体）和图标重新放大，这样苹果用了更多的像素数来显示同样的内容，所以显示尺寸仍然不变。</p>

<p>苹果将“高像素密度屏幕”的概念营销出一个专业的术语“Retina”，将其称为双密度显示，声称人类的肉眼将无法区分单个像素。</p>

<p>当一个显示屏像素密度超过300ppi时，人眼就无法区分出单独的像素。这也是讲：显示设备清晰度已达到人视网膜可分辨像素的极限。因此，行动电话显示器的像素密度达到或高于300ppi就不会再出现颗粒感，而手持平板类电器显示器的像素密度达到或高于260ppi就不会再出现颗粒感，苹果电脑Mac的Retina显示器像素密度只要超过200ppi就无法区分出单独的像素。</p>

<p><img src="http://benweizhu.github.io/images/retina-display.jpg" width="500" title="retina-display" alt="Alt text" /></p>

<p>好，说了这么多，都是谈屏幕的问题，貌似和前端开发没有什么关系，我又不是要买新手机（呵呵），那么现在，我们现在来谈谈前端的问题。</p>

<h4>Web中的像素（CSS像素）</h4>

<p>CSS像素是一个抽象概念，设备无关像素，简称-“DIPS”，device-independent像素，主要使用在浏览器上，用来精确的度量（确定）Web页面上的内容。</p>

<p>在标准情况下一个CSS像素对应一个设备像素。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.box</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">12px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码，将会在显示屏设备上绘制一个200x300像素的盒子，在标准屏幕下，它占据的就是200x300设备像素。但是在Retina屏幕下，相同的div却使用了400x600设备像素，保持相同的物理尺寸显示，导致每个像素点实际上有4倍的普通像素点。</p>

<p><img src="http://benweizhu.github.io/images/retina-web.jpg" width="500" title="retina-web" alt="Alt text" /></p>

<p>对于图片来说也是如此：</p>

<p><img src="http://benweizhu.github.io/images/retina-web-bitmap.jpg" width="500" title="retina-web bitmap" alt="Alt text" /></p>

<p>这个时候，屏幕会怎么处理呢？其实，有点类似图像软件的放大图片功能，采用自有的算法（图像处理算法）计算放大方式。只不过，这里是苹果Retina屏幕的计算方法，一个CSS像素点实际分成了四个，造成颜色肯定会存在偏差（非全保真的显示），于是，我们看上去就变得模糊了（特别是图片，非常的明显）。</p>

<p>开发当中遇到这样的事情，我们应该怎么处理呢？这时，我们需要引出devicePixelRatio的概念。</p>

<h5>devicePixelRatio设备像素比</h5>

<p>window.devicePixelRatio是设备上物理像素和设备独立像素(device-independent pixels (dips))的比例。</p>

<p>公式表示就是：window.devicePixelRatio = 物理像素 / dips</p>

<ul>
<li>普通密度桌面显示屏的devicePixelRatio=1</li>
<li>高密度桌面显示屏(Mac Retina)的devicePixelRatio=2</li>
<li>主流手机显示屏的devicePixelRatio=2或3</li>
</ul>


<p>举例说明，一张100x100的图片，通过CSS设置它{ width:100px; height:100px }。在普通密度桌面显示屏的电脑上打开，没有什么问题，但假设在手机/或者Retina屏幕的Mac，按照逻辑分辨率来渲染，他们的devicePixelRatio=2，那么就相当于拿4个物理像素来描绘1个电子像素。这等于拿一个2倍的放大镜去看图片，图片可能因此变得模糊。</p>

<p><img src="http://benweizhu.github.io/images/devicePixelRatio.png" title="devicePixelRatio" alt="Alt text" /></p>

<h3>代码如何解决呢？</h3>

<p>原理我们明白了，那么从代码层面，我们应该如何实现呢？</p>

<p>一个常见的做法是把图片换成200x200的，CSS宽高不变，仍然是{ width:100px; height:100px }，这样，CSS宽高换算成物理像素是200x200，图片也是200x200，就不会变糊了。可以采用媒体查询和JS操作的方式</p>

<h4>CSS Media Queries</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#element</span> <span class="p">{</span> <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(&#39;hires.png&#39;)</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-device-pixel-ratio</span><span class="o">:</span> <span class="nt">2</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nf">#element</span> <span class="p">{</span> <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(&#39;hires@2x.png&#39;)</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-device-pixel-ratio</span><span class="o">:</span> <span class="nt">3</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nf">#element</span> <span class="p">{</span> <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(&#39;hires@3x.png&#39;)</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>JS查询</h4>

<p><strong>retinajs库</strong></p>

<p><a href="http://imulus.github.io/retinajs/">http://imulus.github.io/retinajs/</a></p>

<p><img src="http://benweizhu.github.io/images/caniuserdevicePixelRatio.png" title="devicePixelRatio" alt="Alt text" /></p>

<h3>是不是适配Retina屏幕所有的图片都需要切换呢？</h3>

<p>不是，一般情况下，不需要针对网站上的所有图片都提供两个版本（非Retina屏幕和Retina屏幕），大部分图片缩放并不会太多的影响用户的体验。</p>

<p>常常需要被处理的图片有：网站的logo、彩色图片图标，因为他们的图像大小都偏小，在Retina上物理像素放两倍显示就会出现模糊情况，这个时候，你就需要通过媒体查询或者JS操作来替换图片。</p>

<p><em>最后：眼睛是心灵的窗户，也是蒙蔽你的一种途径，带上知识的眼镜，将世界看个清楚</em></p>

<p>参考资料：  <br/>
1. <a href="http://www.w3cplus.com/css/towards-retina-web.html">http://www.w3cplus.com/css/towards-retina-web.html</a> <br/>
2. <a href="http://www.jianshu.com/p/bb76c606f0b4">http://www.jianshu.com/p/bb76c606f0b4</a>  <br/>
3. <a href="https://developer.mozilla.org/zh-CN/docs/Mobile/Viewport_meta_tag">https://developer.mozilla.org/zh-CN/docs/Mobile/Viewport_meta_tag</a> <br/>
4. <a href="http://caniuse.com/#search=devicePixelRatio">http://caniuse.com/#search=devicePixelRatio</a>  <br/>
5. <a href="https://www.web-tinker.com/article/20590.html">https://www.web-tinker.com/article/20590.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步做React(二) - CSS Modules]]></title>
    <link href="http://benweizhu.github.io/blog/2017/02/01/react-step-by-step-2/"/>
    <updated>2017-02-01T22:44:09+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/02/01/react-step-by-step-2</id>
    <content type="html"><![CDATA[<p>基于上次的内容 <a href="http://benweizhu.github.io/blog/2017/01/17/react-step-by-step-1/">《一步一步做React(一) - Hello React》</a>，我们继续搭建一个React项目的工程实践 - CSS Modules。</p>

<h3>CSS Modules概念</h3>

<p>Github文档 - <a href="https://github.com/css-modules/css-modules">CSS Modules</a></p>

<p><strong>CSS Modules — Local Scope 局部作用域</strong></p>

<p>CSS Modules里面最基础也是最重要的概念 - 局部作用域。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.backdrop {}
</span><span class='line'>.prompt {}
</span><span class='line'>.pullquote {}</span></code></pre></td></tr></table></div></figure>


<p>定义在style.css中的样式都存在于一个组件内的局部作用域，不会污染全局的样式。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import styles from "./style.css"
</span><span class='line'>
</span><span class='line'>const Component = props =&gt; {
</span><span class='line'>  return (
</span><span class='line'>    &lt;div className={styles.backdrop}&gt;
</span><span class='line'>      &lt;div className={styles.prompt}&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>      &lt;div className={styles.pullquote}&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>   &lt;/div&gt;
</span><span class='line'>  )
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>怎么解释？如何不会污染全局的样式？答案是唯一的命名。现在，我们先来看是怎么配置的。</p>

<h3>用webpack处理样式</h3>

<p><strong>style-loader | css-loader | sass-loader</strong></p>

<p>给webpack.config.js中的module添加一个新的loaders配置，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module: {
</span><span class='line'>  loaders: [
</span><span class='line'>    {
</span><span class='line'>      test: /\.jsx?/,
</span><span class='line'>      include: APP_DIR,
</span><span class='line'>      loader: 'babel',
</span><span class='line'>    },
</span><span class='line'>    {
</span><span class='line'>      test: /\.scss$/,
</span><span class='line'>      loaders: ["style", "css?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]", "sass"],
</span><span class='line'>    },
</span><span class='line'>  ],
</span><span class='line'>},</span></code></pre></td></tr></table></div></figure>


<p>webpack的loader是用来预处理由require()或者import加载文件，比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import styles from "./style.scss"</span></code></pre></td></tr></table></div></figure>


<p>在上面的webpack配置中，针对*.scss文件，配置了一个loader的管道，顺序是：</p>

<p>sass-loader => css-loader => style-loader</p>

<p>sass-loader顾名思义用来编译SCSS到CSS</p>

<p>css-loader和style-loader用来将样式嵌入到Webpack打包后的JS文件中，从而实现样式的模块化管理。</p>

<p>针对css-loader的配置，你会看到它的格式是如下的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>css?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]</span></code></pre></td></tr></table></div></figure>


<p>其实，这是webpack loader传递参数的一种方式（URL方式），css-loader的参数表请进入<a href="https://github.com/webpack-contrib/css-loader#options-1">传送门</a>。</p>

<p>localIdentName是用于指定局部className的格式，比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[name]__[local]___[hash:base64:5]
</span><span class='line'>ComponentName__LocalName___HashCode
</span><span class='line'>Component__pullquote___SDFe34IIE</span></code></pre></td></tr></table></div></figure>


<h3>如何抽离出独立的css文件？Extract Text Plugin</h3>

<p>正如前面所强调的，style-loader和css-loader，将样式嵌入到Webpack打包后的JS文件。</p>

<p>这当然不是最好的方式，我们需要将样式抽离到独立的css文件中，但就是<a href="https://github.com/webpack-contrib/extract-text-webpack-plugin">Extract Text Plugin</a>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yarn add extract-text-webpack-plugin --dev</span></code></pre></td></tr></table></div></figure>


<p>完整的webpack.config.js文件如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const path = require('path');
</span><span class='line'>const ExtractTextPlugin = require('extract-text-webpack-plugin');
</span><span class='line'>
</span><span class='line'>const BUILD_DIR = path.resolve(__dirname, 'public');
</span><span class='line'>const APP_DIR = path.resolve(__dirname, 'src');
</span><span class='line'>
</span><span class='line'>const extractCSS = new ExtractTextPlugin(`${BUILD_DIR}/styles.css`);
</span><span class='line'>
</span><span class='line'>const config = {
</span><span class='line'>  entry: `${APP_DIR}/index.jsx`,
</span><span class='line'>  output: {
</span><span class='line'>    path: BUILD_DIR,
</span><span class='line'>    filename: 'bundle.js',
</span><span class='line'>  },
</span><span class='line'>  module: {
</span><span class='line'>    loaders: [
</span><span class='line'>      {
</span><span class='line'>        test: /\.jsx?/,
</span><span class='line'>        include: APP_DIR,
</span><span class='line'>        loader: 'babel',
</span><span class='line'>      },
</span><span class='line'>      {
</span><span class='line'>        test: /\.scss$/,
</span><span class='line'>        loader: extractCSS.extract(['css?minimize&modules&importLoaders=2&localIdentName=[name]__[local]', 'postcss', 'sass']),
</span><span class='line'>      },
</span><span class='line'>    ],
</span><span class='line'>  },
</span><span class='line'>  resolve: {
</span><span class='line'>    extensions: ['', '.js', '.jsx'],
</span><span class='line'>  },
</span><span class='line'>  plugins: [
</span><span class='line'>    extractCSS,
</span><span class='line'>  ],
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>module.exports = config;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步做React(一) - Hello React]]></title>
    <link href="http://benweizhu.github.io/blog/2017/01/17/react-step-by-step-1/"/>
    <updated>2017-01-17T21:08:15+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/01/17/react-step-by-step-1</id>
    <content type="html"><![CDATA[<p>什么都不说，先照着做</p>

<h4>安装合适的node版本和包管理工具Yarn</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node -version v6.9.4(用nvm)
</span><span class='line'>
</span><span class='line'>brew update（如果是mac的）
</span><span class='line'>
</span><span class='line'>brew install yarn</span></code></pre></td></tr></table></div></figure>


<p><a href="https://yarnpkg.com/en/docs/install">https://yarnpkg.com/en/docs/install</a></p>

<h4>安装webpack</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yarn add --dev webpack</span></code></pre></td></tr></table></div></figure>


<h4>安装babel</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yarn add --dev babel-core babel-loader babel-preset-es2015 babel-preset-react</span></code></pre></td></tr></table></div></figure>


<h4>安装React</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yarn add react react-dom</span></code></pre></td></tr></table></div></figure>


<h4>创建和编辑.babelrc</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch .babelrc   
</span><span class='line'>vim .babelrc  </span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "presets" : ["es2015", "react"]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>创建和编辑webpack.config.js</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch webpack.config.js
</span><span class='line'>vim webpack.config.js</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var webpack = require('webpack');
</span><span class='line'>var path = require('path');
</span><span class='line'>
</span><span class='line'>var BUILD_DIR = path.resolve(__dirname, 'public');
</span><span class='line'>var APP_DIR = path.resolve(__dirname, 'src');
</span><span class='line'>
</span><span class='line'>var config = {
</span><span class='line'>  entry: APP_DIR + '/index.jsx',
</span><span class='line'>  output: {
</span><span class='line'>      path: BUILD_DIR,
</span><span class='line'>      filename: 'bundle.js'
</span><span class='line'>  },
</span><span class='line'>  module: {
</span><span class='line'>      loaders: [
</span><span class='line'>          {
</span><span class='line'>              test: /\.jsx?/,
</span><span class='line'>              include: APP_DIR,
</span><span class='line'>              loader: 'babel'
</span><span class='line'>          }
</span><span class='line'>      ]
</span><span class='line'>  }
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>module.exports = config;</span></code></pre></td></tr></table></div></figure>


<h4>创建和编辑src/index.jsx</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir src
</span><span class='line'>cd src
</span><span class='line'>touch index.jsx
</span><span class='line'>vim index.jsx</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import React from 'react';
</span><span class='line'>import {render} from 'react-dom';
</span><span class='line'>
</span><span class='line'>class App extends React.Component {
</span><span class='line'>  render () {
</span><span class='line'>      return &lt;p&gt; Hello React!&lt;/p&gt;;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>render(&lt;App/&gt;, document.getElementById('app'));</span></code></pre></td></tr></table></div></figure>


<h4>在html中引用</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd src
</span><span class='line'>touch index.html
</span><span class='line'>vim index.html</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!doctype html&gt;
</span><span class='line'>
</span><span class='line'>&lt;html lang="zh"&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>    &lt;!-- The first thing in any HTML file should be the charset --&gt;
</span><span class='line'>    &lt;meta charset="utf-8"&gt;
</span><span class='line'>    &lt;!-- Make the page mobile compatible --&gt;
</span><span class='line'>    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;
</span><span class='line'>    &lt;meta name="mobile-web-app-capable" content="yes"&gt;
</span><span class='line'>    &lt;title&gt;17High&lt;/title&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>&lt;div id="app"/&gt;
</span><span class='line'>&lt;!-- Display a message if JS has been disabled on the browser. --&gt;
</span><span class='line'>&lt;noscript&gt;If you're seeing this message, that means &lt;strong&gt;JavaScript has been disabled on your browser&lt;/strong&gt;, please &lt;strong&gt;enable JS&lt;/strong&gt; to make this app work.&lt;/noscript&gt;
</span><span class='line'>
</span><span class='line'>&lt;script src="../public/bundle.js" type="text/javascript"&gt;&lt;/script&gt;
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<h4>运行webpack命令，生成打包文件bundle.js</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./node_modules/.bin/webpack -d
</span><span class='line'>./node_modules/.bin/webpack -d --watch //监听文件变化</span></code></pre></td></tr></table></div></figure>


<p>打开index.html看效果</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你听说过“风格指南驱动开发”吗？]]></title>
    <link href="http://benweizhu.github.io/blog/2016/11/19/style-guide-driven-development/"/>
    <updated>2016-11-19T21:16:37+08:00</updated>
    <id>http://benweizhu.github.io/blog/2016/11/19/style-guide-driven-development</id>
    <content type="html"><![CDATA[<h3>第一次听说“SGDD”</h3>

<p>我听说过TDD（测试驱动开发），我在软件开发中一致坚持执行</p>

<p>它以其倡导先写测试程序，然后编码实现其功能得名，在开发中，我们带着两顶帽子思考：先戴上实现功能的帽子，在测试的辅助下，快速实现其功能；再戴上重构的帽子，在测试的保护下，通过去除冗余的代码，提高代码质量。</p>

<p>我也听说过BDD（行为驱动开发），我熟练使用Cucumber编写端到端测试</p>

<p>它鼓励软件项目中的开发者、QA和非技术人员或商业参与者之间进行协作，通过用自然语言书写非程序员可读的测试用例，以扩展测试驱动的开发方法。</p>

<p>我头一次听说SGDD（风格指南驱动开发），我蒙蔽了</p>

<p>我打开百度（请不要鄙视我，它毕竟还是“最好的中文搜索引擎”），搜索关键字 - “风格指南驱动开发”，却只看到寥寥的一篇翻译“干货”。收货不多，但能证明了一点，即风格指南驱动开发（SGDD）的思想还没有像TDD和BDD那样在国内得到较为广泛的推广。</p>

<p>本文是一篇我目前所在项目实践的总结，也是对这种新的开发思想的思考。</p>

<h3>“风格指南驱动开发”是什么？</h3>

<p>“风格指南驱动开发”其实是一个相当新的术语，最早在公开场合中谈到这个概念的人应该是Nicole Sullivan，她在2014年9月一次演讲《Components &amp; SGDD》中提出SGDD的概念（Nicole Sullivan目前在NPM这家公司，没错，就是那个NPM，做Product Manager &amp; Design Manager）。</p>

<p>“风格指南驱动开发”尝试着：</p>

<p>1.让UX和前端开发更紧密的工作在一起，将设计与前端开发的工作闭环缩小，更快速的迭代产品原型 <br/>
2.将UI开发和业务系统分离开，业务系统不仅仅是指后端系统（不仅仅是前后端分离），也包括业务的Web系统 <br/>
3.让设计文档更加“灵活”，更加及时（up to date），更加一致（single source of truth） <br/>
4.让前端资源管理更加规范，开发模式更加清晰 <br/>
5.让整个Web开发周期更加敏捷（Agile）</p>

<p>它是一种前端开发和团队工作方式的实践。</p>

<p>而实践的方式，就是做到以下两点：组件化的设计和动态风格指南。</p>

<h3>组件化的设计 - 我的眼里一切都可以是组件</h3>

<p>大型的Web应用通常都会有大量的JS，CSS和其他资源文件（字体文件，图标，图片），随着页面越来越多，交互越来越复杂，如果没有很好的管理，就会导致资源的冗余，依赖关系复杂度增加，可维护性降低，开发难度增加，这其实是前端开发常见的通病。</p>

<p>如果和后端的开发相比较，比如：Java开发，天生就拥有包管理和类的支持，而根据业务/功能层次来划分，我们拥有了常见的（或者约定俗成）实现层次，如：Controller，Service，Repository，Util，Constant等，同时，我们还会利用框架和语言特性带来的优势，比如，IOC，AOP，注解，继承，接口等，而统统这些能够带来的好处就是职责的单一，模块的高内聚，接口化，可重用，易于测试等等。</p>

<p>对于Web前端开发，由于涉及到的内容较广，又不太可能完全具备后端语言的优秀特性，所以，更加需要开发人员具有优秀的设计和管理的思想，比如：CSS的合理命名，有效的利用CSS预处理器，JavaScript的模块化，利用框架的特性（比如AngularJS的依赖注入，指令等。）等，在这之中，有一个最近开始被大家关注，非常重要的设计和管理思想就是“组件化”。</p>

<p>组件是一个个独立存在的模块，它能够具备一些非常优秀的特性：<strong>单一的职责，资源的高内聚，独立的作用域，可独立的测试，接口的规范化，可重用，可组合等</strong>。这些优秀的特性其实就已经非常接近我们常常在后端语言中描述的特性。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/style-guide/folder-structure.png" width="300" title="代码组织结构" alt="Alt text">
</p>


<p style="text-align: center;">我们项目的代码组织结构</p>


<p>除开开发关注的特性，组件化对于整个软件开发流程也是有益的，合理的组件划分可以合理控制开发闭环，UX可以更快的看到设计实现的原型，提升团队成员沟通频率，BA（业务分析人员）可以方便的根据组件合理的编写Story（故事卡）和Task（比故事更小的任务卡）等等。</p>

<p>而这些让组件化成为“风格指南驱动开发”的必要元素。</p>

<h3>“风格指南驱动开发”中的“风格指南”</h3>

<p>除了组件化，“风格指南驱动开发”还需要另外一个实现驱动开发的基石，也就是它名字中的“风格指南”。</p>

<p>“风格指南”对大家应该不陌生，主要分为两种类型：静态风格指南和动态风格指南。</p>

<p>静态风格指南是我们比较常见的静态设计文档，比如，由设计师提供的PSD/PDF等文件，文档中包含：调色板，字体，按钮，链接等等。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/sgdd/static-style-guide.png" width="500" title="Static Style Guide" alt="Alt text">
</p>


<p style="text-align: center;">medialoot上的一个样例</p>


<p>动态风格指南，也称为Living Style Guide（“活的”风格指南），它是一个包含风格指南的Web站点。当你看到它时，也许你会觉的有点像BootStrap，然而，和BootStrap以及静态风格指南不同，企业开发中的Living Style Guide得到的是:</p>

<p>1.设计在代码实现层面上的最新版本，它包含了展示UI组件交互和行为的Demo以及相应的实现和使用代码等 <br/>
2.用户是UX，前端开发和BA（业务分析），在UX和BA的眼中看到的文档即最新实现结果，而在前端开发眼中看到的代码即设计 <br/>
3.文档中看到的实现即是产品实现中最终的一致结果 <br/>
4.除了基础组件，也具有更加偏重业务的大型组件 <br/>
5.产生供产品环境使用的最终资源（库）</p>

<p>综合以上不同之处，相信大家可以猜到对于“风格指南驱动开发”来说，它所需要的是后者。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/sgdd/living-style-guide.png" width="500" title="Living Style Guide" alt="Alt text">
</p>


<p style="text-align: center;">一个Living Style Guide的样例</p>


<h3>工作流程 - 如何“驱动开发”？</h3>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/sgdd/sgdd-process.png" width="500" title="Style Guide Driven Development Process" alt="Alt text">
</p>


<p style="text-align: center;">开发流程</p>


<p>也许，你会更加关心“风格指南驱动开发”的整个开发流程，但其实，当你拥有了组件化的思想和“动态的风格指南”，“风格指南驱动开发”的整个过程其实是行云流水的，我简单描述一下：</p>

<p>1.挖掘到新的需求/特性</p>

<p>当新的需求出现时，UX开始进行页面设计，Living Style Guide会作为设计的参考文档，通常情况，设计师会查看已有的调色板，字体，和其他基本元素或组件来组成新的页面布局。在组件化的思想和Living Style Guide的帮助下，BA和设计师都会尝试使用或者扩展现有的组件。</p>

<p>2.抽象成组件</p>

<p>一旦设计完成，BA，UX和开发会开始讨论如何把新的设计细分为独立的组件，哪些是已经存在可以重用的，哪些是新的需用新建或者扩展实现的。Living Style Guide作为桥梁帮助设计与开发进行沟通，促进双方的理解，确保实现的准确性。而抽象出来的组件，帮助BA划分任务和故事（Story），以便更加准确的估算“故事点”。</p>

<p>3.实现和文档化</p>

<p>此时，Living Style Guide是作为一个开发框架和设计试验场（playground）。</p>

<p>作为一个试验场（playground），允许你随时看到每一个开发出来的组件，作为开发框架，允许你快速开发，它和真正的产品实现完全隔离，这种隔离会鼓励你一以更加抽象的方式创建组件，以便于让他们更容易被重用。</p>

<p>Living Style Guide的开发注重组件化的隔离和规范化的开发流程（套路清晰明了），我们常常会开发一些自动化的构建任务来帮助快速初始化一个组件需要的基本内容，只要开发人员对开发所需的前端技术栈有掌握，就能较快速的开发完成相应的组件。</p>

<p>而开发完成的组件在Living Style Guide中立刻变成“活的文档”，可以快速展示各种不同的组件应用场景，提供给UX和BA做审查（review）。</p>

<p>4.组件在产品应用中的热插拔</p>

<p>最后一步，就是将组件应用到真正的产品实现中（该产品代码应该是与Living Style Guide毫无关系的业务代码）。而对于Living Style Guide输出的结果，应该可以任意选择刚好满足需求所需要的组件，拥有足够的灵活性，才能实现它在产品应用代码中的热插拔。</p>

<p>如果还有第5步的话，那就是重复上面的4步，这就是“风格指南驱动开发”的完整流程。</p>

<h3>留在最后的思考 - 它到底驱动了什么？</h3>

<p>作为好奇宝宝的你们和我，当你读完这篇文章，当我写完这篇项目上的实践总结，其实，应该仍然在思考，它到底驱动了什么？</p>

<p>在TDD和BDD中，通过测试，驱动我们编写刚好满足测试和满足需求的实现，而测试反过来成为保护伞，在我们通过重构提升代码质量的同时，保证功能的安全性。</p>

<p>那么，“风格指南驱动开发”到底驱动了什么？也许，它驱动着我们尽最大可能去重新使用已有的组件（代码）和设计更通用的组件，也驱动着我们（开发，UX，BA）进行更加频繁的沟通，它驱动着BA（业务分析）书写更加合理的Story，也驱动开发进行更加合理的代码和资源的管理。</p>

<p>如果转载本文，请注明转载地址： <a href="http://benweizhu.github.io/blog/2016/11/19/style-guide-driven-development/">http://benweizhu.github.io/blog/2016/11/19/style-guide-driven-development/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Living Style Guide - 缩小设计和开发的沟通鸿沟]]></title>
    <link href="http://benweizhu.github.io/blog/2016/10/27/living-style-guide/"/>
    <updated>2016-10-27T10:04:27+08:00</updated>
    <id>http://benweizhu.github.io/blog/2016/10/27/living-style-guide</id>
    <content type="html"><![CDATA[<p>本文作者：朱本威，杨松</p>

<h3>什么是Style Guide（风格指南）？</h3>

<p>如果你做过Web开发，我打赌你肯定听说过“风格指南”!</p>

<p>风格指南是什么？它是一系列关于书写和设计标准的文档，比如一些常见的标准有：字体，颜色，Logo，间距等等。</p>

<p>风格指南最早出自于印刷行业，比如：出版社就是风格指南的常见用户。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/style-guide/duzhe99.png" width="500" title="1999年的《读者》" alt="Alt text">
  <img src="http://benweizhu.github.io/images/style-guide/duzhe2016.png" width="294" title="2016年的《读者》" alt="Alt text">
</p>


<p style="text-align: center;">从1999年到2016年，《读者》的封面风格都没有改变过</p>


<p>好的品牌，通常都有一个非常棒的风格指南，无论是哪个行业，比如：KFC。我们也将KFC的这种风格指南成为VI（Visual Identity，企业视觉设计）。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/style-guide/KFC.png" width="500" title="KFC Style Guide" alt="Alt text">
</p>


<p style="text-align: center;">KFC老爷爷大家都认识</p>


<p>对于我们的WEB开发，也需要风格指南，目的是保证最终的交付产物和最初设计的一致性，打造出一致的核心用户体验。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/style-guide/optus.png" width="500" title="OPUTS Style Guide" alt="Alt text">
</p>


<p style="text-align: center;">Optus澳大利亚电讯公司</p>


<h3>风格指南过去的工作方式</h3>

<p>在过去，一种常用的工作方式，设计与开发是分离开了。设计师在这儿，前端工程师在那儿，中间有一条无形的巨大的鸿沟。</p>

<p>唯一的沟通渠道就是这样一个PDF材料。设计师最开始把PDF给你，然后和工程师各自为阵开始忙自己的，打死不相往来。</p>

<p>沟通不及时就不说了，有时候设计还要埋怨你，说你的实现怎么和他最初的设计不一样。</p>

<p>每一个工程师都应该都会有一段被设计师逼着改实现的经历，也许有的设计师们根本不理解我们修复IE问题时的痛苦，也不一定明白PDF文档沟通的效率是有限的。</p>

<p>“我怎么能知道点击每一个按钮时候的行为呢？”</p>

<p>答案是我根本不知道，等我看完了一百页文档，还不如你直接给我解释来得简单直接。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/style-guide/ui-dev.png" width="500" title="UX 和 UIDev" alt="Alt text">
</p>


<p style="text-align: center;">UX，UI Dev和Backend Dev</p>


<p>而每一次修改都需要很长的反馈周期，中间浪费了不少时间。</p>

<p>然而，当第二版，第三版，第四版来的时候，我的PDF和PSD文件已经堆积成山，我也不清楚哪一个才是最新的版本，没有版本管理工具，即便有，这种二进制文件也很难立刻查看它和上一个版本的区别在哪。</p>

<p>而且我相信大部分像我一样没有强迫症的人，一定是文件下载或者拷贝随意放置在桌面或者什么位置，然后常常根据时间排序去找最新的。久而久之，就不知道在哪了，然后又找设计师要一版。</p>

<p>经历了以上种种的痛点之后，我们是怎么做的？</p>

<h3>Living Style Guide</h3>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/style-guide/living-style-guide-logo.png" width="500" title="UX 和 UIDev" alt="Alt text">
</p>


<p>我们忍受不了这种不够敏捷的工作方式，尝试着用新的方式去解决这个问题，我们构建一个Living Style Guide。它是一个在线站点，同时也是一种工作方式，一种实践。我们尝试通过这种实践去解决这个问题。</p>

<p><strong>Living Style Guide和Style Guide的区别：</strong></p>

<p>一个直观的变化就是，曾经的PDF文档，代码化了。比如，最开始只存在于PDF文件中的调色板，字体，在网站上就可以直接查看，而不用担心是否过期，找不到等等。</p>

<p>同时，也是一种工作方式的改变，我们的设计师与工程师需要更加紧密地工作在一起了。让Living Style Guide成了一个钮带，连接着设计师与工程师。</p>

<p>设计看到的文档即代码，开发人员看到的代码即文档。不会出现设计师所认为的设计和实际开发出来的结果不一致的情况，我们做到Single source of truth(唯一真实来源)。同时，你看到的是动态，可交互的一系列组件。不需要考虑怎么用文档去描述一种行为，你所看到的就包含自身行为。</p>

<p>敏捷宣言中有这样一句话：工作的软件 高于 详尽的文档，Living Style Guide在努力实现这一点，尝试将设计与前端的闭环缩小。</p>

<h3>聊聊工程师们关心的干货</h3>

<p><strong>选择合适的技术栈</strong></p>

<p>技术栈的选择还是要回归到项目需求上。我们从大的方向上考虑了这么几点：组件化，数据驱动，易定制和可测试。</p>

<p>Living Style Guide是一个供设计师和前端开发工程师使用的平台，并可以将开发的内容打包使用在其他不同的Web应用平台，对通用性和易用性都有较高的要求，我们没有做一个大而全的框架，而是想要做到以组件为单位，灵活发布，并能灵活使用在各种平台。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/style-guide/tech-stack.png" width="500" title="我们的技术栈" alt="Alt text">
</p>


<p style="text-align: center;">我们的技术栈</p>


<p>上面这张图涵盖了我们大部分的技术栈内容，具体内容我就不单独介绍了。不过，我突然想起来前段时间有一篇非常火的文章《在2016年学JavaScript是一种什么样的体验?》，它写的就是我们这个feel。</p>

<p><strong>关于代码组织结构方式</strong></p>

<p>组件化是我们的核心价值，所以在代码结构上，我们将“自包含”属性作为一个很重要的特性。每一个组件包含了它自己所需要的相关文件：测试文件（单元测试，功能测试），样式文件（Sass），组件和文档，而公共的部分，我们抽离到其他位置，从而尽量做到高内聚，低耦合，同时提高代码重用性。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/style-guide/folder-structure.png" width="300" title="代码组织结构" alt="Alt text">
</p>


<p style="text-align: center;">我们项目的代码组织结构</p>


<p><strong>需要注意的点</strong></p>

<p>组件化的好处是相互隔离，又可被重用。实现组件化一定要需要合理的分类和管理好组件，比如，区分业务组件和通用组件，保证被重用的组件拥有足够的可扩展性。</p>

<p><strong>最后</strong></p>

<p>Living Style Guide是我们在缩小设计与开发沟通鸿沟的一种尝试，努力将闭环缩小，以提高效率，降低成本，这是一种实践，也是设计师和工程师工作方式的改变。</p>

<p>转载请注明： <a href="http://benweizhu.github.io/blog/2016/10/27/living-style-guide/">http://benweizhu.github.io/blog/2016/10/27/living-style-guide/</a></p>

<p>参考资料： <br/>
1. <a href="https://asinthecity.com/2011/11/10/the-difference-between-a-ux-designer-and-ui-developer/">https://asinthecity.com/2011/11/10/the-difference-between-a-ux-designer-and-ui-developer/</a> <br/>
2. 敏捷宣言（ <a href="http://agilemanifesto.org/iso/zhchs/">http://agilemanifesto.org/iso/zhchs/</a> ）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS和软件工程中的设计原则]]></title>
    <link href="http://benweizhu.github.io/blog/2016/08/21/css-for-software-engineers-for-css-developers/"/>
    <updated>2016-08-21T18:10:13+08:00</updated>
    <id>http://benweizhu.github.io/blog/2016/08/21/css-for-software-engineers-for-css-developers</id>
    <content type="html"><![CDATA[<p>原视频： <a href="https://vimeo.com/177216958">https://vimeo.com/177216958</a></p>

<p>PPT如下：</p>

<script async class="speakerdeck-embed" data-id="087e1c8ae1c4452f82ae6fd5e6215a9a" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>作者提到CSS开发过程的很多原则：
  • DRY/Single Source of Truth <br/>
  • The Single Responsibility Principle <br/>
  • The Separation of Concerns <br/>
  • Immutability <br/>
  • Cylcomatic Complexity <br/>
  • The Open/Close Principle <br/>
  • Orthogonality</p>

<p>这些原则在其他软件开发领域应用非常广泛，然而绝大多数人在写CSS的时候却又显得相当随意。
可以参考一下作者的观点，每一原则他都给出了对应的应用场景。</p>

<p>同时对于非常喜欢写嵌套规则的同学，强烈建议去了解<a href="%E5%9C%88%E5%A4%8D%E6%9D%82%E5%BA%A6">Cylcomatic Complexity</a>，尝试着去减少嵌套，减少以后的维护成本。</p>

<p>个人感觉，作者对于这些设计原则本身的说明，占用了太多的篇幅，并没有告诉你如果要实现这个设计，应该怎么做？但作者讲解了一些反例，并印证它不满足那些原则。我们应该反向思考，我们在css中过于随意的css选择器，定义出scope正确的合理的css。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVG和IconFont]]></title>
    <link href="http://benweizhu.github.io/blog/2016/07/12/svg-and-icon-font/"/>
    <updated>2016-07-12T15:28:07+08:00</updated>
    <id>http://benweizhu.github.io/blog/2016/07/12/svg-and-icon-font</id>
    <content type="html"><![CDATA[<p>在大型企业中，它们都拥有自己的VI，有自己的设计团队，他们来开发设计一些企业特有的图标和标志。而这些图标一般以矢量图的方式提供给我们。</p>

<p>矢量图，也称为面向对象的图像或绘图图像，在数学上定义为一系列由线连接的点。矢量文件中的图形元素称为对象。每个对象都是一个自成一体的实体，它具有颜色、形状、轮廓、大小和屏幕位置等属性。</p>

<p>SVG（Scalable Vector Graphics）是什么？</p>

<p>大部分人第一次见到它，肯定认为是一种矢量图图形格式，但严格来说它也是一种开放标准的矢量图形语言，是使用XML来描述二维图形和绘图程序的语言，它是一门语言，DSL（领域特定语言）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot;</span>
</span><span class='line'><span class="cp">&quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">&quot;100%&quot;</span> <span class="na">height=</span><span class="s">&quot;100%&quot;</span> <span class="na">version=</span><span class="s">&quot;1.1&quot;</span>
</span><span class='line'><span class="na">xmlns=</span><span class="s">&quot;http://www.w3.org/2000/svg&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;50&quot;</span> <span class="na">r=</span><span class="s">&quot;40&quot;</span> <span class="na">stroke=</span><span class="s">&quot;black&quot;</span>
</span><span class='line'><span class="na">stroke-width=</span><span class="s">&quot;2&quot;</span> <span class="na">fill=</span><span class="s">&quot;red&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面这段代码得到的svg矢量图，如下：</p>

<p><img src="https://rawgit.com/benweizhu/5036fcaf39960a28ce9b0aca17a78caa/raw/31797b14c698431c9a6f5435a2f5a28dda2ce1bd/circle.svg" alt="Alt text" /></p>

<p>我们在响应式网页设计的工作中经常用到SVG，因为一般的图片没有办法进行适当的缩放，普通图片的缩放会导致图像的失真，同时，图片的文件大小也可能和你希望的图片不一致（大图被缩小使用，导致图片文件大小仍然很大）。</p>

<p>我相信大部分前端开发工程师都用过IconFont，比如：<a href="http://fontawesome.io/icons/">http://fontawesome.io/icons/</a> 和bootstrap中的glyphicons <a href="http://v3.bootcss.com/components/#glyphicons">http://v3.bootcss.com/components/#glyphicons</a> 。</p>

<p>关于为什么要转换为Icon Font？CSS-Tricks中有一篇文章详细的对比了SVG和ICON Font，见： <a href="https://css-tricks.com/icon-fonts-vs-svg/">https://css-tricks.com/icon-fonts-vs-svg/</a></p>

<p>简单版，一个最主要的原因必须使用IconFont，因为要兼容IE8。</p>

<p>一个比较有用的gulp插件，可以将SVG文件转化为font字体文件，并自动生成对应的scss文件（包含font-familly和content）。</p>

<p><a href="https://github.com/nfroidure/gulp-iconfont">https://github.com/nfroidure/gulp-iconfont</a></p>

<p>当然，我们也可以使用一些在线工具来将SVG文件转化成字体文件比如： <a href="https://icomoon.io/">https://icomoon.io/</a> 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.bash_profile和.bashrc]]></title>
    <link href="http://benweizhu.github.io/blog/2016/07/02/bash-profile-and-bashrc/"/>
    <updated>2016-07-02T12:54:48+08:00</updated>
    <id>http://benweizhu.github.io/blog/2016/07/02/bash-profile-and-bashrc</id>
    <content type="html"><![CDATA[<p>做个记录</p>

<p>转载自： <a href="http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html">http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html</a></p>

<p>WHEN working with Linux, Unix, and Mac OS X, I always forget which bash config file to edit when I want to set my PATH and other environmental variables for my shell. Should you edit .bash_profile or .bashrc in your home directory?
You can put configurations in either file, and you can create either if it doesn’t exist. But why two different files? What is the difference?
According to the bash man page, .bash_profile is executed for login shells, while .bashrc is executed for interactive non-login shells.</p>

<p><strong>What is a login or non-login shell?</strong></p>

<p>When you login (type username and password) via console, either sitting at the machine, or remotely via ssh: .bash_profile is executed to configure your shell before the initial command prompt.
But, if you’ve already logged into your machine and open a new terminal window (xterm) inside Gnome or KDE, then .bashrc is executed before the window command prompt. .bashrc is also run when you start a new bash instance by typing /bin/bash in a terminal.
Why two different files?</p>

<p>Say, you’d like to print some lengthy diagnostic information about your machine each time you login (load average, memory usage, current users, etc). You only want to see it on login, so you only want to place this in your .bash_profile. If you put it in your .bashrc, you’d see it every time you open a new terminal window.
Mac OS X — an exception</p>

<p>An exception to the terminal window guidelines is Mac OS X’s Terminal.app, which runs a login shell by default for each new terminal window, calling .bash_profile instead of .bashrc. Other GUI terminal emulators may do the same, but most tend not to.</p>

<p>就是注意一点，这里提到Mac会有些不同。</p>

<p>什么时候会用到呢？其实有很多，比如，安装mysql时，希望通过命令访问，就需要把mysql的路径放在path中。又比如，安装nvm时，配置nvm的命令。还有比如希望使用alias命令，添加一些快捷命令，也需要配置。</p>
]]></content>
  </entry>
  
</feed>
