<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://benweizhu.github.io/atom.xml" rel="self"/>
  <link href="http://benweizhu.github.io/"/>
  <updated>2014-12-22T18:23:03+08:00</updated>
  <id>http://benweizhu.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[开始！AngularJS!（一）]]></title>
    <link href="http://benweizhu.github.io/blog/2014/12/19/yes-angularjs-1/"/>
    <updated>2014-12-19T21:54:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/12/19/yes-angularjs-1</id>
    <content type="html"><![CDATA[<p>首先，看这样一个例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body</span> <span class="na">ng-app</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;textLengthLimitController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;textarea</span> <span class="na">ng-model=</span><span class="s">&quot;text&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span> <span class="nt">&lt;span&gt;&lt;/span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">ng-disabled=</span><span class="s">&quot;!hasValidLength()&quot;</span> <span class="na">value=</span><span class="s">&quot;send&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">MAX_LENGTH</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">textLengthLimitController</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">remaining</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">MAX_LENGTH</span> <span class="o">-</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">hasValidLength</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">remaining</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码的功能是告诉用户还可输入多少字符，当字符超过限制，将发送按钮灰掉。在jsFiddle里运行该代码，<a href="http://jsfiddle.net/benweizhu/cbcn995m/">http://jsfiddle.net/benweizhu/cbcn995m/</a></p>

<p>这里做了几件事情：<br/>
1.定义页面（HTML页面）<br/>
2.定义期待行为（remaining()和ng-disabled）<br/>
3.定义行为发生的逻辑（MAX_LENGTH - $scope.text.length和$scope.remaining() >= 0）</p>

<p>剩下最复杂的事情：对DOM元素的操作，交给了AngularJS来做。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle Jetty和Gradle Watch插件实现热部署]]></title>
    <link href="http://benweizhu.github.io/blog/2014/07/27/gradle-jetty-plugin-hot-deploy/"/>
    <updated>2014-07-27T14:53:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/07/27/gradle-jetty-plugin-hot-deploy</id>
    <content type="html"><![CDATA[<h2><strong>Jetty插件</strong></h2>

<p>Jetty插件提供两个重要方法：jettyRun和jettyRunWar。</p>

<p>jettyRun会将一个已暴露（解包的）的web应用部署到嵌入式Jetty Web容器中。它不需要将web应用打包成一个war文件，目的是为了节省部署时间。</p>

<p>jettyRunWar正好相反，是将一个War包部署到Web容器中。</p>

<p><strong>jettyRun的好处是，你可以改变静态文件和JSP文件，而不需要重新启动服务器。</strong></p>

<p>但是即便如此，对于日常开发还是不方便，因为开发过程中改动最多的其实是Java文件和资源配置文件，所以真正需要的是<strong>热部署</strong>。</p>

<p>jettyRun的Gradle API文档中有这么一句话：Once started, the web container can be configured to run continuously, scanning for changes in the project and automatically performing a hot redeploy when necessary. This allows the developer to concentrate on coding changes to the project using their IDE of choice and have those changes immediately and transparently reflected in the running web container, eliminating development time that is wasted on rebuilding, reassembling and redeploying.</p>

<p>这句话简单总结就是Jetty提供实现热部署的特性，开发人员只需要专注于编写代码，减少重新构建，重新组装和重新部署所浪费的时间。</p>

<p>但问题是，官方文档上写了这句话后，就不了了之了，没有说怎么做。我们都试过，默认配置是不会实现热部署的，那么应该怎么做呢？</p>

<h3><strong>两个属性：</strong></h3>

<p><strong>reload</strong>  The reload mode, which is either &ldquo;automatic&rdquo; or &ldquo;manual&rdquo;.</p>

<p><strong>scanIntervalSeconds</strong>  The interval in seconds between scanning the web app for file changes. If file changes are detected, the web app is reloaded. Only relevant if reload is set to &ldquo;automatic&rdquo;. Defaults to 0, which disables automatic reloading.</p>

<p>读完上面两段，说明默认scanIntervalSeconds的配置是不支持自动重新载入变化文件的。</p>

<p>试一把，把它改为支持：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>apply plugin: &#39;jetty&#39;
</span><span class='line'>apply plugin: &#39;idea&#39;
</span><span class='line'>
</span><span class='line'>repositories {
</span><span class='line'>    mavenCentral()
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>dependencies {
</span><span class='line'>    compile &#39;org.springframework:spring-webmvc:4.0.6.RELEASE&#39;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>jettyRun {
</span><span class='line'>    reload = &quot;automatic&quot;
</span><span class='line'>    scanIntervalSeconds = 1
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>然后运行gradle jettyRun启动jetty容器，修改Java类，然后去页面验证变化，结果是没有变化。为什么？</p>

<p>原来，jetty监听的是build目录下的class文件变化，而不是源代码变化，也就说源代码内容改变了，但class文件没有变化，那么不会自动触发jetty重载变化文件，那么该怎么办？最简单粗暴的解决方案就是另起一个命令行窗口，手动运行一次gradle compileJava命令。</p>

<p>没错，这个方法是行得通的。但仍然不是最好的解决方案。我查了下，到目前为止，官方没有给出正式的解决方案，但是该特性是在GradleWare的To-Do-List上的，预计以后应该会有。</p>

<h2><strong>Gradle Watch</strong></h2>

<p>那么，唯一的办法只有借助第三方的插件来协助Jetty插件，一起实现热部署了，gradle-watch（日本人写的，因为上面的饿提交记录全是日文的）。 <a href="https://github.com/bluepapa32/gradle-watch-plugin">https://github.com/bluepapa32/gradle-watch-plugin</a></p>

<p>gradle watch的作用是监听某种类型的文件的变化，包括添加，删除和修改，然后执行预定义的任务。</p>

<p>使用起来很简单：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>apply plugin: &#39;jetty&#39;
</span><span class='line'>apply plugin: &#39;idea&#39;
</span><span class='line'>
</span><span class='line'>repositories {
</span><span class='line'>    mavenCentral()
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>dependencies {
</span><span class='line'>    compile &#39;org.springframework:spring-webmvc:4.0.6.RELEASE&#39;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>jettyRun {
</span><span class='line'>    reload = &quot;automatic&quot;
</span><span class='line'>    scanIntervalSeconds = 1
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>buildscript {
</span><span class='line'>    repositories {
</span><span class='line'>        jcenter()
</span><span class='line'>    }
</span><span class='line'>    dependencies {
</span><span class='line'>        classpath &#39;com.bluepapa32:gradle-watch-plugin:0.1.3&#39;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>apply plugin: &#39;watch&#39;
</span><span class='line'>
</span><span class='line'>watch {
</span><span class='line'>    java {
</span><span class='line'>        files files(&#39;src/main/java&#39;)
</span><span class='line'>        tasks &#39;compileJava&#39;
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>配置watch闭包，什么文件发生变化后就执行什么任务（好像它没有提供默认配置，所以需要手动显示的配置）。</p>

<p>在启动了gradle jettyRun之后，开启另一个窗口运行gradle watch。一次Java文件变化的输出如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">:</span><span class="nx">watch</span>
</span><span class='line'><span class="nx">Starting</span><span class="p">............</span> <span class="nx">OK</span>
</span><span class='line'>
</span><span class='line'><span class="o">--------------------------------------------------------------------------------</span>
</span><span class='line'><span class="nx">Sun</span> <span class="nx">Jul</span> <span class="mi">27</span> <span class="mi">15</span><span class="o">:</span><span class="mi">36</span><span class="o">:</span><span class="mi">51</span> <span class="nx">CST</span> <span class="mi">2014</span>
</span><span class='line'>
</span><span class='line'><span class="nx">File</span> <span class="s2">&quot;src/main/java/me/zeph/springmvc/jrebel/controller/HelloJRebelController.java&quot;</span> <span class="nx">was</span> <span class="nx">changed</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">-----------------------------------------------------</span>
</span><span class='line'><span class="o">:</span><span class="nx">compileJava</span>
</span><span class='line'>
</span><span class='line'><span class="nx">BUILD</span> <span class="nx">SUCCESSFUL</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Total</span> <span class="nx">time</span><span class="o">:</span> <span class="mf">0.954</span> <span class="nx">secs</span>
</span><span class='line'><span class="nx">Building</span> <span class="o">&gt;</span> <span class="o">:</span><span class="nx">watch</span>
</span></code></pre></td></tr></table></div></figure>


<p>可见，成功的更新了Java的class文件到build目录。刷新一次页面，就可以查看变化了。</p>

<p>那么对于资源文件呢？比如，我使用了Spring，需要改变Spring的Bean配置文件，同样可以。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>watch {
</span><span class='line'>    java {
</span><span class='line'>        files files(&#39;src/main/java&#39;)
</span><span class='line'>        tasks &#39;compileJava&#39;
</span><span class='line'>    }
</span><span class='line'>    resources {
</span><span class='line'>        files fileTree(dir: &#39;src/main/resources&#39;, include: &#39;**/*.xml&#39;)
</span><span class='line'>        tasks &#39;processResources&#39;
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>输出结果如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">--------------------------------------------------------------------------------</span>
</span><span class='line'><span class="nx">Sun</span> <span class="nx">Jul</span> <span class="mi">27</span> <span class="mi">15</span><span class="o">:</span><span class="mi">56</span><span class="o">:</span><span class="mi">39</span> <span class="nx">CST</span> <span class="mi">2014</span>
</span><span class='line'>
</span><span class='line'><span class="nx">File</span> <span class="s2">&quot;src/main/resources/applicationContextService.xml&quot;</span> <span class="nx">was</span> <span class="nx">changed</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">--------------------------------------------------------------------------------</span>
</span><span class='line'><span class="o">:</span><span class="nx">processResources</span>
</span><span class='line'>
</span><span class='line'><span class="nx">BUILD</span> <span class="nx">SUCCESSFUL</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Total</span> <span class="nx">time</span><span class="o">:</span> <span class="mf">0.501</span> <span class="nx">secs</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是很爽，这样是不是就再也不用重启服务器了，开发速度瞬间提升好几万战斗力。</p>

<p>加一句，该插件同样支持properties文件的改变，与XML一样配置。</p>

<p>好吧，就到这里，我觉得热部署也算的上某种自动化开发的一部分，至少他们的目的一样，提升开发效率，得到快速反馈，希望这篇文章对大家有所帮助。</p>

<p>参考资料：</p>

<p>1.<a href="http://forums.gradle.org/gradle/topics/hot_deploy_with_jetty_plugins_jettyrun">http://forums.gradle.org/gradle/topics/hot_deploy_with_jetty_plugins_jettyrun</a></p>

<p>2.<a href="http://www.gradle.org/docs/current/dsl/org.gradle.api.plugins.jetty.JettyRun.html">http://www.gradle.org/docs/current/dsl/org.gradle.api.plugins.jetty.JettyRun.html</a></p>

<p>3.<a href="https://github.com/bluepapa32/gradle-watch-plugin">https://github.com/bluepapa32/gradle-watch-plugin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring，Gradle，Web.xml和Intellij]]></title>
    <link href="http://benweizhu.github.io/blog/2014/07/24/the-web-dot-xml-you-need-to-know/"/>
    <updated>2014-07-24T21:38:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/07/24/the-web-dot-xml-you-need-to-know</id>
    <content type="html"><![CDATA[<p>标题取得不是太好哈，但是看这标题，就知道，这篇文章不是什么高大上的内容。四个看似完全搭不上边的东西，把它们结合在一起使用的时候，对于大部分Java新人来说，却绝对是个头疼的问题。</p>

<p>好，先把问题摆出来，看例子：</p>

<p>我有一个Spring Web MVC的小例子，项目结构是这样的：</p>

<p><img class="center" src="http://benweizhu.github.io/../images/springgradlewebintellij/project-structure.png"></p>

<p>configuration目录中，配置有一些Spring的Bean，比如Service类，Dao类等等。比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;helloService&quot;</span> <span class="na">class=</span><span class="s">&quot;me.zeph.springmvc.service.HelloService&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>项目中的xx-servlet.xml很简单，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:context=</span><span class="s">&quot;http://www.springframework.org/schema/context&quot;</span>
</span><span class='line'>       <span class="na">xmlns:mvc=</span><span class="s">&quot;http://www.springframework.org/schema/mvc&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&quot;me.zeph.springmvc&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;viewResolver&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.web.servlet.view.UrlBasedViewResolver&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;prefix&quot;</span> <span class="na">value=</span><span class="s">&quot;/WEB-INF/view/&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;suffix&quot;</span> <span class="na">value=</span><span class="s">&quot;.jsp&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;viewClass&quot;</span> <span class="na">value=</span><span class="s">&quot;org.springframework.web.servlet.view.JstlView&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;mvc:annotation-driven/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>问题是，我应该在怎么写web.xml和build.xml？才能够让它跑起来。</p>

<p>大部分进入项目的人，包括我在内，都很少有机会能够在项目开始时就加入，那么你就没有机会参与到项目结构的配置过程中，这样对于大部分人都很难有这方面的经验，除非你去做项目的迁移工作。</p>

<p>最常见的问题就是，跑一个gradle jettyRun，报了一个异常，XXXBean Not Define，然后就不知所措了。</p>

<p>今天，我们就通过这个很小的例子来了解一下，如何通过Gradle来合理配置Spring的Bean定义文件？</p>

<p>要弄清楚这个内容，你需要有几项基本知识：</p>

<p>1.ClassPath<br/>
2.Gradle的SourceSet<br/>
3.web.xml中<context-param>的含义<br/>
4.contextConfigLocation<br/>
5.ContextLoaderListener<br/>
6.web.xml中classpath: 符号</p>

<p>关于前两项：</p>

<p>关于ClassPath的基本知识，可以自学，或者看我的这篇文章：<a href="http://benweizhu.github.io/blog/2014/04/07/write-java-code-without-ide/">http://benweizhu.github.io/blog/2014/04/07/write-java-code-without-ide/</a>     （丢掉IDE，回到Java的第一堂课）</p>

<p>SourceSet，请阅读<a href="http://www.gradle.org/docs/current/userguide/java_plugin.html">http://www.gradle.org/docs/current/userguide/java_plugin.html</a>  ，基本概念就是，它是Gradle的Java插件引入的一个概念，用于告诉Gradle，项目哪些目录是源文件，需要Gradle在打包的时候将这些文件加入。</p>

<p>后面的，我们一边看答案，一边了解。</p>

<p>先来看web.xml该怎么写？</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;web-app</span> <span class="na">version=</span><span class="s">&quot;2.4&quot;</span>
</span><span class='line'>         <span class="na">xmlns=</span><span class="s">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span>
</span><span class='line'>         <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>         <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://java.sun.com/xml/ns/j2ee</span>
</span><span class='line'><span class="s">        http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>webapp<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>        <span class="nt">&lt;load-on-startup&gt;</span>1<span class="nt">&lt;/load-on-startup&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>webapp<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url-pattern&gt;</span>/<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet-mapping&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;context-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-value&gt;</span>
</span><span class='line'>            classpath:spring/applicationContextService.xml,
</span><span class='line'>            classpath:spring/applicationContextDao.xml,
</span><span class='line'>            classpath:spring/applicationContextJMS.xml
</span><span class='line'>        <span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/context-param&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;listener&gt;</span>
</span><span class='line'>        <span class="nt">&lt;listener-class&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="nt">&lt;/listener-class&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/listener&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/web-app&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了配置servlet，这里还有两项配置，分别是context-param和listener。</p>

<p><strong>context-param</strong></p>

<p>web.xml的配置中<context-param>配置作用：（为了不赘述，引用文章，<a href="http://www.cnblogs.com/hzj-/articles/1689836.html">http://www.cnblogs.com/hzj-/articles/1689836.html</a> ）</p>

<p>1.启动一个WEB项目的时候,容器(如:Tomcat)会去读它的配置文件web.xml.读两个节点: <listener></listener> 和 <context-param></context-param></p>

<p>2.紧接着,容器创建一个ServletContext(上下文),这个WEB项目所有部分都将共享这个上下文.</p>

<p>3.容器将<context-param></context-param>转化为键值对,并交给ServletContext.</p>

<p>4.容器创建<listener></listener>中的类实例,即创建监听.</p>

<p>5.在监听中会有contextInitialized(ServletContextEvent args)初始化方法,在这个方法中获得ServletContext = ServletContextEvent.getServletContext();context-param的值 = ServletContext.getInitParameter(&ldquo;context-param的键&rdquo;);</p>

<p>6.得到这个context-param的值之后,你就可以做一些操作了.注意,这个时候你的WEB项目还没有完全启动完成.这个动作会比所有的Servlet都要早.换句话说,这个时候,你对<context-param>中的键值做的操作,将在你的WEB项目完全启动之前被执行.</p>

<p><strong>listener</strong></p>

<p>在这里，ContextLoaderListener的作用是为Servlet初始化Spring的Web应用上下文，而上下文的内容就是上面<context-param>中配置的contextConfigLocation的内容。</p>

<p>你只需要知道他们的作用是什么，如何配置的，不用太深入的知道，Spring到底是怎么使用它们的。</p>

<p>于是，有了这些基本了解之后，再来看怎么写contextConfigLocation的内容，以及为什么这么写？</p>

<p>首先，classpath:spring/applicationContextService.xml是什么意思？它是说在当前应用的classpath下去寻找spring目录下的applicationContextService.xml文件。</p>

<p>就以Web开发为例，web应用程序是以War包的形式存在，它的classpath，就是War中的WEB-INF/class目录。只要你的applicationContextService.xml在war包的class目录下，它就在classpath路径下的。那么针对上例，你需要在打包的时候将applicationContextService.xml放在War包中的WEB-INF/class/spring目录下。</p>

<p>道理很简单吧，那么问题来了，怎么样让Gradle帮我把它打到War包中呢？</p>

<p>答案是自定义SourceSet，告诉Gradle applicationContextService.xml是我的源文件，我希望你帮我打到War包中。</p>

<p>如果你有去了解SourceSet，你应该知道，它有默认的规约，就是遵循Maven的项目布局模式。main/java，main/sources等。</p>

<p>在这个例子里，configuration下所有的东西，我都希望打到war包的classpath下，于是你就需要自定义SourceSet，告诉Gradle，我的源文件在哪个位置。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>apply plugin: &#39;jetty&#39;
</span><span class='line'>apply plugin: &#39;idea&#39;
</span><span class='line'>
</span><span class='line'>repositories {
</span><span class='line'>    mavenCentral()
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>sourceSets {
</span><span class='line'>    main {
</span><span class='line'>        resources {
</span><span class='line'>            srcDir &#39;configuration&#39;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>dependencies {
</span><span class='line'>    compile &#39;org.springframework:spring-webmvc:4.0.6.RELEASE&#39;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>当以上这些你都配置好之后，你可以运行 gradle war命令，打一个war包，然后将它解压缩，看看里面class目录的内容，应该是包含spring/applicationContext**等相关文件。</p>

<p>现在你应该清楚Gradle，Web.xml和Spring是怎么相亲相爱的在一起了吧。</p>

<p><strong>我们再来看一个更有趣的内容，Intellij和它们有什么关系呢？</strong></p>

<p>这是很多初学Java和使用Intellij的人容易犯的错误。</p>

<p>你肯定遇到过这个问题，为什么我的Intellij的xml配置文件中一些路径的配置老是红的，比如classpath:applicationXX.xml，而一些又是好的。</p>

<p>为什么我的配置没有红，而且它可以通过Ctrl + B可以跳转到源文件，但是启动jettyRun的时候还是提示我找不到Bean呢?</p>

<p>那是因为Intellij和你启动Gradle打包和部署一点关系都没有。所以答案就是：没有关系。</p>

<p>之所以会红，是因为，xml文件所在目录，你并没有在Intellij中Mark为SourceRoot（会变成绿色文件夹那个）。所以Intellij不认为那是你的源代码，所以你在classpath：时，它就认为你指定的不对，如果你将该目录mark为SourceRoot，Intellij不仅不红，还是很智能的提示你，帮你补全。</p>

<p>相反，那为什么他都帮我补全，而且可以Ctrl + B 跳过去了，但是Gradle jettyRun却提示找不到Bean呢？那是因为，你在Intellij中设置了Source目录，但是Gradle并不知道啊！！！你是否还会天真的以为，明明找得到啊，都Ctrl + B跳过去了，为什么还是不对呢？</p>

<p>好吧，这是很多新人，包括以前的我在内，都不太了解的基本知识。</p>

<p>希望今天这篇文章对大家有帮助，帮助大家解答所有的疑惑。不早了，晚安。</p>

<p>参考资料：</p>

<p>1.<a href="http://www.cnblogs.com/hellojava/archive/2012/12/28/2835730.html">http://www.cnblogs.com/hellojava/archive/2012/12/28/2835730.html</a></p>

<p>2.<a href="http://www.gradle.org/docs/current/userguide/java_plugin.html">http://www.gradle.org/docs/current/userguide/java_plugin.html</a></p>

<p>3.<a href="http://lyfei022.blog.163.com/blog/static/82558312009112943635741/">http://lyfei022.blog.163.com/blog/static/82558312009112943635741/</a></p>

<p>4.<a href="http://www.cnblogs.com/hzj-/articles/1689836.html">http://www.cnblogs.com/hzj-/articles/1689836.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Validation 深入浅出]]></title>
    <link href="http://benweizhu.github.io/blog/2014/07/19/spring-validation-by-example/"/>
    <updated>2014-07-19T19:12:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/07/19/spring-validation-by-example</id>
    <content type="html"><![CDATA[<p>在Web开发中，一个重要的特性，那就是对表单提交的内容进行合法性校验。</p>

<p>校验的方式根据方式的不同，分为两类：前端校验和后端校验。</p>

<p>前端校验的优点是，不用与服务器交互，由JavaScript直接对页面元素中的内容进行校验，速度更快。但这种方式的安全性不高，对于了解web开发的人可以通过修改页面内容的方式绕过前端验证。</p>

<p>后端验证需要表单提交，一般情况下会刷新页面，对于用户体验不是太理想。</p>

<p>所以，一般前端验证会和后端验证会配合在一起。</p>

<p>今天我们一起来学习一下，在Spring MVC中，是如何进行后端的校验，它又是如何通过Spring提供的Form标签，将错误警告信息传递到前端来显示。</p>

<h2><strong>基本了解</strong></h2>

<p>我们先来简单的写一个demo，这种HelloWorld式例子最容易让人有信心去理解和学习，要实现它，你只需要了解下面五样或者四样东西。</p>

<p><strong>一个重要的包：</strong></p>

<p>Spring框架中有一个非常重要的包，org.springframework.validation，它提供了两个重要的特性：数据绑定和校验。</p>

<p>数据绑定允许用户的输入动态的绑定到应用的领域模型，实现字符串类型和其他类型的转换。</p>

<p>在Spring MVC，数据绑定机制允许你使用任何的命令对象或者表单对象-你不需要实现一个框架指定的接口或者类。</p>

<p><strong>一个重要接口：</strong></p>

<p>Errors：用于存储和暴露于某个对象相关的数据绑定和错误校验信息。</p>

<p><strong>一个重要的类：</strong></p>

<p>BeanPropertyBindingResult：Spring中，Errors和BindingResult接口的默认实现类，主要给JavaBean对象的绑定错误进行注册和评估。</p>

<p><strong>一个重要的Form标签：</strong></p>

<p>&lt;form:errors>:这个标签会将对象field的错误渲染成一个HTML的span标签。它能够访问由Controller或者与Controller相关的的Validator创建出来的errors对象。（关于Validator，后面会介绍）</p>

<p><strong>两个重要的函数：</strong></p>

<p>那么，要在Controller中实现一个最简单的校验，并将校验结果显示在前端就非常简单了，你只需要在了解Errors接口的两个函数：</p>

<p>reject():使用给定的错误描述信息，给这个目标对象注册一个全局的错误信息</p>

<p>rejectValue()：使用给定的错误描述信息，注册一个field的错误到当前对象的某个指定field上（或者该对象的某个成员变量的field上，比如customer.name.firstName）。这个field名字也可以是null或者空串来说明是指定该对象而不是该对象的一个field（不过这样容易导致一些错误）。</p>

<p>看下面的例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:mvc=</span><span class="s">&quot;http://www.springframework.org/schema/mvc&quot;</span>
</span><span class='line'>       <span class="na">xmlns:context=</span><span class="s">&quot;http://www.springframework.org/schema/context&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/mvc</span>
</span><span class='line'><span class="s">                    http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd</span>
</span><span class='line'><span class="s">                    http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">                    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span>
</span><span class='line'><span class="s">                    http://www.springframework.org/schema/context</span>
</span><span class='line'><span class="s">                    http://www.springframework.org/schema/context/spring-context-3.1.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&quot;me.zeph.springview.demo&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;viewResolver&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;viewClass&quot;</span> <span class="na">value=</span><span class="s">&quot;org.springframework.web.servlet.view.JstlView&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;prefix&quot;</span> <span class="na">value=</span><span class="s">&quot;/WEB-INF/view/&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;suffix&quot;</span> <span class="na">value=</span><span class="s">&quot;.jsp&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- bind your messages.properties --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;messageSource&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;basename&quot;</span> <span class="na">value=</span><span class="s">&quot;messages&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;mvc:annotation-driven/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里唯一特殊的一点就是配置了一个ResourceBundle，它指向一个messages.properties文件，里面存放这校验错误码对应的信息。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>NotEmpty.customer.name=Name is required
</span><span class='line'>NotEmpty.customer.password=Password is required
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">springview</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">controller</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.springview.demo.domain.Customer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.validation.Errors</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">StringUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">bind</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">bind</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ErrorController</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ERROR</span> <span class="o">=</span> <span class="s">&quot;error&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ERROR_SUCCESS</span> <span class="o">=</span> <span class="s">&quot;error-success&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;error&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">GET</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">view</span><span class="o">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ERROR</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;error&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">POST</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">commit</span><span class="o">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="o">,</span> <span class="n">Errors</span> <span class="n">errors</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">(</span><span class="n">customer</span><span class="o">.</span><span class="na">getName</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">errors</span><span class="o">.</span><span class="na">rejectValue</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;NotEmpty.customer.name&quot;</span><span class="o">,</span> <span class="s">&quot;name is empty&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">(</span><span class="n">customer</span><span class="o">.</span><span class="na">getPassword</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">errors</span><span class="o">.</span><span class="na">rejectValue</span><span class="o">(</span><span class="s">&quot;password&quot;</span><span class="o">,</span> <span class="s">&quot;NotEmpty.customer.password&quot;</span><span class="o">,</span> <span class="s">&quot;password is empty&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">//Just for demonstrating reject the object itself</span>
</span><span class='line'>      <span class="n">errors</span><span class="o">.</span><span class="na">reject</span><span class="o">(</span><span class="s">&quot;customer.invalid&quot;</span><span class="o">,</span> <span class="s">&quot;Customer is invalid&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">errors</span><span class="o">.</span><span class="na">hasErrors</span><span class="o">()</span> <span class="o">?</span> <span class="n">ERROR</span> <span class="o">:</span> <span class="n">ERROR_SUCCESS</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Controller里面，通过参数让Spring帮我们注入Errors对象（注意Errors作为参数的位置一定要在领域对象（表单对象）的后面，猜测原因是Spring需要知道Errors对象是与哪个对象绑定的）。这里自己写校验逻辑，然后调用errors的rejectValue方法，将错误信息保存起来。如果你在这里打断点，你会看到，Errors真正的类型是BeanPropertyBindingResult。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="err">&lt;</span>%@ taglib prefix=&quot;form&quot; uri=&quot;http://www.springframework.org/tags/form&quot; %&gt;
</span><span class='line'><span class="err">&lt;</span>%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Spring MVC View Demo<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>Spring MVC View Demo<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;form:form</span> <span class="na">commandName=</span><span class="s">&quot;customer&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span> <span class="na">action=</span><span class="s">&quot;error&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;form:errors</span> <span class="na">path=</span><span class="s">&quot;*&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>name :<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;form:input</span> <span class="na">path=</span><span class="s">&quot;name&quot;</span> <span class="na">id=</span><span class="s">&quot;name&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;password&quot;</span><span class="nt">&gt;</span>password :<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;form:password</span> <span class="na">path=</span><span class="s">&quot;password&quot;</span> <span class="na">id=</span><span class="s">&quot;password&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;submit&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/form:form&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>path=&ldquo;*&rdquo; - 显示全部的内容</strong>   <br/>
<strong>path=&ldquo;name&rdquo; - 显示与name这个field相关的错误信息</strong><br/>
<strong>如果path不填 - 只显示与表单对象本身相关的错误信息</strong></p>

<p>到这里，你就可以去试一试，看能不能正常显示出你想要的信息。但是是不是到这里就为止了呢？远远没有。这只是Spring Validation最根本和最简单的实现，这种方式并不被Spring推荐，我们继续。</p>

<h2><strong>JSR-303</strong></h2>

<p>在Spring 3.0之后，Spring Validation的功能增强了，支持结合使用JSR-303标准进行校验。</p>

<p>先讲讲什么是JSR-303，它是Java标准中Bean Validation的1.0版本。</p>

<p>它可以让你通过注解的方式来对对象模型添加限制，它提供的开箱即用的常用限制注解，同时也允许你写自己的限制规则。</p>

<p>不过就像之前学习的，它只是标准，具体实现由第三方提供，默认的参考实现是Hibernate Validator。</p>

<p>结合JSR-303，对表单的对象的校验就是成为了简单的给领域对象添加限定规则的注解。</p>

<p>来看看怎么写</p>

<p>首先给领域对象的field添加你需要的注解</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">springview</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">domain</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.hibernate.validator.constraints.NotEmpty</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@NotEmpty</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@NotEmpty</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，Controller就简单了，没有写任何校验逻辑。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">springview</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">controller</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.springview.demo.domain.User</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.validation.Errors</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.validation.Valid</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">bind</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">bind</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValidController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">VALID</span> <span class="o">=</span> <span class="s">&quot;valid&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">VALID_SUCCESS</span> <span class="o">=</span> <span class="s">&quot;valid-success&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;valid&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">GET</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">view</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">VALID</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;valid&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">POST</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">commit</span><span class="o">(</span><span class="nd">@Valid</span> <span class="n">User</span> <span class="n">user</span><span class="o">,</span> <span class="n">Errors</span> <span class="n">errors</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">errors</span><span class="o">.</span><span class="na">hasErrors</span><span class="o">()</span> <span class="o">?</span> <span class="n">VALID</span> <span class="o">:</span> <span class="n">VALID_SUCCESS</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看下面的错误码和消息的写法，你应该知道JSR-303生成错误码的规则。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">NotEmpty</span><span class="o">.</span><span class="na">user</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="n">Name</span> <span class="n">is</span> <span class="n">required</span>
</span><span class='line'><span class="n">NotEmpty</span><span class="o">.</span><span class="na">user</span><span class="o">.</span><span class="na">password</span><span class="o">=</span><span class="n">Password</span> <span class="n">is</span> <span class="n">required</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你觉得它提供的注解不够你用，你还可以写自己的注解，具体的内容就不在这里谈了，这是JSR-303的内容。如果你想了解，可以参考Hibernate Validation的指南： <a href="http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-customconstraints">http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-customconstraints</a></p>

<p>还没讲完呢，继续深入。</p>

<h2><strong>深入理解</strong></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">commit</span><span class="o">(</span><span class="nd">@Valid</span> <span class="n">User</span> <span class="n">user</span><span class="o">,</span> <span class="n">Errors</span> <span class="n">errors</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>看到没，在我们的领域对象User上有一个注解@Valid，它是JSR-303标准API提供的。</p>

<p>在Spring3.0之后，Spring MVC提供了一种能力可以让Controller输入参数进行自动的校验，之前后需要我们自己去触发校验逻辑。方法就是在输入参数加一个@Valid注解。</p>

<p>关于Spring Validation与JSR-303的结合使用，暂时到这里，我们再来看点别的。如果你也在学习Spring的Validation，那么你肯定会看到Spring的文档的第六章（ <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html">http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html</a> ）。</p>

<p>它没有像我这样讲解Errors对象，讲解form怎么显示错误信息，而是介绍了一个Validator接口。那它是什么呢？</p>

<p>如果你有看它的API的解释，它会告诉你，它只是一个单纯的接口，期待将校验逻辑与web层，数据访问层解耦，它提供两个方法supports和validate。</p>

<p>根据它在指南中给的信息，我写出来下面的这段代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">springview</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">controller</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.springview.demo.domain.Account</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.springview.demo.validator.AccountValidator</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.validation.Errors</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.validation.Valid</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">bind</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">bind</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValidatorController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Autowired</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">AccountValidator</span> <span class="n">accountValidator</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">VALIDATOR</span> <span class="o">=</span> <span class="s">&quot;validator&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">VALIDATOR_SUCCESS</span> <span class="o">=</span> <span class="s">&quot;validator-success&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;validator&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">GET</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">view</span><span class="o">(</span><span class="n">Account</span> <span class="n">account</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">VALIDATOR</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;validator&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">POST</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">commit</span><span class="o">(</span><span class="n">Account</span> <span class="n">account</span><span class="o">,</span> <span class="n">Errors</span> <span class="n">errors</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">accountValidator</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">account</span><span class="o">,</span> <span class="n">errors</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">errors</span><span class="o">.</span><span class="na">hasErrors</span><span class="o">()</span> <span class="o">?</span> <span class="n">VALIDATOR</span> <span class="o">:</span> <span class="n">VALIDATOR_SUCCESS</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">springview</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">validator</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.springview.demo.domain.Account</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.validation.Errors</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.validation.ValidationUtils</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.validation.Validator</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AccountValidator</span> <span class="kd">implements</span> <span class="n">Validator</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Account</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">validate</span><span class="o">(</span><span class="n">Object</span> <span class="n">target</span><span class="o">,</span> <span class="n">Errors</span> <span class="n">errors</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ValidationUtils</span><span class="o">.</span><span class="na">rejectIfEmpty</span><span class="o">(</span><span class="n">errors</span><span class="o">,</span> <span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;NotEmpty.account.name&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">ValidationUtils</span><span class="o">.</span><span class="na">rejectIfEmpty</span><span class="o">(</span><span class="n">errors</span><span class="o">,</span> <span class="s">&quot;password&quot;</span><span class="o">,</span> <span class="s">&quot;NotEmpty.account.password&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>和我写的第一个例子比较，是不是很简洁，将校验逻辑和Controller分离。</p>

<p>等等，你这只是分了一个Service层来专门做校验，你在Controller层还是手动触发了校验逻辑，哪里像Validator API中说的那么理想，完全解耦了。</p>

<p>那是因为我写错了，正确的写法应该是这样的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">springview</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">controller</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.springview.demo.domain.Account</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.springview.demo.validator.AccountValidator</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.validation.Errors</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.WebDataBinder</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.InitBinder</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.validation.Valid</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">bind</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">bind</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValidatorController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Autowired</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">AccountValidator</span> <span class="n">accountValidator</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">VALIDATOR</span> <span class="o">=</span> <span class="s">&quot;validator&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">VALIDATOR_SUCCESS</span> <span class="o">=</span> <span class="s">&quot;validator-success&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@InitBinder</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initBinder</span><span class="o">(</span><span class="n">WebDataBinder</span> <span class="n">binder</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">binder</span><span class="o">.</span><span class="na">setValidator</span><span class="o">(</span><span class="n">accountValidator</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;validator&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">GET</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">view</span><span class="o">(</span><span class="n">Account</span> <span class="n">account</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">VALIDATOR</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;validator&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">POST</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">commit</span><span class="o">(</span><span class="nd">@Valid</span> <span class="n">Account</span> <span class="n">account</span><span class="o">,</span> <span class="n">Errors</span> <span class="n">errors</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">errors</span><span class="o">.</span><span class="na">hasErrors</span><span class="o">()</span> <span class="o">?</span> <span class="n">VALIDATOR</span> <span class="o">:</span> <span class="n">VALIDATOR_SUCCESS</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码说明了两件事情：</p>

<p>1.我在Account的前面加了@Valid，导致自动触发校验过程<br/>
2.校验逻辑是由我写的Validator实现</p>

<p>你先不要去想@InitBinder是干什么，简单的说，它是Controller中的一个回调函数，Controller容器会在Controller的生命周期的某个阶段调用它。</p>

<p>WebDataBinder到是可以看看，它是web请求参数转换为JavaBean对象时，使用的特殊的数据绑定（DataBinder）对象。因为我们这里不涉及到数据绑定的内容，所以不细聊，但是你可以想象，该数据绑定的过程，必然在进入Controller的某个请求方法之前完成的（因为Spring必须在给我们注入领域对象啊）。</p>

<h3><strong>回头想一个问题</strong></h3>

<p>好了，如果这里你想清楚了，可以再回头想一个问题，前面使用JSR-303方式定义校验，怎么没有定义一个Validator呢？</p>

<p>原因在这个对象：LocalValidatorFactoryBean，它是Spring为支持JSR-303标准专门实现的一个类，为了同时支持Spring的Validation机制和JSR-303，它同时实现了Spring的Validator接口和JSR-303中Validator接口（这两个不一样哦）。</p>

<p>那么，如果我要使用JSR-303标准，需要显示的在容器中声明这个bean吗？需要也不需要。</p>

<p>在你的xxx-servlet.xml中定义的&lt;mvc:annotation-driven/>标签会帮你声明。</p>

<p>所以如果你在initBinder方法那打个断点，你可以看到WebDataBinder中的Validator对象就是LocalValidatorFactoryBean。</p>

<p>现在是不是比较清楚了？</p>

<h2><strong>再讲一个重要的东西</strong></h2>

<p>还需要再讲一个东西：MessageCodesResolver和DefaultMessageCodesResolver</p>

<p>MessageCodesResolver是从Validation的ErrorCode映射到MessageCode的策略接口，被DataBinder使用，给ObjectErrors和FieldErrors构建MessageCode列表。</p>

<p>DefaultMessageCodesResolver是MessageCodesResolver提供的一个默认实现。</p>

<p>策略是：</p>

<p>针对object的错误，会去找两种错误信息码：</p>

<p>1.code + &ldquo;.&rdquo; + object name<br/>
2.code</p>

<p>针对field的错误，会去找三种错误信息码：</p>

<p>1.code + &ldquo;.&rdquo; + object name + &ldquo;.&rdquo; + field<br/>
2.code + &ldquo;.&rdquo; + field<br/>
3.code + &ldquo;.&rdquo; + field type<br/>
4.code</p>

<p>举例来说：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//field, error code, default message</span>
</span><span class='line'><span class="n">errors</span><span class="o">.</span><span class="na">rejectValue</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;NotEmpty&quot;</span><span class="o">,</span> <span class="s">&quot;name is empty&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">errors</span><span class="o">.</span><span class="na">rejectValue</span><span class="o">(</span><span class="s">&quot;password&quot;</span><span class="o">,</span> <span class="s">&quot;NotEmpty&quot;</span><span class="o">,</span> <span class="s">&quot;password is empty&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">errors</span><span class="o">.</span><span class="na">reject</span><span class="o">(</span><span class="s">&quot;Invalid&quot;</span><span class="o">,</span> <span class="s">&quot;Customer is invalid&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//messages.properties</span>
</span><span class='line'><span class="n">NotEmpty</span><span class="o">=</span><span class="n">Name</span> <span class="n">is</span> <span class="n">required</span>
</span><span class='line'><span class="n">NotEmpty</span><span class="o">.</span><span class="na">password</span><span class="o">=</span><span class="n">Password</span> <span class="n">is</span> <span class="n">required</span>
</span><span class='line'><span class="n">Invalid</span><span class="o">=</span><span class="n">Customer</span> <span class="n">is</span> <span class="n">invalid</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，如果你回过头去，看我写的第一个例子，实际上，它是使用的最后一个策略。</p>

<p>好了，关于Spring Validation的基本内容到此为止，应该比较清楚了，如果你要正确使用它，应该没有任何问题。</p>

<p>其实，我很早就想写这篇文章，一直拖到在项目上遇到问题，才促使我完成，实在惭愧。希望这篇文章对大家有所帮助</p>

<p>参考资料：</p>

<p>1.<a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html">http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html</a></p>

<p>2.<a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/view.html">http://docs.spring.io/spring/docs/current/spring-framework-reference/html/view.html</a></p>

<p>3.<a href="http://docs.spring.io/spring/docs/2.5.x/api/org/springframework/validation/package-summary.html">http://docs.spring.io/spring/docs/2.5.x/api/org/springframework/validation/package-summary.html</a></p>

<p>4.<a href="http://docs.huihoo.com/spring/3.0.x/en-us/ch05s07.html">http://docs.huihoo.com/spring/3.0.x/en-us/ch05s07.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再次了解JDBC（下）- 事务]]></title>
    <link href="http://benweizhu.github.io/blog/2014/07/13/learning-jdbc-transaction/"/>
    <updated>2014-07-13T13:37:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/07/13/learning-jdbc-transaction</id>
    <content type="html"><![CDATA[<p>事务就是将一条或者多条语句作为一个单元一起执行，要么全部执行，要么全都不执行。</p>

<p>如果你读过数据库的书，肯定知道数据库事务有四个基本特性：原子性，一致性，隔离性，持久性。</p>

<p>在JDBC中，事务的操作建立在Connection对象上，Connection对象提供了与事务相关的操作函数，例如：setAutoCommit()，commit()，rollback()等。</p>

<h2><strong>autocommit</strong></h2>

<p>JDBC Connection默认的情况是AutoCommit模式，即每一条SQL语句在执行完之后都会提交到数据库中。对于简单的应用是可以的，但是关闭自动提交模式，由自己管理实务是有必要的，提高执行效率，保证业务处理过程完整性，使用分布式事务。</p>

<p>事务可以让你控制对数据库的改变，它将一条或多条SQL语句作为一个逻辑单元，如果任何一条语句失败，则整个事务失败。</p>

<p>关闭自动提交模式的方法很简单，调用setAutoCommit()方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">connection</span><span class="o">.</span><span class="na">setAutoCommit</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2><strong>commit &amp; rollback</strong></h2>

<p>一旦你完成了对数据库的改变操作，你需要执行commit()方法来提交改变，当执行过程中出现异常，你需要执行rollback()方法来回滚该事物。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">connection</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">connection</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用rollback方法会终结一个事务，并返回到数据被修改之前的值。如果你尝试在一个事务中去执行一条或多条语句，结果得到一个SQLException，调用rollback去结束一个事务，然后重新开始事务。这是唯一知道什么被提交，什么没有被提交的办法。因为捕获到SQLException会告诉你什么样的错误发生了，但是不会告诉你什么已经提交，什么没有。回滚是唯一的可靠办法。</p>

<h2><strong>完整性</strong></h2>

<p>除了将语句分组以一个单元统一执行，事务还帮助保证一张表中数据的完整性。事务会提供某种程度的保护，以防止两个用户同时访问数据时，造成的冲突。</p>

<p>DBMS会使用锁机制，来防止其他用户对已经被事务访问的数据进行访问。一旦加锁，它会强制保证不变直到事务被提交。锁机制的目的是防止用户读到脏数据，也就是读到一些还没有被永久保存的数据（访问一个被更新但是还没有被提交的值，被认为是访问到脏数据，因为这个值很有可能会被回滚到以前的结果，那么你读到的值就是无效的）。</p>

<p>锁是如何被设置的是由一个叫做事务隔离级别决定的。举例来说，如果事务隔离级别被设置为TRANSACTION_READ_COMMITTED，那么它就不会允许数据被访问，直到事务提交。换句话说，DBMS不允许读取脏数据的事件发生。</p>

<p>TRANSACTION_NONE JDBC 驱动不支持事务<br/>
TRANSACTION_READ_UNCOMMITTED 允许脏读，不可重复读和幻读。<br/>
TRANSACTION_READ_COMMITTED 禁止脏读，但允许不可重复读和幻读。<br/>
TRANSACTION_REPEATABLE_READ 禁止脏读和不可重复读，单运行幻读。<br/>
TRANSACTION_SERIALIZABLE 禁止脏读，不可重复读和幻读。</p>

<p>不可重复读的场景发生在事务A读取一行数据，事务B后续的改变了这一行，当事务A再次去读时，两次读取的事务就不一致了。</p>

<p>幻读的场景是事务A读取到满足一定条件的一部分数据，事务B后续插入或者更新了一行数据，但是同样满足该条件，此时A再去读取发现多了一行数据。</p>

<p>通常，你不需要对事务隔离级别做任何操作，只要使用默认的即可，但默认值取决于DBMS。例如，对于Java数据库，默认值是TRANSACTION_READ_COMMITTED。JDBC允许你获取和改变该级别，方法是getTransactionIsolation()和setTransactionIsolation()。</p>

<p>参考资料：</p>

<p><a href="http://docs.oracle.com/javase/tutorial/jdbc/basics/transactions.html">http://docs.oracle.com/javase/tutorial/jdbc/basics/transactions.html</a></p>

<p><a href="http://www.tutorialspoint.com/jdbc/jdbc-transactions.htm">http://www.tutorialspoint.com/jdbc/jdbc-transactions.htm</a></p>

<p><a href="http://blog.csdn.net/chenyongsuda/article/details/5641412">http://blog.csdn.net/chenyongsuda/article/details/5641412</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再次了解JDBC（中）- 引入JNDI]]></title>
    <link href="http://benweizhu.github.io/blog/2014/07/07/learning-jdbc-with-jndi/"/>
    <updated>2014-07-07T13:56:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/07/07/learning-jdbc-with-jndi</id>
    <content type="html"><![CDATA[<h2><strong>什么是命名服务？什么是目录服务？什么是命名服务的上下文？</strong></h2>

<p>命名服务NS（Naming Service）是命名系统提供的服务功能，通过名字访问命名系统中的对象。</p>

<p>目录服务DS(Directory Service)是命名服务的扩展，它不仅把名字与对象对应在一起，并且把名字与对象属性(Attribute) 联系在一起，因此不仅可以通过名字还可以通过属性来搜索对象。</p>

<p>对象名与对应的对象构成的集合叫对象上下文（Context）。
例如，在文件命名系统中，一个目录就是一个Context，其内容是文件名（名）和对应的文件的集合。</p>

<h2><strong>那什么是JNDI？</strong></h2>

<p>Java Naming and Dirctory Interface - Java命名和目录接口，它是sun公司提出的方便应用程序访问命名和目录服务的的API。</p>

<p>和其他设计一样，JNDI是接口API，它独立于任何命名或者目录服务的具体实现。这样，你就可以用相同的API去访问多种不同类型的命名和目录服务。</p>

<p>根据它们作用的不同，典型应用场景也就分为两个部分：</p>

<p>（1）将Java应用程序连接到外部的目录服务。</p>

<p>（2）允许Java的Servlet在web容器中寻找定义配置信息。</p>

<p>JNDI的架构是有一套API和一套SPI（Service Provider Interface）接口组成。Java应用程序使用JNDI API来访问不同的命名和目录服务。SPI则让不同的命名和目录服务可以透明和无缝插入，这样Java应用程序才能使用JNDI API来访问它们的服务。</p>

<p><img class="center" src="http://benweizhu.github.io/../images/jndi/arch.png"></p>

<p>JNDI是包含在Java SE平台中。要使用JNDI，你必须有JNDI的类库和一个到多个服务提供商。JDK本身包含一些服务提供商：</p>

<p>Lightweight Directory Access Protocol (LDAP)<br/>
Common Object Request Broker Architecture (CORBA) Common Object Services (COS) name service<br/>
Java Remote Method Invocation (RMI) Registry<br/>
Domain Name Service (DNS)</p>

<p>JNDI API是访问任何命名或者目录服务的通用API。实际访问一个命名或目录服务需要在JNDI下插入一个服务提供商。</p>

<p>服务提供商是一个映射到JNDI API能实际调用命名或目录服务器的软件。一般情况，服务提供商的角色和命名或目录服务器的角色是不一样的。从C/S软件角度说，JNDI和服务器提供商是JNDI的客户端，命名或者目录服务器是服务端。</p>

<p>客户端和服务器端交互的方式有很多。一种比较常用的方式是，使用网络协议。而服务器通常支持不同的客户端，不仅仅是JNDI的客户端，只是它们要遵循不同协议。JNDI也不规定JNDI客户端和服务端交互的方式。</p>

<h2><strong>JDNI的Context（上下文）</strong></h2>

<p>上下文这个概念在Java的开发中经常出现，比如，ServletContext，Spring的Context，Android中也有Context，JNDI也不例外。</p>

<p>JNDI的上下文，依赖于一个重要的接口Context和一个重要的类InitialContext</p>

<p>Context接口 它表示一个命名上下文，由一组名称到对象的绑定组成。它提供了查找，绑定，重命名，创建和销毁子上下文的接口。</p>

<p>InitialContext类 所有命名操作都相对于某一上下文，它是JNDI提供的，执行命名和目录操作的初始上下文，是根上下文，为命名和目录服务提供起点。一旦你有了初始化上下文，你就可以去查找其他的上下文和对象。</p>

<h2><strong>JNDI的环境变量</strong></h2>

<p>JNDI需要定义许多环境变量来说明访问什么样的命名和目录服务。</p>

<p>而为了简化设置JNDI应用需要的环境变量，应用程序组件和服务提供商会和资源文件一起发布。JNDI的资源文件就是常用的properties文件格式，包含的是键值对。</p>

<p>JNDI的资源文件有两种类型：provider和application</p>

<p>每个服务商都有一个可选的资源文件：[prefix/]jndiprovider.properties，这个prefix前缀是context实现类的包名。例如：</p>

<p>com.sun.jndi.ldap.LdapCtx对应的资源文件是com/sun/jndi/ldap/jndiprovider.properties</p>

<p>JNDI会使用ClassLoader.getResources()方法在应用程序的所有资源文件中查找一个叫jndi.properties的文件。该文件中定义的所有属性都会放到InitialContext里面，而其他的Context会继承自该InitialContext。</p>

<p>当InitialContext被构建时，它的环境会被初始化，要么通过传递进来的HashMap参数，要么通过定义的Java应用properties文件。而IntialContext的具体实现是在运行时决定的，默认的策略是使用环境变量“java.naming.factory.initial”定义的InitContextFactory（工厂类）。</p>

<p><strong>回到我们的例子当中：</strong></p>

<p>那么在<a href="http://benweizhu.github.io/blog/2014/07/06/learning-jdbc/" title="再次了解JDBC（上）">上一篇</a>中，DataSource API文档里提到的“实现DataSource接口的对象通常在基于JavaTM Naming and Directory Interface(JNDI) API的命名服务中注册。”就是JNDI的第二种应用方式。</p>

<p>我们使用的Apache Common的DBCP作为DataSource的实现，而DBCP也是Tomcat的数据库连接池组建，所以针对它，我么可以使用Tomcat实现的JNDI服务。</p>

<p>首先需要把上一篇中的例子改为一个Java Web应用。</p>

<p>定义Context.xml，位置在webapp/META-INF/context.xml</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39;?&gt;</span>
</span><span class='line'><span class="nt">&lt;Context&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Resource</span> <span class="na">name=</span><span class="s">&quot;jdbc/mysql/bookshelf&quot;</span> <span class="na">auth=</span><span class="s">&quot;Container&quot;</span> <span class="na">type=</span><span class="s">&quot;javax.sql.DataSource&quot;</span>
</span><span class='line'>              <span class="na">maxActive=</span><span class="s">&quot;100&quot;</span> <span class="na">maxIdle=</span><span class="s">&quot;30&quot;</span> <span class="na">maxWait=</span><span class="s">&quot;10000&quot;</span>
</span><span class='line'>              <span class="na">username=</span><span class="s">&quot;root&quot;</span> <span class="na">password=</span><span class="s">&quot;&quot;</span> <span class="na">driverClassName=</span><span class="s">&quot;com.mysql.jdbc.Driver&quot;</span>
</span><span class='line'>              <span class="na">url=</span><span class="s">&quot;jdbc:mysql://localhost:3306/bookshelf&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/Context&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在JDNI中，对象是一种资源，Tomcat指定资源的入口出在<Context>元素中，有两个位置可以定义，一个是在$CATALINA_BASE/conf/server.xml，一个是在每个web应用需的META-INF/context.xml中。前一种方式，Tomcat容器中所有的Web应用都可以使用，算是一种全局的资源。不过一般第二种方式会更好。</p>

<p>我在使用第一种方式的时候，遇到了MySQL的Driver文件找不到的问题，应该是需要将MySQL的驱动拷贝的Tomcat的lib下。</p>

<p>定义web.xml文件，位置在webapp/WEB-INF/web.xml</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;web-app</span> <span class="na">version=</span><span class="s">&quot;2.4&quot;</span>
</span><span class='line'>         <span class="na">xmlns=</span><span class="s">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span>
</span><span class='line'>         <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>         <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://java.sun.com/xml/ns/j2ee</span>
</span><span class='line'><span class="s">        http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>helloDataSource<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-class&gt;</span>me.zeph.jdbc.example.servlet.HelloDataSourceServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>helloDataSource<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url-pattern&gt;</span>/helloDataSource<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet-mapping&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;resource-ref&gt;</span>
</span><span class='line'>        <span class="nt">&lt;description&gt;</span>DB Connection<span class="nt">&lt;/description&gt;</span>
</span><span class='line'>        <span class="nt">&lt;res-ref-name&gt;</span>jdbc/mysql/bookshelf<span class="nt">&lt;/res-ref-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;res-type&gt;</span>javax.sql.DataSource<span class="nt">&lt;/res-type&gt;</span>
</span><span class='line'>        <span class="nt">&lt;res-auth&gt;</span>Application<span class="nt">&lt;/res-auth&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/resource-ref&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/web-app&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>光定义资源还不行，web应用必须要有个办法知道资源有哪些？所以需要在web.xml定义资源的引用。</p>

<p>此时，获取Connection的方式就可以换成JNDI的方式了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">jdbc</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">dao</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.jdbc.example.model.Book</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.naming.Context</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.naming.InitialContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.naming.NamingException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.sql.Connection</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.sql.ResultSet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.sql.SQLException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.sql.Statement</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookDaoWithDS</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Book</span> <span class="nf">findBookByISBN</span><span class="o">(</span><span class="kt">int</span> <span class="n">isbn</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Statement</span> <span class="n">statement</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">connection</span> <span class="o">=</span> <span class="n">getConnection</span><span class="o">();</span>
</span><span class='line'>          <span class="n">statement</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span>
</span><span class='line'>          <span class="n">book</span> <span class="o">=</span> <span class="n">getBook</span><span class="o">(</span><span class="n">statement</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">(</span><span class="n">getQuerySqlFor</span><span class="o">(</span><span class="n">isbn</span><span class="o">)));</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">statement</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">statement</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">connection</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">book</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Connection</span> <span class="nf">getConnection</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">DataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">InitialContext</span> <span class="n">initialContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">InitialContext</span><span class="o">();</span>
</span><span class='line'>          <span class="n">Context</span> <span class="n">envContext</span> <span class="o">=</span> <span class="o">(</span><span class="n">Context</span><span class="o">)</span> <span class="n">initialContext</span><span class="o">.</span><span class="na">lookup</span><span class="o">(</span><span class="s">&quot;java:/comp/env&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">dataSource</span> <span class="o">=</span> <span class="o">(</span><span class="n">DataSource</span><span class="o">)</span> <span class="n">envContext</span><span class="o">.</span><span class="na">lookup</span><span class="o">(</span><span class="s">&quot;jdbc/mysql/bookshelf&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NamingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="nf">getQuerySqlFor</span><span class="o">(</span><span class="kt">int</span> <span class="n">isbn</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;select * from book where isbn = &quot;</span> <span class="o">+</span> <span class="n">isbn</span> <span class="o">+</span> <span class="s">&quot;;&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Book</span> <span class="nf">getBook</span><span class="o">(</span><span class="n">ResultSet</span> <span class="n">resultSet</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">book</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Book</span><span class="o">();</span>
</span><span class='line'>          <span class="n">book</span><span class="o">.</span><span class="na">setIsbn</span><span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'>          <span class="n">book</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
</span><span class='line'>          <span class="n">book</span><span class="o">.</span><span class="na">setPrice</span><span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">getDouble</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>
</span><span class='line'>          <span class="n">book</span><span class="o">.</span><span class="na">setAuthor</span><span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">4</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">book</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里你可以将java.naming.factory.initial和java.naming.factory.url.pkgs打印出来，结果是：org.apache.naming.java.javaURLContextFactory和org.apache.naming。</p>

<p>java.naming.factory.url.pkgs的作用是告诉JNDI去哪个包下面，找满足java.javaURLContextFactory的类。</p>

<p>你应该还看到一点有点疑惑，我的资源名字命名就是：jdbc/mysql/bookshelf，为什么前面还有java:/comp/env。</p>

<p>java:/comp/env是环境命名上下文，是针对Java EE组件中使用JNDI引入的，目的是为了防止冲突。Java EE环境下，被访问的系统或者用户定义的对象都是存储在java:comp/env的环境命名上下文中。</p>

<p>到此，我们实现了JNDI的引入，可以通过JNDI来配置DataSource，此时，如果我们希望从MySQL迁移到Oracle就不需要修改Java代码，只需要更改一下配置文件即可，这也就是JNDI的好处。</p>

<p>再下一篇，我们继续讨论，JDBC的事务。</p>

<p>参考资料：</p>

<p><a href="http://docs.oracle.com/javase/tutorial/jndi/overview/index.html">http://docs.oracle.com/javase/tutorial/jndi/overview/index.html</a></p>

<p><a href="http://tomcat.apache.org/tomcat-7.0-doc/jndi-resources-howto.html">http://tomcat.apache.org/tomcat-7.0-doc/jndi-resources-howto.html</a></p>

<p><a href="http://docs.oracle.com/javase/jndi/tutorial/">http://docs.oracle.com/javase/jndi/tutorial/</a></p>

<p><a href="http://docs.oracle.com/javase/8/docs/api/javax/naming/Context.html">http://docs.oracle.com/javase/8/docs/api/javax/naming/Context.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再次了解JDBC（上）- 从Class.forName到DataSource]]></title>
    <link href="http://benweizhu.github.io/blog/2014/07/06/learning-jdbc-from-class-forname-to-datasource/"/>
    <updated>2014-07-06T18:21:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/07/06/learning-jdbc-from-class-forname-to-datasource</id>
    <content type="html"><![CDATA[<p>JDBC（Java Data Base Connectivity，Java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。</p>

<h2><strong>API</strong></h2>

<p>先来了解JDBC中几个非常重要的API（以下内容来自JDBC API中文文档，但未完全拷贝，建议还是阅读一下）：</p>

<p><strong>java.sql.DriverManager（类）</strong>：管理一组 JDBC 驱动程序的基本服务。（注：DataSource 接口是 JDBC 2.0 API 中的新增内容，它提供了连接到数据源的另一种方法。使用 DataSource 对象是连接到数据源的首选方法。）作为初始化的一部分，DriverManager 类会尝试加载在 &ldquo;jdbc.drivers&rdquo; 系统属性中引用的驱动程序类。这允许用户定制由他们的应用程序使用的 JDBC Driver。应用程序不再需要使用 Class.forName() 显式地加载 JDBC 驱动程序。当前使用 Class.forName() 加载 JDBC 驱动程序的现有程序将在不作修改的情况下继续工作。在调用getConnection方法时，DriverManager会试着从初始化时加载的那些驱动程序以及使用与当前applet或应用程序相同的类加载器显式加载的那些驱动程序中查找合适的驱动程序。</p>

<p><strong>java.sql.Connection（接口）</strong>：与特定数据库的连接（会话）。在连接上下文中执行 SQL 语句并返回结果。（注：在配置 Connection 时，JDBC 应用程序应该使用适当的Connection方法，比如setAutoCommit或setTransactionIsolation。在有可用的JDBC方法时，应用程序不能直接调用 SQL 命令更改连接的配置。默认情况下，Connection对象处于自动提交模式下，这意味着它在执行每个语句后都会自动提交更改。如果禁用了自动提交模式，那么要提交更改就必须显式调用commit方法；否则无法保存数据库更改。）</p>

<p><strong>java.sql.Statement（接口）</strong>：用于执行静态SQL语句并返回它所生成结果的对象。</p>

<p><strong>java.sql.ResultSet（接口）</strong>：表示数据库结果集的数据表，通常通过执行查询数据库的语句生成。ResultSet对象具有指向其当前数据行的光标。最初，光标被置于第一行之前。next方法将光标移动到下一行；因为该方法在ResultSet对象没有下一行时返回false，所以可以在while循环中使用它来迭代结果集。默认的ResultSet对象不可更新，仅有一个向前移动的光标。因此，只能迭代它一次，并且只能按从第一行到最后一行的顺序进行。ResultSet 接口提供用于从当前行获取列值的获取方法（getBoolean、getLong 等）。可以使用列的索引编号或列的名称获取值。一般情况下，使用列索引较为高效。列从1开始编号。为了获得最大的可移植性，应该按从左到右的顺序读取每行中的结果集列，每列只能读取一次。对于获取方法，JDBC 驱动程序尝试将底层数据转换为在获取方法中指定的Java类型，并返回适当的Java值。JDBC规范有一个表，显示允许的从SQL类型到ResultSet获取方法所使用的Java类型的映射关系。</p>

<p><strong>java.sql.Driver（接口）</strong>：每个驱动程序类必须实现的接口。Java SQL框架允许多个数据库驱动程序。每个驱动程序都应该提供一个实现 Driver 接口的类。DriverManager会试着加载尽可能多的它可以找到的驱动程序，然后，对于任何给定连接请求，它会让每个驱动程序依次试着连接到目标URL。强烈建议每个Driver类应该是小型的并且是单独的，这样就可以在不必引入大量支持代码的情况下加载和查询Driver类。在加载某一Driver类时，它应该创建自己的实例并向DriverManager注册该实例。这意味着用户可以通过调用以下程序加载和注册一个驱动程序Class.forName(&ldquo;foo.bah.Driver&rdquo;)。</p>

<p>来看一段比较老式风格的JDBC代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">jdbc</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">dao</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.jdbc.example.model.Book</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.sql.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookDaoWithDM</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">url</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">driverName</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">BookDaoWithDM</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">,</span> <span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="n">String</span> <span class="n">driverName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">url</span> <span class="o">=</span> <span class="n">url</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">driverName</span> <span class="o">=</span> <span class="n">driverName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Book</span> <span class="nf">findBookByISBN</span><span class="o">(</span><span class="kt">int</span> <span class="n">isbn</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Statement</span> <span class="n">statement</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">connection</span> <span class="o">=</span> <span class="n">getConnection</span><span class="o">();</span>
</span><span class='line'>          <span class="n">statement</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span>
</span><span class='line'>          <span class="n">book</span> <span class="o">=</span> <span class="n">getBook</span><span class="o">(</span><span class="n">statement</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">(</span><span class="n">getQuerySqlFor</span><span class="o">(</span><span class="n">isbn</span><span class="o">)));</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">statement</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">statement</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">connection</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">book</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Connection</span> <span class="nf">getConnection</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">driverName</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="nf">getQuerySqlFor</span><span class="o">(</span><span class="kt">int</span> <span class="n">isbn</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;select * from book where isbn = &quot;</span> <span class="o">+</span> <span class="n">isbn</span> <span class="o">+</span> <span class="s">&quot;;&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Book</span> <span class="nf">getBook</span><span class="o">(</span><span class="n">ResultSet</span> <span class="n">resultSet</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">book</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Book</span><span class="o">();</span>
</span><span class='line'>          <span class="n">book</span><span class="o">.</span><span class="na">setIsbn</span><span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'>          <span class="n">book</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
</span><span class='line'>          <span class="n">book</span><span class="o">.</span><span class="na">setPrice</span><span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">getDouble</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>
</span><span class='line'>          <span class="n">book</span><span class="o">.</span><span class="na">setAuthor</span><span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">4</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">book</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">jdbc</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">dao</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.jdbc.example.model.Book</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Before</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">CoreMatchers</span><span class="o">.</span><span class="na">is</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">CoreMatchers</span><span class="o">.</span><span class="na">nullValue</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookDaoWithDMTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&quot;jdbc:mysql://localhost:3306/bookshelf&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">&quot;username&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">driverName</span> <span class="o">=</span> <span class="s">&quot;com.mysql.jdbc.Driver&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">BookDaoWithDM</span> <span class="n">bookDaoWithDM</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Before</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">bookDaoWithDM</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BookDaoWithDM</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">,</span> <span class="n">driverName</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldFindBookFromDatabaseWhenISBNIs12</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//when</span>
</span><span class='line'>      <span class="n">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="n">bookDaoWithDM</span><span class="o">.</span><span class="na">findBookByISBN</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//then</span>
</span><span class='line'>      <span class="n">assertThat</span><span class="o">(</span><span class="n">book</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;benwei&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldNotFindBookFromDatabaseWhenISBNIs1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//when</span>
</span><span class='line'>      <span class="n">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="n">bookDaoWithDM</span><span class="o">.</span><span class="na">findBookByISBN</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//then</span>
</span><span class='line'>      <span class="n">assertThat</span><span class="o">(</span><span class="n">book</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="n">nullValue</span><span class="o">()));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">jdbc</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">model</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">isbn</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">double</span> <span class="n">price</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">author</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setIsbn</span><span class="o">(</span><span class="kt">int</span> <span class="n">isbn</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">isbn</span> <span class="o">=</span> <span class="n">isbn</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getIsbn</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">isbn</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPrice</span><span class="o">(</span><span class="kt">double</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">price</span> <span class="o">=</span> <span class="n">price</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getPrice</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">price</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAuthor</span><span class="o">(</span><span class="n">String</span> <span class="n">author</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">author</span> <span class="o">=</span> <span class="n">author</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAuthor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">author</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><strong>Class.forName()</strong></h2>

<p>上面这个例子是很普通的JDBC编程，这里有一点要讲的，那就是DriverManager会加载注册到它自己的Driver。但是，在上面的例子中，好像没有看到哪里有显示的注册Driver到DriverManager。为什么DriverManager能够找到MySQL的Driver呢？</p>

<p>回头看API文档中的一句话：</p>

<p>“这意味着用户可以通过调用以下程序加载和注册一个驱动程序Class.forName(&ldquo;foo.bah.Driver&rdquo;)。”。</p>

<p>我们知道Class.forName()方法是将一个指定名字的Class加载到JVM中。这和注册Driver有什么关系呢？看下MySQL实现的Driver源码你就明白了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">mysql</span><span class="o">.</span><span class="na">jdbc</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.sql.SQLException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Driver</span> <span class="kd">extends</span> <span class="n">NonRegisteringDriver</span> <span class="kd">implements</span> <span class="n">java</span><span class="o">.</span><span class="na">sql</span><span class="o">.</span><span class="na">Driver</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">java</span><span class="o">.</span><span class="na">sql</span><span class="o">.</span><span class="na">DriverManager</span><span class="o">.</span><span class="na">registerDriver</span><span class="o">(</span><span class="k">new</span> <span class="nf">Driver</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">E</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Can&#39;t register driver!&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Driver</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>原来在这个Driver实现类中一段静态代码块，在类加载时，会被执行，此时就实现了将自己注册到DriverManager。</p>

<h2><strong>DataSource</strong></h2>

<p>OK，继续，前面的API文档中提到，目前一种更好的连接到数据源也就是获得Connection的方式是使用DataSource。我们来看下DataSource是什么？同样，先来读一下DataSource的API文档。</p>

<p><strong>javax.sql.DataSource（接口）</strong>：该工厂用于提供到此DataSource对象所表示的物理数据源的连接（A factory for connections to the physical data source that this DataSource object represents.）。作为 DriverManager工具的替代项，DataSource对象是获取连接的首选方法。实现DataSource接口的对象通常在基于JavaTM Naming and Directory Interface(JNDI) API的命名服务中注册。</p>

<p>DataSource接口由驱动程序供应商实现。共有三种类型的实现：</p>

<p>基本实现 - 生成标准的Connection对象<br/>
连接池实现 - 生成自动参与连接池的Connection对象。此实现与中间层连接池管理器一起使用。<br/>
分布式事务实现 - 生成一个Connection对象，该对象可用于分布式事务，大多数情况下总是参与连接池。此实现与中间层事务管理器一起使用，大多数情况下总是与连接池管理器一起使用。</p>

<p>DataSource对象的属性在必要时可以修改。例如，如果将数据源移动到另一个服务器，则可更改与服务器相关的属性。其优点在于，由于可以更改数据源的属性，所以任何访问该数据源的代码都无需更改。</p>

<p>通过DataSource对象访问的驱动程序本身不会向DriverManager注册。通过查找操作获取DataSource对象，然后使用该对象创建Connection对象。使用基本的实现，通过DataSource对象获取的连接与通过DriverManager设施获取的连接相同。</p>

<p>——————————————————————————————————————————————————————</p>

<p>上面提到了几点：</p>

<p>1.使用JNDI方式注册DataSource，然后在使用时根据名字将DataSource取出。<br/>
2.通过DataSource对象访问的驱动程序本身不会向DriverManager注册。</p>

<p>JNDI(Java Naming and Directory Interface，Java命名和目录接口)是一组在Java应用中访问命名和目录服务的API。命名服务将名称和对象联系起来，使得我们可以用名称访问对象。不过在本文中暂时不去涉及这个内容。</p>

<p>DataSource是一个接口，那么它的实现者有哪些呢？有一个比较常用的，Apache Commons的DBCP（Database Connection Pool），它是Apache Commons提供的一种数据库连接池组件，也是tomcat的数据库连接池组件。（回头看一下API文档上说的三种实现类型的第二种）。</p>

<p>将上面例子中使用DriverManager创建连接的方式，换成使用DataSource非常简单，替换上面的getConnection方法。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Connection</span> <span class="nf">getConnection</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">BasicDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BasicDataSource</span><span class="o">();</span>
</span><span class='line'>      <span class="n">dataSource</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span><span class='line'>      <span class="n">dataSource</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
</span><span class='line'>      <span class="n">dataSource</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从这段代码可以看出，映射了上面我说的的第二点，不需要向DriverManager注册，所以这里没有传入MySQL的ClassName。</p>

<p>OK，到此，我们回顾了JDBC最基础的几个接口：DriverManager，Driver，Connection，Statement，ResultSet，以及JDBC推荐的数据库连接方式DataSource。在下一章，我们会继续了解与JDBC相关的核心技术和概念，包括事务，JNDI等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[logger（SLF4j和log4j）]]></title>
    <link href="http://benweizhu.github.io/blog/2014/06/01/slf4j-and-log4j/"/>
    <updated>2014-06-01T12:33:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/06/01/slf4j-and-log4j</id>
    <content type="html"><![CDATA[<h2><strong>SLF4j</strong></h2>

<p>Simple Logging Facade for Java (SLF4J)</p>

<p>SLF4J，简单日志门面（Facade），是各个不同日志框架的抽象，它不是具体的日志解决方案，只服务于各种各样的日志系统，例如java.util.logging, log4j等，它允许最终用户在部署其应用时使用其所希望的日志系统。</p>

<p><strong>什么意思？</strong>SLF4J就像一个接口，是一个门面，在写代码时，我们只需要根据这个接口提供的方法去记录日志。这个接口可以和不同的日志框架绑定，比如Java自带的java.util.logging，或者大家常听到的log4j。这样，你可以在不修改代码的情况下，去替换不同的日志框架。</p>

<p>基本概念明白之后，看下面这个例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.loggerFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">loggerFactory</span><span class="o">.</span><span class="na">getlogger</span><span class="o">(</span><span class="n">HelloWorld</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Hello World&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;org.slf4j:slf4j-api:1.7.7&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出的结果是：</p>

<p>SLF4J: Failed to load class &ldquo;org.slf4j.impl.StaticloggerBinder&rdquo;.<br/>
SLF4J: Defaulting to no-operation (NOP) logger implementation<br/>
SLF4J: See <a href="http://www.slf4j.org/codes.html#StaticloggerBinder">http://www.slf4j.org/codes.html#StaticloggerBinder</a> for further details.</p>

<p>原因是你没有将SLF4j和某一个具体的日志框架绑定。怎么绑定呢？不需要你做任何事情，简单的加一个依赖就可以了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;org.slf4j:slf4j-api:1.7.7&#39;</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;org.slf4j:slf4j-simple:1.7.7&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出是：[main] INFO log.HelloWorld - Hello World</p>

<p><strong>SLF4J支持对很多不同框架的绑定：</strong></p>

<p>slf4j-log4j12-1.7.7.jar<br/>
slf4j-jdk14-1.7.7.jar<br/>
slf4j-nop-1.7.7.jar<br/>
slf4j-simple-1.7.7.jar<br/>
slf4j-jcl-1.7.7.jar</p>

<p><strong>那么有个问题，SLF4J支不支持对多个日志框架的绑定呢？答案是不支持，也感觉一般这是不必要需求。</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;org.slf4j:slf4j-api:1.7.7&#39;</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;org.slf4j:slf4j-simple:1.7.7&#39;</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;org.slf4j:slf4j-log4j12:1.7.7&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<p>SLF4J: Class path contains multiple SLF4J bindings.<br/>
&hellip;</p>

<p><strong>在SLF4J的官方文档上也说明了这点：</strong></p>

<p>“SLF4J does not rely on any special class loader machinery. In fact, each SLF4J binding is hardwired at compile time to use one and only one specific logging framework. For example, the slf4j-log4j12-1.7.7.jar binding is bound at compile time to use log4j. In your code, in addition to slf4j-api-1.7.7.jar, you simply drop one and only one binding of your choice onto the appropriate class path location. Do not place more than one binding on your class path.”</p>

<p>OK，关于SLF4J的内容就到这里，该进入重头戏&ndash;log4J。</p>

<h2><strong>log4j</strong></h2>

<p>log4j相对于SLF4j就复杂许多了，毕竟SLF4j只是接口，log4j则是具体的实现了。</p>

<p>log4j由三个重要的组件组成：</p>

<ol>
<li>类型和级别(logger)</li>
<li>输出目的地(Appender)</li>
<li>输出格式(Layout)</li>
</ol>


<h3><strong>logger</strong></h3>

<p><strong>logger hierarchy（logger的层次级别）</strong></p>

<p><strong>Named Hierarchy（以名字分层）</strong></p>

<p>logger的名字是大小写敏感的，并且根据名字的不同，logger之间存在父子层次关系。举例来说，com.foo是com.foo.bar的父logger，com是com.foo.bar的祖先logger。</p>

<p>在这些logger之间，存在一个root logger，位于这个层次的顶层，它是永久存在，并且不能够通过名字获取，要获取它，只能通过logger.getRootlogger()方法获取。而这样一个层次关系，也决定了logger和logger之间存在着一些继承关系。</p>

<p><strong>Level Inheritance（级别继承）</strong></p>

<p>子类继承父类的级别：如果子类级别没有显示的指定，子类的级别等于第一个级别非空的父类logger的级别，直到追溯到根logger。</p>

<p>前面提到logger的级别，它们分别是TRACE, DEBUG, INFO, WARN, ERROR和FATAL。</p>

<p>这些级别存在高低关系：DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL。</p>

<p>如果你以前有用过一点点log4j，这些级别映射到你的记忆中，一定是反映成logger的各个方法。没错，在logger这个对象中，你会看到很多的打印方法，debug, info, warn, error, fatal和log。</p>

<p><strong>回过头来想想，如果你给一个logger指定了级别，但是你打印日志时，又不是调用对应级别的方法，会发生什么事情呢？</strong></p>

<p>答案是：对这些方法的调用，不光是打印日志信息，也是对logger对象级别改变的请求。</p>

<p>但是，并不是你调用它，级别就一定会改变，对级别改变的请求还是取决于logger对象本身的级别（无论是被显示的指定，还是继承）。如果请求的级别低于该logger当前的级别，那么改变就不会成功。</p>

<h3><strong>Appender</strong></h3>

<p>Appender的作用是指出日志信息的输出位置，比如控制台，文件。而且好处是，你可以给一个logger指定多个appender，比如同时在控制台和文件中输出日志。</p>

<h4><strong>Appender Additivity(附加性)</strong></h4>

<p>每一个Appender都有一个属性，叫做additivity flag，默认是true。什么意思呢？</p>

<p>子类会继承它直接父类的appender（包括该父类自己继承的appender），如果设置为false，则不继承其父类的appender。</p>

<p><strong>这句话应该好理解，那下面这种情况呢？</strong></p>

<table>
<thead>
<tr>
<th style="text-align:left;">Logger </th>
<th style="text-align:center;"> Appender </th>
<th style="text-align:center;"> Additivity</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">root         </td>
<td style="text-align:center;"> A1        </td>
<td style="text-align:center;"> null</td>
</tr>
<tr>
<td style="text-align:left;">appenderFather</td>
<td style="text-align:center;"> A2        </td>
<td style="text-align:center;"> false</td>
</tr>
<tr>
<td style="text-align:left;">appenderFather.appenderChild</td>
<td style="text-align:center;"> A3</td>
<td style="text-align:center;">true</td>
</tr>
</tbody>
</table>


<p>appenderFather的flag设置为了false，所以他拥有的appender的结果应该比较明显，就是A2。</p>

<p>appenderFather.appenderChild的结果应该是什么？答案是A2和A3。因为它只是继承它直接父类的appender。</p>

<p><strong>log4j提供的Appender有哪些呢？</strong></p>

<p>org.apache.log4j.ConsoleAppender（控制台）</p>

<p>org.apache.log4j.FileAppender（文件）</p>

<p>org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）</p>

<p>org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生新文件，用的较多，限制文件大小）</p>

<p>org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</p>

<h3><strong>Layout</strong></h3>

<p>日志信息布局（格式）是log4j提供的另外一个非常有用的特性。</p>

<p><strong>log4j提供四种Layout方式：</strong></p>

<p>org.apache.log4j.HTMLLayout（以HTML表格形式布局），</p>

<p>org.apache.log4j.PatternLayout（可以灵活地指定布局模式，比较常用），</p>

<p>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），</p>

<p>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</p>

<p><strong>log4j采用类似C语言中的printf函数的打印格式格式化日志信息，打印参数如下：</strong></p>

<p>%m 输出代码中指定的消息 　</p>

<p>%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 　　</p>

<p>%r 输出自应用启动到输出该log信息耗费的毫秒数 　　</p>

<p>%c 输出所属的类目，通常就是所在类的全名 　　</p>

<p>%t 输出产生该日志事件的线程名 　　</p>

<p>%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n” 　　</p>

<p>%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921 　　</p>

<p>%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)</p>

<p>%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。</p>

<p>%%: 输出一个”%”字符 %F: 输出日志消息产生时所在的文件名称</p>

<p>%L: 输出代码中的行号</p>

<p>%m: 输出代码中指定的消息,产生的日志具体信息</p>

<p>%n: 输出一个回车换行符，Windows平台为”\r\n”，Unix平台为”\n”输出日志信息换行 可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。</p>

<p>Ok，基本知识就到这里，看一个例子。</p>

<h2><strong>Example</strong></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;org.slf4j:slf4j-api:1.7.7&#39;</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;org.slf4j:slf4j-log4j12:1.7.7&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在配置依赖时，将SLF4J和log4j绑定</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">log</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">HelloWorld</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">say</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;start time&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello, world!!!&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>      <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;end time&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">HelloWorld</span> <span class="n">helloWorld</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HelloWorld</span><span class="o">();</span>
</span><span class='line'>      <span class="n">helloWorld</span><span class="o">.</span><span class="na">say</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过SLF4J的LoggerFactory.getLogger()方法得到一个logger的实力。logger的名字就是类名（全限定的类名）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">log4j.rootLogger</span><span class="o">=</span><span class="s">info, console, file</span>
</span><span class='line'>
</span><span class='line'><span class="na">log4j.appender.console</span><span class="o">=</span><span class="s">org.apache.log4j.ConsoleAppender</span>
</span><span class='line'><span class="na">log4j.appender.console.layout</span><span class="o">=</span><span class="s">org.apache.log4j.PatternLayout</span>
</span><span class='line'><span class="na">log4j.appender.console.layout.ConversionPattern</span><span class="o">=</span><span class="s">%p %l %d{yyy MMM dd HH:mm:ss,SSS} %m %n</span>
</span><span class='line'>
</span><span class='line'><span class="na">log4j.appender.file</span><span class="o">=</span><span class="s">org.apache.log4j.DailyRollingFileAppender</span>
</span><span class='line'><span class="na">log4j.appender.file.File</span><span class="o">=</span><span class="s">logger.log</span>
</span><span class='line'><span class="na">log4j.appender.file.layout</span><span class="o">=</span><span class="s">org.apache.log4j.PatternLayout</span>
</span><span class='line'><span class="na">log4j.appender.file.layout.ConversionPattern</span><span class="o">=</span><span class="s">%p %l %d{yyy MMM dd HH:mm:ss,SSS} %m %n</span>
</span></code></pre></td></tr></table></div></figure>


<p>在log4j的properties文件中，指定了根logger的级别，以及它的两个appender，分别是console和file。然后定义这两个appender，并指定它们的layout使用PatternLayout，让它们输出：级别，日志输出的位置，时间，指定的信息和换行。</p>

<p>输出结果如下：</p>

<p>INFO log.HelloWorld.say(HelloWorld.java:11) 2014 Jun 01 16:57:54,807 start time <br/>
Hello, world!!!<br/>
INFO log.HelloWorld.say(HelloWorld.java:13) 2014 Jun 01 16:57:54,809 end time<br/>
log.HelloWorld</p>

<p>总结，log不算是功能代码，但是他对于开发人员和维护人员，非常有用了，往往是解决问题的唯一线索，特别是对于后台系统，往往只能通过log来分析问题。</p>

<p>参考资料：</p>

<p>1.<a href="http://logging.apache.org/log4j/1.2/manual.html  ">http://logging.apache.org/log4j/1.2/manual.html  </a>
2.<a href="http://www.slf4j.org/manual.html  ">http://www.slf4j.org/manual.html  </a>
3.<a href="http://www.cnblogs.com/dennisit/archive/2013/01/01/2841603.html">http://www.cnblogs.com/dennisit/archive/2013/01/01/2841603.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Web Service by Example]]></title>
    <link href="http://benweizhu.github.io/blog/2014/05/11/spring-web-service-by-example/"/>
    <updated>2014-05-11T17:05:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/05/11/spring-web-service-by-example</id>
    <content type="html"><![CDATA[<p>Web Service是一种独立的、低耦合的Web服务，它由几个核心技术组成：XML、XSD、WSDL、SOAP、UDDI。我们根据这些知识点，来一个个的学习。</p>

<h2><strong>XML</strong></h2>

<p>呵呵，这个太简单了，这个没什么好谈的，跳过。</p>

<h2><strong>XSD</strong></h2>

<p>XSD（XML Schema Definition）是DTD（Document Type Definition）的替代品，作用是定义XML文档的合法构建模块。</p>

<p>它能够做的事情有很多：</p>

<ol>
<li>定义可出现在文档中的元素</li>
<li>定义可出现在文档中的属性</li>
<li>定义哪个元素是子元素</li>
<li>定义子元素的次序</li>
<li>定义子元素的数目</li>
<li>定义元素是否为空，或者是否可包含文本</li>
<li>定义元素和属性的数据类型</li>
<li>定义元素和属性的默认值以及固定值</li>
</ol>


<p>&hellip;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;xs:schema</span> <span class="na">xmlns:xs=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema&quot;</span>
</span><span class='line'>           <span class="na">targetNamespace=</span><span class="s">&quot;http://benweizhu.github.io&quot;</span>
</span><span class='line'>           <span class="na">elementFormDefault=</span><span class="s">&quot;qualified&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;SearchBookRequest&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:complexType&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:sequence&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">minOccurs=</span><span class="s">&quot;0&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/xs:sequence&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;SearchBookResponse&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:complexType&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:sequence&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;id&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:int&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/xs:sequence&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/xs:schema&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们来分析一下这个schema的含义：</p>

<p>（1）xmlns:xs= &ldquo;<a href="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</a>&#8220;，它表示在这个schema中使用的元素，例如element，complexType，sequence等，都来自于命名空间&#8221;<a href="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</a>&#8220;，并且在使用这些元素时，要以xs最为前缀。</p>

<p>（2）targetNamespace= &ldquo;<a href="http://benweizhu.github.io">http://benweizhu.github.io</a>&#8220;，它表示在这个schema中定义的元素，例如SearchBookRequest，name，author等，都是来自于命名空间&#8221;<a href="http://benweizhu.github.io">http://benweizhu.github.io</a>&#8220;。它表示在基于该schema构建XML时，XML中使用的元素来自于该命名空间。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;z:SearchBookRequest</span> <span class="na">xmlns:z=</span><span class="s">&quot;http://benweizhu.github.io&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;z:name&gt;</span>SpringWebService<span class="nt">&lt;/z:name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;z:author&gt;</span>Spring<span class="nt">&lt;/z:author&gt;</span>
</span><span class='line'><span class="nt">&lt;/z:SearchBookRequest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>（3）xmlns=&ldquo;<a href="http://benweizhu.github.io">http://benweizhu.github.io</a>&#8220;，指定了一个默认的命名空间，什么意思呢？就是说如果schema中使用的元素，没有xs这样前缀，则都是来自于这个默认的命名空间的。</p>

<p>（4）elementFormDefault=&ldquo;qualified&#8221;，指出任何在XML实例文档所使用的元素，只要在此schema中声明过，就必须被命名空间限定。</p>

<p>（5）&lt;xs:element name=&ldquo;xxx&rdquo; type=&ldquo;yyy&rdquo;/>，此处 xxx 指元素的名称，yyy 指元素的数据类型。XML Schema 拥有很多内建的数据类型。最常用的类型有：</p>

<ul>
<li> xs:string</li>
<li> xs:decimal</li>
<li> xs:integer</li>
<li> xs:boolean</li>
<li> xs:date</li>
<li> xs:time</li>
</ul>


<p>（6）复杂元素，定义复杂元素的方式有两种，例子已经在上面给出，一种是直接在元素内部定义，一种是通过type引用该复杂类型。</p>

<p>（7）属性，element元素包含有很多的属性，例如，minOccurs=&ldquo;0&#8221;，它表示出现最少次数为0，就是说这个元素是optional的，可选的。</p>

<h2><strong>SOAP</strong></h2>

<p>SOAP（Simple Object Access Protocol，简单对象访问协议），是交换数据的一种协议规范，它是一种通信协议，基于XML，用于发送和接受消息，它是真正在WebService的服务端和客户端传送的信息。</p>

<p>SOAP使用应用层协议作为其传输协议。SMTP以及HTTP协议都可以用来传输SOAP消息，但是由于HTTP在如今的因特网结构中工作得很好，特别是在网络防火墙下仍然正常工作，所以被广泛采纳。</p>

<p>SOAP基于XML，所以归根到底，SOAP发送的消息就是一个XML格式的文档消息。</p>

<p>一条SOAP消息的基本结构如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;soap:Envelope</span>
</span><span class='line'><span class="na">xmlns:soap=</span><span class="s">&quot;http://www.w3.org/2001/12/soap-envelope&quot;</span>
</span><span class='line'><span class="na">soap:encodingStyle=</span><span class="s">&quot;http://www.w3.org/2001/12/soap-encoding&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;soap:Header&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="nt">&lt;/soap:Header&gt;</span>
</span><span class='line'><span class="nt">&lt;soap:Body&gt;</span>
</span><span class='line'>  ...
</span><span class='line'>  <span class="nt">&lt;soap:Fault&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>  <span class="nt">&lt;/soap:Fault&gt;</span>
</span><span class='line'><span class="nt">&lt;/soap:Body&gt;</span>
</span><span class='line'><span class="nt">&lt;/soap:Envelope&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>一条SOAP消息包含下列元素：</p>

<ol>
<li>必需的Envelope元素，它是用来将一个XML文档标识为一条SOAP消息。</li>
<li>可选的Header元素，包含头部信息</li>
<li>必需的Body元素，包含所有的调用和响应信息</li>
<li>可选的Fault元素，提供有关在处理此消息所发生错误的信息</li>
</ol>


<p>所有以上的元素均被声明为，命名空间 <a href="http://www.w3.org/2001/12/soap-envelope">http://www.w3.org/2001/12/soap-envelope</a> 中的元素，以及针对SOAP编码和数据类型的命名空间： <a href="http://www.w3.org/2001/12/soap-encoding">http://www.w3.org/2001/12/soap-encoding</a> 。</p>

<p>关于 xmlns:soap=&ldquo;<a href="http://www.w3.org/2001/12/soap-envelope">http://www.w3.org/2001/12/soap-envelope</a>&rdquo; 应该比较容易理解，在上面的XSD介绍中已经解释过了，用于说明该XML的命名空间，相当于该SOAP的XSD中的targetNamespace。</p>

<p>可选的SOAP Header元素可包含有关SOAP消息的应用程序专用信息（比如认证、支付等）。如果Header元素被提供，则它必须是Envelope元素的第一个子元素。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;soap:Header&gt;</span>
</span><span class='line'><span class="nt">&lt;m:Trans</span> <span class="na">xmlns:m=</span><span class="s">&quot;http://www.w3school.com.cn/transaction/&quot;</span> <span class="na">soap:mustUnderstand=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>234<span class="nt">&lt;/m:Trans&gt;</span>
</span><span class='line'><span class="nt">&lt;/soap:Header&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>必需的SOAP Body元素包含打算传送到消息最终端点的实际SOAP消息。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;soap:Body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;z:SearchBookRequest</span> <span class="na">xmlns:z=</span><span class="s">&quot;http://benweizhu.github.io&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;z:name&gt;</span>SpringWebService<span class="nt">&lt;/z:name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;z:author&gt;</span>Spring<span class="nt">&lt;/z:author&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/z:SearchBookRequest&gt;</span>
</span><span class='line'><span class="nt">&lt;/soap:Body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>而可选的SOAP Fault元素用于指示错误消息。</p>

<h2><strong>WSDL</strong></h2>

<p>WSDL指网络服务描述语言(Web Services Description Language)，也就是WebService的描述语言。</p>

<p>WSDL是一种使用XML编写的文档。这种文档用于描述某个web service，规定服务的位置，以及此服务提供的操作（或方法）。</p>

<p>一个WSDL文档是由如下几种元素组成：
元素定义:\<types>, \<message>, \<portType>, \<binding></p>

<p>WSDL类型</p>

<p>\<types>元素定义web service使用的数据类型。为了最大程度的平台中立性，WSDL使用XML Schema语法来定义数据类型。</p>

<p>WSDL消息</p>

<p>\<message>元素定义一个操作的数据元素。每个消息均由一个或多个部件组成。可以把这些部件比作传统编程语言中一个函数调用的参数。</p>

<p>WSDL端口</p>

<p>\<portType>元素是最重要的WSDL元素。它可描述一个web service、可被执行的操作，以及相关的消息。可以把\<portType>元素比作传统编程语言中的一个函数库（或一个模块、或一个类）。</p>

<p>WSDL绑定协议</p>

<p>\<binding> 元素为每个端口定义消息格式和协议细节。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;definitions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;types&gt;</span>
</span><span class='line'>        definition of types........
</span><span class='line'>    <span class="nt">&lt;/types&gt;</span>
</span><span class='line'>    <span class="nt">&lt;message&gt;</span>
</span><span class='line'>        definition of a message....
</span><span class='line'>    <span class="nt">&lt;/message&gt;</span>
</span><span class='line'>    <span class="nt">&lt;portType&gt;</span>
</span><span class='line'>        definition of a port.......
</span><span class='line'>    <span class="nt">&lt;/portType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;binding&gt;</span>
</span><span class='line'>        definition of a binding....
</span><span class='line'>    <span class="nt">&lt;/binding&gt;</span>
</span><span class='line'><span class="nt">&lt;/definitions&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>这里要说明一点，WSDL是WebService的描述语言，只是用来描述WebService，当客户端想要使用该WebService时，根据这个描述，可以知道该WebService的服务端口有哪些，服务内容有什么。但对于WebService本身的功能没有任何影响，换句话说，如果是你自己写的WebService，提供给自己使用，你根本不需要关心WSDL是什么，因为你知道自己提供的服务内容和端口。</strong></p>

<p>关于这点，我会在后面的Spring WebService代码中证明。</p>

<h2><strong>Spring WebService</strong></h2>

<p>OK，到这里几个重要的概念都谈到了，应该开始正题，如果上面的内容没看懂，特别是WSDL，没关系，接下来，我们根据Spring WebService的例子，来一个个分析。</p>

<h3>Contract First 契约优先</h3>

<p>首先实现WebService的消息通信协议，也就是提供什么样的服务，接收什么消息，返回什么消息。</p>

<p>根据前面的知识：要根据XSD来约束发送和接收的XML长什么样子。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;xs:schema</span> <span class="na">xmlns:xs=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema&quot;</span>
</span><span class='line'>           <span class="na">targetNamespace=</span><span class="s">&quot;http://benweizhu.github.io&quot;</span>
</span><span class='line'>           <span class="na">elementFormDefault=</span><span class="s">&quot;qualified&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;SearchBookRequest&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:complexType&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:sequence&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">minOccurs=</span><span class="s">&quot;0&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/xs:sequence&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;SearchBookResponse&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:complexType&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:sequence&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;id&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:int&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/xs:sequence&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'><span class="nt">&lt;/xs:schema&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个例子中，我提供了一个图书搜索的服务，传给我书名name和作者author，我返回对应书的id。</p>

<p>根据这个XSD文件，发送出去的请求的XML的应该是长类似下面这个样子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;z:SearchBookRequest</span> <span class="na">xmlns:z=</span><span class="s">&quot;http://benweizhu.github.io&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;z:name&gt;</span>SpringWebService<span class="nt">&lt;/z:name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;z:author&gt;</span>Spring<span class="nt">&lt;/z:author&gt;</span>
</span><span class='line'><span class="nt">&lt;/z:SearchBookRequest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>JAXB</h3>

<p>根据这个定义的XSD文件，可以生成对应的Java类文件，这一步很简单，在Eclipse或者IntellIj中都有提供XSD到Java文件的转换插件。你只需要转换一下，就会生成的两个类SearchBookRequest和SearchBookResponse，它们会在下面的Endpoint中被使用。</p>

<h3>Endpoint</h3>

<p>实现Endpoint，也就是，这个请求消息给服务端后，有谁来处理，并返回响应结果。</p>

<p>Spring提供了注解的方式来配置一个Endpoint。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">spring</span><span class="o">.</span><span class="na">ws</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">endpoint</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">jaxbgen.SearchBookRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">jaxbgen.SearchBookResponse</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.ws.server.endpoint.annotation.Endpoint</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.ws.server.endpoint.annotation.PayloadRoot</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.ws.server.endpoint.annotation.RequestPayload</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.ws.server.endpoint.annotation.ResponsePayload</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Endpoint</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookEndpoint</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@PayloadRoot</span><span class="o">(</span><span class="n">localPart</span> <span class="o">=</span> <span class="s">&quot;SearchBookRequest&quot;</span><span class="o">,</span> <span class="n">namespace</span> <span class="o">=</span> <span class="s">&quot;http://benweizhu.github.io&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nd">@ResponsePayload</span> <span class="n">SearchBookResponse</span> <span class="nf">searchBook</span><span class="o">(</span><span class="nd">@RequestPayload</span> <span class="n">SearchBookRequest</span> <span class="n">searchBookRequest</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">SearchBookResponse</span> <span class="n">searchBookResponse</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SearchBookResponse</span><span class="o">();</span>
</span><span class='line'>      <span class="n">searchBookResponse</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">searchBookResponse</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一个注解@Endpoint不用我解释了，就是说明这个类是一个WebService的Endpoint。
第二个注解@PayloadRoot里面有两个参数，localPart和namespace，它们分别匹配到XML中的根元素名字和命名空间，也就是说，如果发送过来消息的满足这两个条件，就交给该函数处理。这样就形成了消息到Endpoint的映射。
第三和第四个注解@RequestPayload和@ResponsePayload就简单了，分别用来指明请求和响应的对象。</p>

<h3>Spring的XML配置</h3>

<p>配置比较简单，提供组件扫描和对Endpoint注解的支持即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:sws=</span><span class="s">&quot;http://www.springframework.org/schema/web-services&quot;</span>
</span><span class='line'>       <span class="na">xmlns:context=</span><span class="s">&quot;http://www.springframework.org/schema/context&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span>
</span><span class='line'><span class="s">      http://www.springframework.org/schema/web-services</span>
</span><span class='line'><span class="s">      http://www.springframework.org/schema/web-services/web-services-2.0.xsd</span>
</span><span class='line'><span class="s">      http://www.springframework.org/schema/context</span>
</span><span class='line'><span class="s">      http://www.springframework.org/schema/context/spring-context.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;sws:annotation-driven/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&quot;me.zeph.spring.ws.example&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>web.xml</h3>

<p>最后再来看web.xml怎么配置。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;web-app</span> <span class="na">version=</span><span class="s">&quot;2.4&quot;</span>
</span><span class='line'>         <span class="na">xmlns=</span><span class="s">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span>
</span><span class='line'>         <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>         <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://java.sun.com/xml/ns/j2ee</span>
</span><span class='line'><span class="s">         http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>spring-ws<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.ws.transport.http.MessageDispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>spring-ws<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url-pattern&gt;</span>/services/*<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet-mapping&gt;</span>
</span><span class='line'><span class="nt">&lt;/web-app&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>和SpringMVC一样，WebService也需要一个前端的请求分发的Servlet，MessageDispatcherServlet。你可能会想为什么是Servlet？</p>

<p>其实，这点，我在前面已经提到过，WebService的协议是绑定在Soap上面的，而Soap又是以http协议作为应用层协议的载体，发出去的Request固然是http请求。不配置对应Servlet，不配置对应的URL，那应该怎么做呢？</p>

<p>到此为止，一个Spring Web Service的服务端代码就写完了。你肯定会想，说好的WSDL呢？它去哪了？我这里刻意没有配置WSDL，就是要证明WSDL本身对于WebService没有影响，所以WSDL可以不用配。</p>

<p>我们先把WSDL放在一边，先把客户端代码完成。</p>

<h3>Spring WebService Template 客户端</h3>

<p>这里的客户端代码使用Spring提供的WebServiceTemplate完成。</p>

<p>在applicationContext中配置WebServiceTemplate，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;webServiceTemplate&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.ws.client.core.WebServiceTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;defaultUri&quot;</span> <span class="na">value=</span><span class="s">&quot;http://localhost:8080/spring-ws/services/&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;marshaller&quot;</span> <span class="na">ref=</span><span class="s">&quot;marshaller&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;unmarshaller&quot;</span> <span class="na">ref=</span><span class="s">&quot;marshaller&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;marshaller&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.oxm.jaxb.Jaxb2Marshaller&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;packagesToScan&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;list&gt;</span>
</span><span class='line'>                <span class="nt">&lt;value&gt;</span>jaxbgen<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>defaultUri用来说明该Template会向哪个URL发出请求。关于这个URL，因为在web.xml配置时，该MessageServlet是接受spring-ws/services/*的任何请求，而Spring WebService的Endpoint映射并不是根据URL来判断，所以这里你可以写任何满足该模式的URL，例如： <a href="http://localhost:8080/spring-ws/services/ssss">http://localhost:8080/spring-ws/services/ssss</a> 。</p>

<p>Marshaller用于实现XML到Java和Java到XML的转换。在Template需要配置marshaller和unmarshaller，这里它们用的同一个Marshaller对象。</p>

<p>客户端Java代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">integration</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">jaxbgen.SearchBookRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">jaxbgen.SearchBookResponse</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.ws.client.core.WebServiceTemplate</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">CoreMatchers</span><span class="o">.</span><span class="na">is</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">locations</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;classpath:applicationContext.xml&quot;</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookClientIntegrationTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Autowired</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">WebServiceTemplate</span> <span class="n">webServiceTemplate</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldGetResponseFromWebService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//given</span>
</span><span class='line'>      <span class="n">SearchBookRequest</span> <span class="n">searchBookRequest</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SearchBookRequest</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//when</span>
</span><span class='line'>      <span class="n">SearchBookResponse</span> <span class="n">searchBookResponse</span> <span class="o">=</span> <span class="o">(</span><span class="n">SearchBookResponse</span><span class="o">)</span> <span class="n">webServiceTemplate</span><span class="o">.</span><span class="na">marshalSendAndReceive</span><span class="o">(</span><span class="n">searchBookRequest</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//then</span>
</span><span class='line'>      <span class="n">assertThat</span><span class="o">(</span><span class="n">searchBookResponse</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK，到此为止，Spring WebService的服务端和客户端代码完成。</p>

<p>所以，现在我们再回过头来，看看WSDL。</p>

<h3>WSDL</h3>

<h5>Automatic WSDL exposure 自动生成WSDL</h5>

<p>在刚才的Spring XML配置中（/WEB-INF/[servlet-name]-servlet.xml）中加一段XML配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;sws:dynamic-wsdl</span> <span class="na">id=</span><span class="s">&quot;book&quot;</span> <span class="na">portTypeName=</span><span class="s">&quot;SearchBookRequest&quot;</span>
</span><span class='line'>                      <span class="na">locationUri=</span><span class="s">&quot;http://tobereplacedbyws:8080/spring-ws/services/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;sws:xsd</span> <span class="na">location=</span><span class="s">&quot;classpath:book.xsd&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/sws:dynamic-wsdl&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>要注意位置有两点：</p>

<ol>
<li>属性id，除了唯一指定一个元素之外，它还有个更重要的作用，是说明该wsdl的名字。当你要访问该wsdl时，访问的url是 <a href="http://localhost:8080/spring-ws/services/book.wsdl">http://localhost:8080/spring-ws/services/book.wsdl</a> 。</li>
<li>属性locationUri，前面已经看到WSDL跟WebService的功能性服务没有半毛钱关系，所以这里的locationUri属性配置也不会影响到WebService的功能，它只是在你在wsdl中看到的一个字段，用来描述服务端的服务端口（URL）是什么。如果你看上面例子中的locationUri，你会发现不是写的localhost，而是tobereplacedbyws。为什么呢？因为MessageDispatcherServlet提供了一个特性，可以在部署时，根据主机的名字，替换这个位置的内容。如何开启这个特性呢？</li>
</ol>


<p>在web.xml中配置一个initparam即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;web-app</span> <span class="na">version=</span><span class="s">&quot;2.4&quot;</span>
</span><span class='line'>         <span class="na">xmlns=</span><span class="s">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span>
</span><span class='line'>         <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>         <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://java.sun.com/xml/ns/j2ee</span>
</span><span class='line'><span class="s">         http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>spring-ws<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.ws.transport.http.MessageDispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>        <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>            <span class="nt">&lt;param-name&gt;</span>transformWsdlLocations<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>            <span class="nt">&lt;param-value&gt;</span>true<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>        <span class="nt">&lt;servlet-name&gt;</span>spring-ws<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url-pattern&gt;</span>/services/*<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/servlet-mapping&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/web-app&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个时候，你访问 <a href="http://localhost:8080/spring-ws/services/book.wsdl">http://localhost:8080/spring-ws/services/book.wsdl</a> ，就可以看到对应的WSDL信息，然后你就可以用SoapUI等类似软件去测试你的Webservice。</p>

<p>参考资料：</p>

<p>(1) spring webservice reference</p>

<p>(2) <a href="http://www.w3school.com.cn/ws.asp">http://www.w3school.com.cn/ws.asp</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[了解war包和ear包]]></title>
    <link href="http://benweizhu.github.io/blog/2014/05/03/what-is-war-and-ear/"/>
    <updated>2014-05-03T17:06:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/05/03/what-is-war-and-ear</id>
    <content type="html"><![CDATA[<p>上一次，讲到了如何如何手动编译Java，简单的介绍打Jar包（提示：在classpath的基础上，一定将包的目录结构打进去）。Jar包的目的，将编译过的class文件有效合理的组装起来，方便管理和使用。这一次，滕老板继续跟我们讲解了如何打War包。</p>

<p>在本篇文章中，将分别介绍War包和Ear包（在项目中遇到的Ear包的模块，不清楚是什么，所以随便一起弄清楚）。</p>

<h2><strong>War包</strong></h2>

<p>只要做过Java开发的同志，肯定知道War包，至少听说过。</p>

<p>War包（Web application ARchieve）也是一种Jar包文件，它被用来描述由JSP，Servlet，Java类，XML文件，tag库，静态web页面等资源组成的集合，它们组合在一起成文一个web应用。</p>

<p>从命令上说，打War包的命令和打Jar包的命令一样，比较简单，主要是要了解一个War包的目录结构：</p>

<p><image src="http://benweizhu.github.io/../images/ear/war.png" height="50%" width=50%" style="text-align: center"/></p>

<p>MANIFEST.MF是一个可选文件，用来描述额外的元数据信息。</p>

<p>WEB-INF目录包含了War中的私有文件，也就是说，当web应用被部署之后，该目录下的文件不能够由Web客户端（浏览器）直接访问的。</p>

<p>WEB-INF/lib/用来放置你代码中需要使用的第三方的jar文件。</p>

<p>WEB-INF/classes/用来放置你自己编译的class文件。</p>

<p>WEB-INF/web.xml是web部署描述器，JavaEE配置web模块的标准描述器，这里不详细解释。</p>

<p>最后是公共的静态文件。</p>

<p>那么在打包的时候，按照这个目录结构打包，然后将War包放置到tomcat的webapp目录下，tomcat在运行时就会自动帮你解包并运行，或者你也可以直接将包含该目录结构的目录直接拷贝到tomcat的webapp下，一样可以运行，打包只不过是一个封装和压缩过程。</p>

<h2><strong>那什么是Ear包呢？</strong></h2>

<p>Ear(Enterprise ARchieve)用于在Java EE中将一个或者多个模块封装到一个文件中，这样，多个不同模块在应用服务器上的部署就可以同时并持续的进行。</p>

<p>Java EE应用以Jar文件，War文件和Ear文件形式呈现。War或者Ear文件都是标准的Jar文件，只不过扩展名是.war和.ear。通过Jar，War和Ear等文件或模块的方式，使得用一些相同组件，来构建不同的JavaEE应用成为可能。不需要额外的编码，只需要将不同的JavaEE模块打包到不同的Java EE的Jar包，War包或Ear包的文件中。</p>

<p>一个Ear文件是由Java EE模块和可选的部署描述器组成。部署描述器是一个带有.xml扩展名的XML文档，描述了一个应用，模块或者组件的部署设置。因为部署描述其的信息是声明式的，所以可以直接修改它，与我们的源代码没有关系。在运行时中，Java EE的服务器会读取部署描述器的内容，并根据描述对应用，模块或者组件做相对应的操作。</p>

<p><image src="http://benweizhu.github.io/../images/ear/ear.png" height="50%" width=50%" style="text-align: center"/>
<image src="http://docs.oracle.com/javaee/6/tutorial/doc/figures/overview-applicationModule.gif" style="text-align: center"/>
上面两个图，分别摘自Jboss at Work(A practice guide)和JavaEE6 Tutorial。</p>

<p>一个Java EE模块是由一个或者多个为同一个容器类型准备的Java EE组件组成，当然还包含一个可选的部署描述器文件。</p>

<p>Java EE模块有以下几种类型：</p>

<p>EJB模块，它包含企业级别的bean类文件，一个EJB的部署描述器（可选），EJB模块会以Jar包形式组装。</p>

<p>Web模块，它包含了servlet类文件，web文件，其他相关class文件，图片，html静态文件，和一个web.xml部署文件（可选），并最终以war包形式组装。</p>

<p>应用客户端模块，包含了class文件，应用客户端部署描述器文件（可选）并以Jar包形式组装。</p>

<p>资源适配模块，包含所有的Java接口，类，原生库，部署描述器（可选）。组合在一起，实现JavaEE的Connector架构。同样是以Jar包方式组装，但是文件以.rar扩展名结尾。</p>

<p>就和War包包含一个web.xml的部署描述器，一个Ear包文件包含一个名字为application.xml的文件。它是一个必要的打包列表，告诉Java EE服务器Ear包种包含什么东西，以及去哪里找。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;application</span> <span class="na">xmlns=</span><span class="s">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>             <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://java.sun.com/xml/ns/j2ee             http://java.sun.com/xml/ns/j2ee/application_1_4.xsd&quot;</span>
</span><span class='line'>             <span class="na">version=</span><span class="s">&quot;1.4&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;display-name&gt;</span>JBossAtWorkEAR<span class="nt">&lt;/display-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;module&gt;</span>
</span><span class='line'>        <span class="nt">&lt;web&gt;</span>
</span><span class='line'>            <span class="nt">&lt;web-uri&gt;</span>webapp.war<span class="nt">&lt;/web-uri&gt;</span>
</span><span class='line'>            <span class="nt">&lt;context-root&gt;</span>jaw<span class="nt">&lt;/context-root&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/web&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/module&gt;</span>
</span><span class='line'>    <span class="nt">&lt;module&gt;</span>
</span><span class='line'>        <span class="nt">&lt;java&gt;</span>common.jar<span class="nt">&lt;/java&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/module&gt;</span>
</span><span class='line'><span class="nt">&lt;/application&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>application.xml中的元素都应该是自解释的。在告诉应用程序服务器每一个Jar包的名字，以及它的作用（功能）。</p>

<p>例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;module&gt;</span>
</span><span class='line'>    <span class="nt">&lt;web&gt;</span>
</span><span class='line'>        <span class="nt">&lt;web-uri&gt;</span>webapp.war<span class="nt">&lt;/web-uri&gt;</span>
</span><span class='line'>        <span class="nt">&lt;context-root&gt;</span>jaw<span class="nt">&lt;/context-root&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/web&gt;</span>
</span><span class='line'><span class="nt">&lt;/module&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><context-root>用来告诉你web应用站点名字，如果你是直接打成War包，那么War包的名字就是这个站点名。</p>

<p>总而言之，Ear包是由Java EE多个模块组成，相互配合，完成各自职责，形成完整的Java EE应用。</p>

<p>参考资料：</p>

<p><a href="http://docs.oracle.com/javaee/6/tutorial/doc/bnaby.html">http://docs.oracle.com/javaee/6/tutorial/doc/bnaby.html</a></p>

<p>Jboss at work A practice guide(Chapter 3)(<a href="http://oreilly.com/catalog/jboss/chapter/ch03.pdf">http://oreilly.com/catalog/jboss/chapter/ch03.pdf</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[丢掉IDE，回到Java的第一堂课]]></title>
    <link href="http://benweizhu.github.io/blog/2014/04/07/write-java-code-without-ide/"/>
    <updated>2014-04-07T13:56:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/04/07/write-java-code-without-ide</id>
    <content type="html"><![CDATA[<p>最近，《实现领域驱动设计》的译者，ThoughtWorks的<a href="http://www.davenkin.me/">“滕老板”</a>（腾云）给我们上了一堂基础课，就是没有IDE的情况下，去编译和运行用文本编辑器编写的Java代码。</p>

<p>这本应该是基础中的基础，我记得应该是Java第一堂课就应该讲到的东西。但是我们这群用惯了IDE的程序员，在没有了IDE之后，就开始不知所措了。虽然不知道这些知识，对于普通开发似乎是没有影响，但毕竟是Java的重要基础知识，了解这些知识可以帮助你理解IDE帮你做了什么，可以更快速的定位问题。</p>

<p>还是举例子，滕老板的例子：</p>

<p>目录结构</p>

<p>src</p>

<p>&ndash;client</p>

<p>&mdash;-Client.java</p>

<p>&ndash;service</p>

<p>&mdash;-Service.java</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Service</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">run</span><span class="o">(){</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="s">&quot;as your service&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">str</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">client</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">service.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>
</span><span class='line'>      <span class="n">Service</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Service</span><span class="o">();</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">run</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ok，代码写完了，你知道该怎么运行吗？</p>

<p>命令行：进入到src目录下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="n">javac</span> <span class="n">client</span><span class="p">/</span><span class="n">Client</span><span class="p">.</span><span class="n">java</span>
</span><span class='line'><span class="n">java</span> <span class="n">client</span><span class="p">.</span><span class="n">Client</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就会输出正确结果：as your service。</p>

<p>再来看一下目录结构</p>

<p>src</p>

<p>&ndash;client</p>

<p>&mdash;-Client.java</p>

<p>&mdash;-Client.class</p>

<p>&ndash;service</p>

<p>&mdash;-Service.java</p>

<p>&mdash;-Service.class</p>

<p>我们知道javac命令编译的是.java文件，而java命令运行是.class文件。</p>

<p>但是这里还是有几个疑问：</p>

<p>1.javac client/Client.java时，它怎么知道去哪里找Service类？</p>

<p>2.对于上一个疑问，你的答案可能是import service.*;告诉它去service包下找，那么第二疑问，为什么是import service.*;而不是import src.service.*?</p>

<p>3.第三个疑问和第一个疑问类似，答案也类似，java client.Client，怎么知道去哪里找service.class文件？</p>

<p>面对这三个问题，答案是，要引入两个概念。</p>

<p>sourcepath和classpath。</p>

<p>classpath大家听得比较多，用来告诉JVM或者Java编译器到哪里去寻找用户定义的类和包。</p>

<p>sourcepath和classpath一样，只不过它是用来告诉编译器到哪里去寻找源文件。</p>

<p>在上面的javac和java命令中，既没有显示的指定sourcepath，也没有显示的指定classpath。但是它们都有默认值，就是将当前目录作为各自的路径。</p>

<p>比如：我现在从当前路径src，进入到它的一个子目录中src/sub。</p>

<p>然后我运行：javac ../client/Client.java命令</p>

<p>它提示我找不到Service类。 那是因为当前的sourcepath是src/sub，在这个路径下没有Service.java。我们改一下，显示的设置它sourcepath。</p>

<p>运行命令：javac -sourcepath ../ ../client/Client.java</p>

<p>编译成功。</p>

<p>那么运行呢？</p>

<p>直接在src/sub路径下，运行：java client.Client。能行吗？肯定不行。</p>

<p>Error: Could not find or load main class client.Client</p>

<p>必须要显示的指定它的classpath为上一级目录：</p>

<p>java -classpath ../ client.Client</p>

<p>ok，成功。</p>

<p>现在再来让我们回到刚才的第二个问题。为什么import的不是src.service.* ，因为我们设置它的sourcepath，它就成为一个相对路径。</p>

<p>这不禁让我想到一个问题。package和import到底有什么用？为什么package名字和目录结构一致？</p>

<p>这不是白痴问题吗？</p>

<p>package是作为命名空间，因为不同开发商，开发出来的类库可能会有相同的类名。为了区分，防止冲突，用不同的包名区分。</p>

<p>import是根据你要使用的类，从classpath下找到你要使用的类，并引入到你的类中。</p>

<p>我做了一个实验：</p>

<p>将Service类的package定义，改为service.something，这样包名和目录结构就不一致了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">service</span><span class="o">.</span><span class="na">something</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Service</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">run</span><span class="o">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;as your service&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后还是照常编译。</p>

<pre><code>client/Client.java:7: error: cannot access Service
    Service service = new Service();
    ^
    bad source file: ./service/Service.java
    file does not contain class service.Service
Please remove or make sure it appears in the correct subdirectory of the sourcepath.
1 error
</code></pre>

<p>第四行，bad source file: ./service/Service.java表明他在编译Client.java文件时，通过import找到了该文件，说明import是通过文件结构去找到的。</p>

<p>但是他又说file does not contain class service.Service，说明在这个Service.java中找不到对应的Service类。</p>

<p>为什么呢？因为我的包名是service.something，但是他要找的是service。</p>

<p>所以包的作用是和类的名字组成完整的类名，这里的Service类的全名应该是service.something.Service。但是他去找到的是service.Service。所以它找不到。</p>

<p>那是不是将import改为import service.something.*;就可以呢？</p>

<p>不行，前面说了，import是根据目录结构去找到的，根本就没有service/something这个目录结构，所以不可能找到。</p>

<pre><code>client/Client.java:3: error: package service.something does not exist
import service.something.*;
^
client/Client.java:7: error: cannot find symbol
    Service service = new Service();
    ^
    symbol:   class Service
    location: class Client
    client/Client.java:7: error: cannot find symbol
    Service service = new Service();
                          ^
    symbol:   class Service
    location: class Client
</code></pre>

<p>你看，第一行：client/Client.java:3: error: package service.something does not exist</p>

<p>回过头来想，这也是为什么，有时候，当同时导入两个不同包中名字相同的类时，其中有一个要用完全限定名。因为类的名字本来就是由包的名字和类的自身名字组成。</p>

<p>总而言之，这堂课的收获还是挺大的，重点要掌握上面提到的两个概念。</p>

<p>课上本来还有一点关于，打jar包和如何引用jar包的内容，以及通过java -d命令，将class文件编译到指定的目录下。</p>

<p>这里我就不多说了，万变不离其宗。</p>

<p>javac -classpath &ldquo;.:service.jar&rdquo; client/Client.java //linux下面是冒号，windows下面是分号</p>

<p>java -classpath &ldquo;.:service.jar&rdquo; client.Client</p>

<p>只不过要注意一点的是，打jar包时，一定要按照package定义的目录结构去打。因为在将jar包加入到classpath时和将一个目录下的class文件加入是一样的，相对路径。</p>

<p>java -d out client/Client.java，会将class文件编译到out目录下，且内部目录结构与包的结构一致。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Restful Web Service by Example]]></title>
    <link href="http://benweizhu.github.io/blog/2014/04/06/spring-restful-web-service-by-example/"/>
    <updated>2014-04-06T12:06:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/04/06/spring-restful-web-service-by-example</id>
    <content type="html"><![CDATA[<p>REST是<a href="http://en.wikipedia.org/wiki/Roy_Fielding">Roy Fielding</a>在他的2000年博士论文《Architectural Styles and the Design of Network-based Software Architectures》中提出的概念，全称是Representational State Transfer。</p>

<p>Roy Fielding是互联网一个极为重要的人物，他是HTTP协议（1.0版和1.1版）的主要设计者，Apache服务器软件的作者之一，Apache基金会的第一任主席。</p>

<p>他在他的论文中提到一点：“网络研究主要关注系统之间通信行为的细节、如何改进特定通信机制的表现，常常忽视了一个事实，那就是<strong>改变应用程序的互动风格比改变互动协议，对整体表现有更大的影响</strong>。”。</p>

<p>REST是个名字，加上ful之后，变成了形容词“具有REST风格的”。</p>

<p>在看过一些资料之后，我觉的REST越来越火的主要原因之一，就是想在的互联网应用已经不仅仅是内容的资源，还包括计算资源。而资源的消费者也不仅仅是浏览器（人在消费），还有其他应用（应用程序在消费），所以资源的表现形式在变化。</p>

<h2><strong>Web Service</strong></h2>

<p>Web Service是一种服务导向架构的技术，通过标准的Web协议提供服务，目的是保证不同平台的应用服务可以互操作。而它的技术通常是根据SOAP协议进行传递XML格式消息。而基于Java的主流WEB服务开发框架往往需要通过WSDL生成客户端的源代码。</p>

<p>PS：这里没有任何想要对比基于SOAP和基于REST的Web Service的区别或者优缺点的意思。</p>

<h2><strong>Restful Web Service</strong></h2>

<p>Restful Web Service又称为Restful Web API。Rest本身其实不是一种技术，而是一种风格，它基于HTTP协议，具有统一的URL资源，通过HTTP协议提供的方法来表示对数据的操作，资源的表现形式多样化，具体表现形式由资源的消费者决定等等。</p>

<p>说了这么多，还是回到标题，如何实现？</p>

<p>如果你的项目采用Spring开发，那么Spring提供了一套基于Spring MVC的Restful方案，可以非常方便的通过Controller提供想要的Web Service，又可以通过RestTemplate实现客户端对Web Service操作。</p>

<p>PS：本例子是针对Spring 3.2以后，3.1版本有所不同。</p>

<p>首先来实现一个基于Controller的Restful Web Service：</p>

<p>首先是Domain，这个很简单一个Car类，包含名字和价格。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">spring</span><span class="o">.</span><span class="na">restful</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">model</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">price</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPrice</span><span class="o">(</span><span class="kt">int</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">price</span> <span class="o">=</span> <span class="n">price</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getPrice</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">price</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后是Controller，按照普通写RequestMapping一样方式，但这里返回的是Domain对象。
这里有两个位置不同，一个是注解@ResponseBody用来说明返回的结果是HttpResponse的body部分。
另一个参数produces用来说明，这里只接受Http请求中head里说明了Accept类型是Application/Json。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">spring</span><span class="o">.</span><span class="na">restful</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">controller</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.spring.restful.demo.model.Car</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ResponseBody</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_VALUE</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">bind</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;car&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">GET</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CarController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">VIEW_NAME</span> <span class="o">=</span> <span class="s">&quot;car&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCarByView</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">VIEW_NAME</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">produces</span> <span class="o">=</span> <span class="o">{</span><span class="n">APPLICATION_JSON_VALUE</span><span class="o">})</span>
</span><span class='line'>  <span class="nd">@ResponseBody</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Car</span> <span class="nf">getCarByJSON</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">getCar</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Car</span> <span class="nf">getCar</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Car</span> <span class="n">car</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Car</span><span class="o">();</span>
</span><span class='line'>      <span class="n">car</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;BenZ&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">car</span><span class="o">.</span><span class="na">setPrice</span><span class="o">(</span><span class="mi">300000</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">car</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样基本就算完成了，可能有人会问，为什么上面的getCarByView方法没有写produces。其实，我也看到许多网上例子，将返回HTML格式View的方法添加了produces。比如，添加Text/Http等。</p>

<p>为什么这里不加，原因是，我们知道，该方法是提供给浏览器请求，用于返回基于HTML的页面。而对于不同的浏览器而言，发出的HTTP请求的head的是不一样，以Chrome和IE为例。</p>

<p>Chrome发出的head是：“text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8”</p>

<p>IE发出的head是：“*/*”</p>

<p>所以如果添加了produces，那么有可能返回结果不是HTML。我就遇到过，添加了Text/Http之后，在IE中返回给我的是JSON数据，而不是HTML页面。</p>

<p>如果不写，那么就是默认的选择，在不满足其他RequestMapping，会去走默认那条Mapping路线。你可以在RestClient中验证，URL是localhost:8080/spring-restful-demo/car，但是head不同，那么它返回给你的view格式就不同了。</p>

<p>其实，走到这一步，已经就完成了。</p>

<h2><strong>但是如果你在页面上和RestClient上做一个实验，就会发现它远远不止如此！！！</strong></h2>

<p>在浏览器上输入localhost:8080/spring-restful-demo/car.html，会返回给你html页面。</p>

<p>在浏览器上输入localhost:8080/spring-restful-demo/car.json，会返回给你给你json数据。</p>

<p>明明通过浏览器发送请求的Head是Text/Html，为什么会返回给我Json数据。如果通过debug的方式，你会看到确实进入的是getCarByJSON方法。</p>

<p>在<strong>RestClient</strong>去试一把，输入地址，localhost:8080/spring-restful-demo/car.html，设置head为accept=Application/Json，返回给我的是HTMl页面。</p>

<h2><strong>默认规约</strong></h2>

<p>原来Spring在选择映射的时候，有一定的规约，加入了检查条件，URL后缀，URL参数。并且其默认的检查顺序是后缀，参数，最后才是Accept。</p>

<p>也就是，如果你的URL是以HTML结尾，那么无论你的head是什么，Spring都会认为是返回HTML页面，因为你显示的指明了。</p>

<p>对于那些希望显示指明返回类型的应用，Spring的默认规约已经帮助它们实现。</p>

<p>但是如果，我不希望呢？</p>

<p>无论你的后缀还是参数是什么，我都希望Spring根据我head中的accept值来决定。</p>

<h2><strong>Content Negotiation（内容协商）</strong></h2>

<p>这里就要引入另外一个东西：Spring MVC Content Negotiation（内容协商）。</p>

<p>它是用来帮助你定义在返回多种表现形式时，应该遵守的规约，默认我们是不需要定义的，那么它就会像上面所提到的去做。但如果你不想要默认的规则，那么你就需要在Spring的Context中定义这个Bean。</p>

<p>这里用我的demo中的例子，简单说明一下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:mvc=</span><span class="s">&quot;http://www.springframework.org/schema/mvc&quot;</span>
</span><span class='line'>       <span class="na">xmlns:context=</span><span class="s">&quot;http://www.springframework.org/schema/context&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/mvc</span>
</span><span class='line'><span class="s">                    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</span>
</span><span class='line'><span class="s">                    http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">                    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span>
</span><span class='line'><span class="s">                    http://www.springframework.org/schema/context</span>
</span><span class='line'><span class="s">                    http://www.springframework.org/schema/context/spring-context-3.2.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&quot;me.zeph.spring.restful.demo&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;mvc:annotation-driven</span> <span class="na">content-negotiation-manager=</span><span class="s">&quot;contentNegotiationManager&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;viewResolver&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;viewClass&quot;</span> <span class="na">value=</span><span class="s">&quot;org.springframework.web.servlet.view.JstlView&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;prefix&quot;</span> <span class="na">value=</span><span class="s">&quot;/WEB-INF/view/&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;suffix&quot;</span> <span class="na">value=</span><span class="s">&quot;.jsp&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;contentNegotiationManager&quot;</span>
</span><span class='line'>          <span class="na">class=</span><span class="s">&quot;org.springframework.web.accept.ContentNegotiationManagerFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;favorPathExtension&quot;</span> <span class="na">value=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;favorParameter&quot;</span> <span class="na">value=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;defaultContentType&quot;</span> <span class="na">value=</span><span class="s">&quot;text/html&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;restfulTemplate&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.web.client.RestTemplate&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Spring 3.2以后，实现内容协商的bean的名字叫做ContentNegotiationManager，需要通过他的工厂类ContentNegotiationManagerFactoryBean去定义规约。在这里，我修改了三个属性，favorPathExtension，favorParameter和defaultContentType，defaultContentType简单，就是默认的表现内容形式，favorPathExtension表示是否采用路径扩展作为最高优先级的判断，同理favorParameter表示是否采用参数作为第二优先级的判断。这里，我将它们两个都设置为false。即不采用它们作为判断条件。最后，在annotation-driven的标签里，添加属性contentNegotiationManager，说明使用@Controller注解的Controller都采用这种规约。</p>

<p>然后，我们再来是测试，在RestClient上，设置请求Url为localhost:8080/spring-restful-demo/car.html，但是呢，将head设为Accept=Applicaiton/Json。你猜结果怎样？乖乖的返回Json数据。</p>

<p>关于Content Negotiation就说到这里，关于它功能还有很多，以后有机会在补充，那么Web Service就差不多说完了。</p>

<h2><strong>RestTemplate实现客户端</strong></h2>

<p>在来看看怎么实现Client端的代码。如果不用Spring，可以通过Apache的HttpClient作为客户端，当然写的代码要多一点。</p>

<p>如果使用Spring，可以通过Spring提供的RestTemplate，目的应该和Spring的JDBCTemplate类似，帮你封装了具体操作。</p>

<p>用起来很简单，我写了另一个Controller来在页面显示调用该Web Service的结果。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">spring</span><span class="o">.</span><span class="na">restful</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">controller</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.spring.restful.demo.common.URLs</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.spring.restful.demo.model.Car</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.ui.Model</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.client.RestTemplate</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DisplayCarController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">VIEW_NAME</span> <span class="o">=</span> <span class="s">&quot;displayCarJson&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">RestTemplate</span> <span class="n">restTemplate</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Autowired</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">DisplayCarController</span><span class="o">(</span><span class="n">RestTemplate</span> <span class="n">restTemplate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">restTemplate</span> <span class="o">=</span> <span class="n">restTemplate</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="n">VIEW_NAME</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCar</span><span class="o">(</span><span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;car&quot;</span><span class="o">,</span> <span class="n">getCarByJson</span><span class="o">());</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">VIEW_NAME</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Car</span> <span class="nf">getCarByJson</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">getForObject</span><span class="o">(</span><span class="n">URLs</span><span class="o">.</span><span class="na">REST_CAR_URL</span><span class="o">,</span> <span class="n">Car</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>如果你需要特定指定请求的Head。可以使用RestTemplate的exchange方法，不过使用起来要麻烦一些。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Car</span> <span class="nf">getCarByJson</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpHeaders</span><span class="o">();</span>
</span><span class='line'>      <span class="n">headers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;accept&quot;</span><span class="o">,</span> <span class="s">&quot;application/json&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">HttpEntity</span> <span class="n">httpEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpEntity</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="n">headers</span><span class="o">);</span>
</span><span class='line'>      <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Car</span><span class="o">&gt;</span> <span class="n">exchange</span> <span class="o">=</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">exchange</span><span class="o">(</span><span class="n">URLs</span><span class="o">.</span><span class="na">REST_CAR_URL</span><span class="o">,</span> <span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="n">httpEntity</span><span class="o">,</span> <span class="n">Car</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">exchange</span><span class="o">.</span><span class="na">getBody</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>不过第二种方式更能说明是指定了具体head来请求哪种资源。</p>

<p>这里使用Spring来发出请求，都是后端的，如果要用前端请求，固然是通过Ajax，不过那是另外一部分内容。</p>

<p>总而言之，在使用Spring Web Service的这个过程当中还是遇到了不少的坑。</p>

<p>首先，你需要知道有Content Negotiation这个东西，其次，不同的Spring版本，默认的规约不同。Spring 3.2和3.1就是一个分水岭，使用的时候要注意你使用的是哪个版本。</p>

<p>参考资料：</p>

<p><a href="https://spring.io/guides/gs/rest-service/">https://spring.io/guides/gs/rest-service/</a></p>

<p><a href="https://spring.io/blog/2013/05/11/content-negotiation-using-spring-mvc">https://spring.io/blog/2013/05/11/content-negotiation-using-spring-mvc</a></p>

<p><a href="http://spring.io/blog/2013/06/03/content-negotiation-using-views/">http://spring.io/blog/2013/06/03/content-negotiation-using-views/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript中你需要了解的基本知识（二）]]></title>
    <link href="http://benweizhu.github.io/blog/2014/03/29/something-you-n-need-to-know-about-javascript-2/"/>
    <updated>2014-03-29T22:44:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/03/29/something-you-n-need-to-know-about-javascript-2</id>
    <content type="html"><![CDATA[<h2><strong>表达式</strong></h2>

<p>表达式是一组可以计算出一个数值的有效的代码的集合，是一个单纯的运算过程。</p>

<h2><strong>函数立刻调用</strong></h2>

<p>当你声明类似function foo(){}或var foo = function(){}函数的时候，通过在后面加个括弧就可以实现函数的执行，例如foo()。</p>

<p>在一个表达式后面加上括号()，该表达式会立即执行，但是在一个语句后面加上括号()，是完全不一样的意思，他的只是分组操作符。</p>

<p>我们只需要用大括弧将代码的代码全部括住就行了，因为JavaScript里括弧()里面不能包含语句，所以在这一点上，解析器在解析function关键字的时候，会将相应的代码解析成function表达式，而不是function声明。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">runImmediately</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">getValue</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}());</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">runImmediately</span><span class="p">.</span><span class="nx">getValue</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于函数立即执行有两种写法，(function f(){}())和(function f(){})()，我个人认为第二种更容易理解，加入括号()，语句变成表达式，然后再加一个括号()，表达式执行。但是我看到大部分例子中都倾向于前一种写法，可能更容易说明他是一个整体。</p>

<h2><strong>闭包</strong></h2>

<p>我在这里给出多个解释，因为有时候，我感觉从一种解释中不一定能够获得完全理解。</p>

<p>在计算机科学中，闭包（Closure）是词法闭包（Lexical Closure）的简称，是引用了自由变量的<strong>函数</strong>。这个被引用的自由变量将和这个函数一同存在，<strong>即使已经离开了创造它的环境也不例外</strong>。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。&mdash;&mdash;-维基百科</p>

<p>闭包可以用来在一个函数与一组“私有”变量之间建立关联关系。在给定函数被多次调用的过程中，这些私有变量能够保持其持久性。变量的作用域仅限于包含它们的函数，因此无法从其它程序代码部分进行访问。&mdash;&mdash;-维基百科</p>

<p>闭包是能够指向独立自由变量的函数。换句话说，定义在闭包中的函数能够“记住”定义它的环境。&mdash;&mdash;-mozilla社区</p>

<p>闭包是一种特殊的对象。它由两部分构成：函数，以及创建该函数的环境。环境由闭包创建时在作用域中的任何局部变量组成。&mdash;&mdash;-mozilla社区</p>

<p><strong>JavaScript的作用域是让JavaScript拥有闭包特性的根本。</strong></p>

<p>看下面这段代码：</p>

<p>闭包是一个函数和该函数所引用的自由变量组成。在下面的代码中isBigEnough函数和它所引用的自由变量threshold组成了一个闭包。该闭包传递给了list对象的filter函数。filter函数会反复调用这个函数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">44</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">getNumberBigThan</span><span class="p">(</span><span class="nx">list</span><span class="p">,</span><span class="nx">threshold</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">list</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span> <span class="nx">isBigEnough</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">element</span> <span class="o">&gt;=</span> <span class="nx">threshold</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">filteredList</span> <span class="o">=</span> <span class="nx">getNumberBigThan</span><span class="p">(</span><span class="nx">list</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">filteredList</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面那个例子还不够清楚，再看下面这个：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">f1</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span><span class="err">　　　　</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">f2</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">n</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">n</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">f2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">f1</span><span class="p">(</span><span class="mi">999</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">());</span> <span class="c1">// 1000</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">result2</span> <span class="o">=</span> <span class="nx">f1</span><span class="p">(</span><span class="mi">499</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result2</span><span class="p">());</span> <span class="c1">// 500</span>
</span></code></pre></td></tr></table></div></figure>


<p>闭包f2由f2函数和它引用的自由变量n组成。在f1运行之后，将f2返回给了result对象。此时运行result就是运行f2，得到结果是1000。说明，闭包f2保留了创建它的环境，变量n并没有在离开函数f1之后被销毁。而且根据创建的环境不同，闭包有不同的实例。
最后看一个例子，来自：<a href="http://bonsaiden.github.io/JavaScript-Garden/zh/#function.closures">http://bonsaiden.github.io/JavaScript-Garden/zh/#function.closures</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Counter</span><span class="p">(</span><span class="nx">start</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">start</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">increment</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="nx">Counter</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">increment</span><span class="p">();</span>
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">get</span><span class="p">();</span> <span class="c1">// 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里，Counter函数返回两个闭包，函数increment和函数get。这两个函数都维持着对外部作用域Counter的引用，因此总可以访问此作用域内定义的变量count。</p>

<h2><strong>匿名函数立即执行</strong></h2>

<p>我们知道定义函数有两种方式：直接定义和函数表达式（函数字面量）</p>

<p>在定义函数字面量时，我们可以不写函数的名字，通过该在函数对象加上括号来执行该函数。</p>

<p>我们可以在定义该函数字面量时，直接将函数表达式执行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">funRun</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">c</span><span class="p">;</span>
</span><span class='line'><span class="p">}());</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">funRun</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果不return任何东西，则funRun为undefined。</p>

<p>通过匿名函数立即执行，可以实现匿名闭包。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">funRun</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}());</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">funRun</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<h2><strong>模块化</strong></h2>

<p>JavaScript最讨厌的特性就是它的全局性，随便创建一个方法或者变量，就是全局的，因为它没有像Java或者C++这种语言性上，类方式的模块划分，所以很容易冲突。</p>

<p>那JavaScript为了实现模块化只有借助于实现模式：模块模式。</p>

<p>利用JavaScript的作用域特性，以函数作为模块，利用闭包特性，定义不会污染全局的局部变量和方法（我这描述的有点抽象），直接看怎么写。</p>

<p>通过匿名函数的立即执行返回两个闭包add和sub。这样定义出来的方法add和sub不会暴露到全局中，同时还可以访问在函数内部定义的“私有变量”。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">fact</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">)</span> <span class="o">*</span> <span class="nx">fact</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">sub</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">)</span> <span class="o">*</span> <span class="nx">fact</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">add</span><span class="o">:</span> <span class="nx">add</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">sub</span><span class="o">:</span> <span class="nx">sub</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}());</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于模块化，还更多深入和高级的知识，例如导入全局变量（要用jQuery的时候）等。
可以查看这边译文。<a href="http://www.oschina.net/translate/javascript-module-pattern-in-depth">http://www.oschina.net/translate/javascript-module-pattern-in-depth</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript中你需要了解的基本知识（一）]]></title>
    <link href="http://benweizhu.github.io/blog/2014/03/22/something-you-need-to-know-about-javascript/"/>
    <updated>2014-03-22T14:16:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/03/22/something-you-need-to-know-about-javascript</id>
    <content type="html"><![CDATA[<p>对于初学JavaScript的人很容易去关注如何快速使用它，而忘记学好一门语言，应该首先掌握的基本知识，我就是这样。但是基础知识才是真正掌握一门语言最关键的部分，特别是JavaScript这个看上去好像和C++、Java相同，但实际上完全不是一回事的语言。</p>

<h2><strong>作用域</strong></h2>

<p>在编程语言中，作用域控制着变量与参数的可见性及生命周期，是一个很基本的问题。</p>

<p>但是和类C语言不同，JavaScript没有块级别作用域。</p>

<p>所谓块级作用域，即在一个代码块中定义的所有变量在代码块的外部都是不可见的，定义在代码块中的变量在代码块执行结束后会被释放掉。</p>

<p>Java中print方法中的a肯定是未定义的变量，编译器会标红，因为a是if块中的局部变量。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是在JavaScript中，a变量就可以被访问。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span><span class="p">(</span><span class="kc">true</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>JavaScript是由函数限定变量的作用域，意味着定义在函数中的参数和变量在函数外部是不可见的，而函数内可以访问函数外部的变量。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">carName</span> <span class="o">=</span> <span class="s1">&#39;byd&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">visitName</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">carName</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">visitName</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>JavaScript允许延迟声明变量，但是对于JavaScript缺少块级别作用域，所以这是个悲剧，推荐的做法是在函数的开头声明所有需要使用的变量。</p>

<h2><strong>词法作用域和作用域链</strong></h2>

<p>JavaScript是一种解释性语言。在解释过程中，JavaScript引擎是严格按照作用域来执行的。JavaScript语法采用的是词法作用域，也就是说JavaScript的变量和函数作用域是在定义时决定的，而不是执行时决定的，由于词法作用域决定于代码结构，所以JavaScript解释器只需要通过静态分析就能确定每个变量、函数的作用域，这种作用域也称为静态作用域。</p>

<p>JavaScript解释器通过作用域链把多个嵌套的作用域串联在一起，并借助这个链条帮助JavaScript解释器检索变量的值。这个作用域链相当于一个索引表，通过编号来存储它们的嵌套关系。当JavaScript解释器检索变量的值，会按照这个索引编号进行快速查找，直到找到全局对象为止，如果没有找到值，则传递一个undefined。</p>

<p>看下面这个比较经典的例子</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">carName</span> <span class="o">=</span> <span class="s1">&#39;byd&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">visitName</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">carName</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">carName</span> <span class="o">=</span> <span class="s1">&#39;bmw&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">carName</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">visitName</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一个输出结果：undefined</p>

<p>第二个输出结果：bmw</p>

<p>原因就是它的作用域由静态分析决定，他在visitName中找到carName。所以当遇到第一个console.log(carName)，它并没有到外层的作用域去寻找。</p>

<h2><strong>全局变量和全局对象</strong></h2>

<p>JavaScript中，在所有函数之外声明的变量为全局变量，而在函数内部声明的变量（通过var关键字）为局部变量。</p>

<p>全局变量在所有的作用域中都是可见的。这样一种特殊的变量，就算不是在JavaScript语言中，也是不受欢迎的。</p>

<p>但是在JavaScript中实在太容易就创建一个全局变量，所以要格外小心。</p>

<p>JavaScript中定义全局变量的方式有三种：</p>

<p>1.在任何函数之外定义一个var语句变量。</p>

<p>2.直接给全局对象添加一个属性，全局对象是全局变量和全局函数的容器。</p>

<p>3.没有使用var关键字声明的变量，它在任何作用域中被使用的时候，都会被当做全局变量（与上面介绍的作用域链相关）。</p>

<p>关于第3种情况：JavaScript有一种特性叫做隐式全局变量，不管一个变量有没有用过，JavaScript解释器反向遍历作用域链来查找该变量的var声明，如果没有找到，解释器则假定该变量是全局变量，如果该变量用于了赋值操作的话，之前如果不存在的话，解释器则会自动创建它。</p>

<p>上面提到了一个全局对象的概念，在Web浏览器中，全局对象的名称是windows。全局对象是预定义的对象，作为JavaScript的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象（例如，document（浏览器容器下））、函数（例如，parseInt()）和属性。</p>

<p>看下面这个例子，通过三种方式创建全局变量。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">carName</span> <span class="o">=</span> <span class="s1">&#39;byd&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">defineGlobalVariable</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">carPrice</span> <span class="o">=</span> <span class="mi">90000</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">carCount</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">defineGlobalVariable</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">print</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">carName</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">carPrice</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">carCount</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">print</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2><strong>对象</strong></h2>

<p>在JavaScript中，只有对象，一切都是对象。</p>

<p>首先要明确一点，JavaScript是面向对象的语言，但是它与C++、Java的面向对象不同。JavaScript不是基于类的面向对象，而是基于原型的面向对象，在JavaScript中没有类的概念。</p>

<p>在基于类的面向对象中，要创建对象，首先要有类。类是对象的抽象描述。类为它们的实例定义了严格不变的结构（属性）和严格不变的行为（方法）。</p>

<p>在基于原型的面向对象中，是动态可变的对象。他们可以很容易地改变（添加，删除，修改）自己的属性。在对对象的属性赋值的时候，如果某些属性不存在，则创建它并且将赋值与它进行初始化，如果它存在，就更新它。</p>

<p>JavaScript里的对象是无类型的，它是属性的容器，是一系列属性的集合，而每一个属性包含名字和值（键值对）。（是不是有点像Map）</p>

<p>属性的名字和属性的值没有限制，它可以是Number、String、Boolean或者另一个对象或者一个函数。</p>

<p>为什么属性可以是一个函数。原因是在JavaScript中，函数也是对象。</p>

<h2><strong>JavaScripty原生对象</strong></h2>

<p>Object|Number|String|Boolean|Date|Array|RegExp</p>

<p>Function</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">new</span> <span class="nb">Function</span> <span class="p">([</span><span class="nx">arg1</span><span class="p">[,</span> <span class="nx">arg2</span><span class="p">[,</span> <span class="p">...</span> <span class="nx">argN</span><span class="p">]],]</span> <span class="nx">functionBody</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在JavaScript中，一个函数实际上是一个Function对象。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s2">&quot;arg1&quot;</span><span class="p">,</span> <span class="s2">&quot;arg2&quot;</span><span class="p">,</span> <span class="s2">&quot;return arg1 * arg2;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">fn</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span><span class="c1">//6</span>
</span></code></pre></td></tr></table></div></figure>


<h2><strong>对象字面量</strong></h2>

<p>在JavaScript中创建对象有三种方式：</p>

<p>1.通过Object创建</p>

<p>2.通过自定义对象构造器创建</p>

<p>3.对象字面量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">audiCar</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'><span class="nx">audiCar</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;audi&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">audiCar</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">bmwCar</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myBmwCar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">bmwCar</span><span class="p">(</span><span class="s1">&#39;bmw&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myBmwCar</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//字面量模式</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bydCar</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;byd&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bydCar</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的代码可以看出，字面量写法的一个明显优势是，它的代码更少。</p>

<p>JavaScript中的字面量模式更加简洁、有表现力，而且在定义对象时不容易出错。</p>

<p>如果调用Object()创建对象，解析器需要顺着作用域链从当前作用域开始查找，直到找到全局Object()构造函数为止，如果你在某个域中创建了一个Object()方法就会有问题。</p>

<p>这里有一篇关于JavaScript创建对象的三种方式的介绍，是翻译自JavaScript Pattern。里面有更多关于为什么使用字面量定义对象更好。
<a href="https://github.com/TooBug/javascript.patterns/blob/master/chapter3.markdown">https://github.com/TooBug/javascript.patterns/blob/master/chapter3.markdown</a></p>

<h2><strong>函数</strong></h2>

<p>因为函数是对象，所以它们可以像任何其他的值一样被使用。函数可以保存在变量、对象和数组（数组也是对象）中。函数可以被当做参数传递给其他函数，函数也可以在返回函数。而且，因为函数是对象，所以函数可以拥有方法。</p>

<h2><strong>函数字面量（函数表达式）</strong></h2>

<p>定义函数有两种常用方法：</p>

<p>1.函数声明</p>

<p>2.函数字面量（函数表达式）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getCarName</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;byd&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getCarName</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">getCarPrice</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">90000</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getCarPrice</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>这两种写法相差无几，实际项目中都是可行的，我们可能也没有发现什么错误。但是，他们是有区别的，JavaScript解析器对函数声明和函数表达式并不是一视同仁的。</p>

<p>对于函数声明，JavaScript解析器会在预解析阶段优先读取函数声明的代码，以确保函数能够被引用到；而对于函数表达式，只有在执行到相应的语句时才进行解析。</p>

<p>在实际中，具体表现在：当使用函数声明的形式来定义函数时，可将调用放在函数声明之前，而使用函数表达式，这样做的话会报错。如下例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">runCar</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">runCar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;run car&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">runTrain</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">runTrain</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;run train&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一起学学Spring Batch（二）]]></title>
    <link href="http://benweizhu.github.io/blog/2014/03/13/spring-batch-job-by-example-2/"/>
    <updated>2014-03-13T14:31:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/03/13/spring-batch-job-by-example-2</id>
    <content type="html"><![CDATA[<p>所有的Batch处理都可以以一种最简单的方式描述，那就是<strong>读取大量的数据，然后进行某种方式的计算或者变形，最后输出写入到某个存储系统中</strong>。Spring Batch提供了三个简单的接口来帮助执行大量数据的读写，分别是<strong>ItemReader、ItmeWriter和ItermProcessor</strong>，你可以说它们是抽象出来的一种简单概念，它们同样也是针对不同类型数据的输入、输出和处理的方法。</p>

<p>我们最常用到的数据类型有三种：<strong>数据库、XML和Flat文件</strong>。为了能够清晰的描述Batch处理的流程，我们采用Flat这种文件作为输入和输出数据源，排除数据库操作和XML文件解析的带来的理解上的复杂度。</p>

<p>“Flat文件是一种包含没有相对关系结构的记录的文件。这个类型通常用来描述文字处理、其他结构字符或标记被移除了的文本。在任何事件中，许多用户把保存成“纯文本(text only)”类型的Microsoft Word文档叫做“Flat File(flat file)”。Flat File的另一种形式是包含了用ASCII码记录的，每个表单元由逗号分隔，用行表示记录组的文件。这种文件页叫做用逗号分隔数值(CSV)的文件.”</p>

<p><strong>这里给出一个例子</strong>，从一个csv格式的flat文件中读取英语、数学、文学的分数，然后计算平均分，将结果写入另一个csv格式文件。</p>

<p>首先是两个Model，分别是输入的数据模型ExamScore和输出的数据模型AverageScore。</p>

<figure class='code'><figcaption><span>ExamScore.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">spring</span><span class="o">.</span><span class="na">batch</span><span class="o">.</span><span class="na">model</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExamScore</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">english</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">math</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">literature</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getEnglish</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">english</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEnglish</span><span class="o">(</span><span class="kt">int</span> <span class="n">english</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">english</span> <span class="o">=</span> <span class="n">english</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMath</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">math</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMath</span><span class="o">(</span><span class="kt">int</span> <span class="n">math</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">math</span> <span class="o">=</span> <span class="n">math</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getLiterature</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">literature</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLiterature</span><span class="o">(</span><span class="kt">int</span> <span class="n">literature</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">literature</span> <span class="o">=</span> <span class="n">literature</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>AverageScore.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">spring</span><span class="o">.</span><span class="na">batch</span><span class="o">.</span><span class="na">model</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AverageScore</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">double</span> <span class="n">score</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getScore</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">score</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setScore</span><span class="o">(</span><span class="kt">double</span> <span class="n">score</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">score</span> <span class="o">=</span> <span class="n">score</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后是Processor，这里实现ItemProcessor接口。在process方法中传入输入数据模型，返回输出数据模型。</p>

<figure class='code'><figcaption><span>ScoreProcessor.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">spring</span><span class="o">.</span><span class="na">batch</span><span class="o">.</span><span class="na">processor</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.spring.batch.model.AverageScore</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.spring.batch.model.ExamScore</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.batch.item.ItemProcessor</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ScoreProcessor</span> <span class="kd">implements</span> <span class="n">ItemProcessor</span><span class="o">&lt;</span><span class="n">ExamScore</span><span class="o">,</span> <span class="n">AverageScore</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="n">COUNT</span> <span class="o">=</span> <span class="mf">3.0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">AverageScore</span> <span class="nf">process</span><span class="o">(</span><span class="n">ExamScore</span> <span class="n">examScore</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">AverageScore</span> <span class="n">averageScore</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AverageScore</span><span class="o">();</span>
</span><span class='line'>      <span class="n">averageScore</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">examScore</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>      <span class="n">averageScore</span><span class="o">.</span><span class="na">setScore</span><span class="o">(</span><span class="n">calculateAverageScore</span><span class="o">(</span><span class="n">examScore</span><span class="o">));</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">averageScore</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">double</span> <span class="nf">calculateAverageScore</span><span class="o">(</span><span class="n">ExamScore</span> <span class="n">examScore</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">(</span><span class="n">examScore</span><span class="o">.</span><span class="na">getEnglish</span><span class="o">()</span> <span class="o">+</span> <span class="n">examScore</span><span class="o">.</span><span class="na">getLiterature</span><span class="o">()</span> <span class="o">+</span> <span class="n">examScore</span><span class="o">.</span><span class="na">getMath</span><span class="o">())</span> <span class="o">/</span> <span class="n">COUNT</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>和上篇文章的一样，在spring-batch-beans.xml中定义了关于Sping Batch的一些基础Bean。</p>

<figure class='code'><figcaption><span>spring-batch-beans.xml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;transactionManager&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.batch.support.transaction.ResourcelessTransactionManager&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;jobRepository&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;transactionManager&quot;</span> <span class="na">ref=</span><span class="s">&quot;transactionManager&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;jobLauncher&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.batch.core.launch.support.SimpleJobLauncher&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;jobRepository&quot;</span> <span class="na">ref=</span><span class="s">&quot;jobRepository&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>重点是下面一个xml文件spring-batch-jobs.xml，在这个里面定义所有关于Batch Job的具体内容。</p>

<figure class='code'><figcaption><span>spring-batch-jobs.xml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:batch=</span><span class="s">&quot;http://www.springframework.org/schema/batch&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/batch</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/batch/spring-batch-2.2.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&quot;spring-batch-beans.xml&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;csvFileReader&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.batch.item.file.FlatFileItemReader&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;resource&quot;</span> <span class="na">value=</span><span class="s">&quot;file:/Users/twer/Documents/gradle-project/spring-batch-example/src/main/resources/reader_file.csv&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;lineMapper&quot;</span> <span class="na">ref=</span><span class="s">&quot;lineMapper&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;lineMapper&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.batch.item.file.mapping.DefaultLineMapper&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;lineTokenizer&quot;</span> <span class="na">ref=</span><span class="s">&quot;lineTokenizer&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;fieldSetMapper&quot;</span> <span class="na">ref=</span><span class="s">&quot;fieldSetMapper&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;lineTokenizer&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.batch.item.file.transform.DelimitedLineTokenizer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;delimiter&quot;</span> <span class="na">value=</span><span class="s">&quot;,&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;names&quot;</span> <span class="na">value=</span><span class="s">&quot;id,english,math,literature&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;fieldSetMapper&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;targetType&quot;</span> <span class="na">value=</span><span class="s">&quot;me.zeph.spring.batch.model.ExamScore&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;csvFileProcessor&quot;</span> <span class="na">class=</span><span class="s">&quot;me.zeph.spring.batch.processor.ScoreProcessor&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;csvFileWriter&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.batch.item.file.FlatFileItemWriter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;resource&quot;</span> <span class="na">value=</span><span class="s">&quot;file:/Users/twer/Documents/gradle-project/spring-batch-example/src/main/resources/writer_file.csv&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;lineAggregator&quot;</span> <span class="na">ref=</span><span class="s">&quot;lineAggregator&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;lineAggregator&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.batch.item.file.transform.DelimitedLineAggregator&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;delimiter&quot;</span> <span class="na">value=</span><span class="s">&quot;,&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;fieldExtractor&quot;</span> <span class="na">ref=</span><span class="s">&quot;fieldExtractor&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;fieldExtractor&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;names&quot;</span> <span class="na">value=</span><span class="s">&quot;id,score&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;batch:job</span> <span class="na">id=</span><span class="s">&quot;fileTransfer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;batch:step</span> <span class="na">id=</span><span class="s">&quot;step&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;batch:tasklet&gt;</span>
</span><span class='line'>                <span class="nt">&lt;batch:chunk</span> <span class="na">reader=</span><span class="s">&quot;csvFileReader&quot;</span> <span class="na">processor=</span><span class="s">&quot;csvFileProcessor&quot;</span> <span class="na">writer=</span><span class="s">&quot;csvFileWriter&quot;</span> <span class="na">commit-interval=</span><span class="s">&quot;1&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/batch:tasklet&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/batch:step&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/batch:job&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>让我们来一起分析一下上面这个xml配置。</p>

<p><strong>FlatFileItemReader</strong>是Flat文件的读取类，可以按行读取输入文件。这里传入两个参数，LineMapper和Resource。</p>

<p>Resource顾名思义，用来指定数据源。</p>

<p>LineMapper用于将文件中的每行数据映射到对应的数据模型，这里使用DefaultLineMapper。LineMapper中传入两个参数，分别是行分词器LineTokenizer和域映射器FieldSetMapper。</p>

<p>对应的LineTokenizer采用基于分隔符的分词器，而对应的FieldSetMapper需要传入待映射的数据模型类型。</p>

<p>对于<strong>FlatFileItemWriter</strong>，同样要配置对应的输出源Resource和行聚合器lineAggregator。</p>

<p>对于lineAggregator这里同样采用基于分隔符的聚合器DelimitedLineAggregator，需要给聚合器配置对应的分隔符（比如“,”）和域提取器BeanWrapperFieldExtractor。</p>

<p>在域提取器BeanWrapperFieldExtractor中配置要被提取的值。</p>

<p>最后就是定义具体的Batch Job。</p>

<figure class='code'><figcaption><span>spring-batch-jobs.xml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;batch:job</span> <span class="na">id=</span><span class="s">&quot;fileTransfer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;batch:step</span> <span class="na">id=</span><span class="s">&quot;step&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;batch:tasklet&gt;</span>
</span><span class='line'>                <span class="nt">&lt;batch:chunk</span> <span class="na">reader=</span><span class="s">&quot;csvFileReader&quot;</span> <span class="na">processor=</span><span class="s">&quot;csvFileProcessor&quot;</span> <span class="na">writer=</span><span class="s">&quot;csvFileWriter&quot;</span> <span class="na">commit-interval=</span><span class="s">&quot;1&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/batch:tasklet&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/batch:step&gt;</span>
</span><span class='line'><span class="nt">&lt;/batch:job&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果：上面是输入，下面是输出</p>

<pre><code>1,100,80,80
2,100,70,80
3,100,80,70

1,86.66666666666667
2,83.33333333333333
3,83.33333333333333
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一起学学Spring Batch（一）]]></title>
    <link href="http://benweizhu.github.io/blog/2014/03/08/spring-batch-job-by-example/"/>
    <updated>2014-03-08T17:52:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/03/08/spring-batch-job-by-example</id>
    <content type="html"><![CDATA[<p>批处理应用（Batch Application）主要是在没有人工干预的情况下处理大量数据。比如，不同系统之间数据文件的导入和导出，数据的计算，定期生成财务报告等等。</p>

<p>Spring Batch是一个轻量级的，复杂的Batch框架，能够让你开发针对企业级系统日常操作的Batch应用。</p>

<p><strong>Spring Batch提供的有用特性：</strong></p>

<ol>
<li>Spring框架中的基础，依赖注入，切面编程，企业级别的支持</li>
<li>面向批处理的运行时，有效的驱动批处理应用的流程</li>
<li>有效处理数据，以最佳策略读写数据</li>
<li>可用的现成组件，提供能够定位到不同批处理场景的组件</li>
</ol>


<p>Spring框架以轻量级容器闻名，提供配置方式来完成应用程序组件的组装。</p>

<p>Spring Batch对Spring框架进行了扩展，提供了专用的xml的命名空间来配置批处理的过程。</p>

<p><strong>有效处理数据</strong></p>

<p>以一种经典场景为例：从一个数据系统读取数据存储到另一个数据系统中。如果一次将整个数据系统中的数据读入到内存，JVM随时可能Out of Memory。当然将所有数据读入到内存肯定不是最好的办法。</p>

<p>Spring Batch使用一种更加有效的办法，叫做Chunk Processing（块处理方式）：以数据流的方式读取输入的源数据，并处理一定数量（这一块）的记录，并写入到对应的组件。</p>

<p>这个块的大小可以改变，所以仍然可以让批处理一条一条的处理数据。</p>

<p><strong>Ready-to-use Component</strong></p>

<p>Spring Batch提供了基础设施来执行块处理，并代理I/O到专用的组件，并命名为reader和writer。</p>

<p>Spring为一些通用的批处理场景提供可用的组件，这些组件可以让你更加专注于业务逻辑。</p>

<p>Spring Batch对reader和writer场景的支持技术。</p>

<table>
<thead>
<tr>
<th>数据类型     </th>
<th> 技术格式</th>
</tr>
</thead>
<tbody>
<tr>
<td>Database </td>
<td> JDBC</td>
</tr>
<tr>
<td>Database </td>
<td> Hibernate</td>
</tr>
<tr>
<td>Database </td>
<td> JPA</td>
</tr>
<tr>
<td>Database </td>
<td> iBatis</td>
</tr>
<tr>
<td>File </td>
<td> Flatfile</td>
</tr>
<tr>
<td>File </td>
<td> XML</td>
</tr>
</tbody>
</table>


<p>当然Spring Batch支持的不止这些技术。当然如果没有你需要的实现，你也可以自己是实现对应的组件。</p>

<p><strong>Spring Batch不是Scheduler</strong></p>

<p>Spring Batch可以驱动批处理流程但是不会提供启动它们的支持，特别是基于时间的启动。Spring Batch一般会讲这些工作代理给其他Scheduler工具，例如Quartz或者Cron。</p>

<p><strong>下面是一个Spring Batch Job的Hello World Example</strong></p>

<figure class='code'><figcaption><span>build.gradle </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'> <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'> <span class="n">compile</span> <span class="s1">&#39;org.springframework.batch:spring-batch-core:2.2.5.RELEASE&#39;</span>
</span><span class='line'> <span class="n">compile</span> <span class="s1">&#39;org.springframework:spring-context:3.2.8.RELEASE&#39;</span>
</span><span class='line'> <span class="n">testCompile</span> <span class="nl">group:</span> <span class="s1">&#39;junit&#39;</span><span class="o">,</span> <span class="nl">name:</span> <span class="s1">&#39;junit&#39;</span><span class="o">,</span> <span class="nl">version:</span> <span class="s1">&#39;4.+&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这里定义一个具体的task。</p>

<figure class='code'><figcaption><span>tasklet.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">spring</span><span class="o">.</span><span class="na">batch</span><span class="o">.</span><span class="na">tasklet</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.batch.core.StepContribution</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.batch.core.scope.context.ChunkContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.batch.core.step.tasklet.Tasklet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.batch.repeat.RepeatStatus</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">batch</span><span class="o">.</span><span class="na">repeat</span><span class="o">.</span><span class="na">RepeatStatus</span><span class="o">.</span><span class="na">FINISHED</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloTasklet</span> <span class="kd">implements</span> <span class="n">Tasklet</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">RepeatStatus</span> <span class="nf">execute</span><span class="o">(</span><span class="n">StepContribution</span> <span class="n">contribution</span><span class="o">,</span> <span class="n">ChunkContext</span> <span class="n">chunkContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello Spring Batch!&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">FINISHED</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>beans.xml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:batch=</span><span class="s">&quot;http://www.springframework.org/schema/batch&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/batch</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/batch/spring-batch-2.2.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;transactionManager&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.batch.support.transaction.ResourcelessTransactionManager&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;jobRepository&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;transactionManager&quot;</span> <span class="na">ref=</span><span class="s">&quot;transactionManager&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;jobLauncher&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.batch.core.launch.support.SimpleJobLauncher&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;jobRepository&quot;</span> <span class="na">ref=</span><span class="s">&quot;jobRepository&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在xml中配置一个具体batch job，这里只有一步，那就是执行上面定义的task。</p>

<figure class='code'><figcaption><span>batch-job.xml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:batch=</span><span class="s">&quot;http://www.springframework.org/schema/batch&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/batch</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/batch/spring-batch-2.2.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&quot;spring-batch-beans.xml&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;helloTasklet&quot;</span> <span class="na">class=</span><span class="s">&quot;me.zeph.spring.batch.tasklet.HelloTasklet&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;batch:job</span> <span class="na">id=</span><span class="s">&quot;helloJob&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;batch:step</span> <span class="na">id=</span><span class="s">&quot;helloStep&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;batch:tasklet</span> <span class="na">ref=</span><span class="s">&quot;helloTasklet&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/batch:step&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/batch:job&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在main函数中，通过JobLauncher来运行一个Job。</p>

<figure class='code'><figcaption><span>main.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">spring</span><span class="o">.</span><span class="na">batch</span><span class="o">.</span><span class="na">tasklet</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.batch.core.Job</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.batch.core.JobExecution</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.batch.core.JobParameters</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.batch.core.launch.JobLauncher</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TaskletRunner</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span><span class="o">[]</span> <span class="n">configLocations</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;spring-batch-beans.xml&quot;</span><span class="o">,</span> <span class="s">&quot;spring-batch-jobs.xml&quot;</span><span class="o">};</span>
</span><span class='line'>      <span class="n">ApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="n">configLocations</span><span class="o">);</span>
</span><span class='line'>      <span class="n">JobLauncher</span> <span class="n">jobLauncher</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">JobLauncher</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Job</span> <span class="n">job</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">Job</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="n">JobExecution</span> <span class="n">jobExecution</span> <span class="o">=</span> <span class="n">jobLauncher</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">job</span><span class="o">,</span> <span class="k">new</span> <span class="nf">JobParameters</span><span class="o">());</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;JOB EXECUTION STATUS:&quot;</span> <span class="o">+</span> <span class="n">jobExecution</span><span class="o">.</span><span class="na">getExitStatus</span><span class="o">().</span><span class="na">getExitCode</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring AOP by Example]]></title>
    <link href="http://benweizhu.github.io/blog/2014/02/23/spring-aop-by-example/"/>
    <updated>2014-02-23T16:08:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/02/23/spring-aop-by-example</id>
    <content type="html"><![CDATA[<p>OOP编程中以对象为核心，系统软件是由相互依赖、相互协作的对象组成。对象在程序中被抽象为类，它们拥有一组属性和行为。类与类之间可以通过继承和组合实现分层和协作，它可以将具有相同属性或者相同功能的代码抽象到一个分明的层次，从而有效的管理代码，降低复杂度。</p>

<p>但随着业务复杂度的增加，客户不断提出新的需求。有些特定的需求虽然可以采用OOP解决，但却不是最好的方式，说的直观一点，并不是最节省代码编写工作量的。</p>

<p>例如：假设你有一个图形类Graphic，它里面有很多的set方法。新的需求是在每一次set之后，就直接将结果绘画出来（假设你有一个方法Canvas.paint()）。普通的做法是在set方法的末尾，添加一行调用paint()方法的代码。如果该Graphic类中只有两三个set方法，那到没什么问题，但是如果它有100个呢？（有点极限）而且如果你添加了一个新的set方法，还要记住不能忘记添加paint()方法调用。</p>

<p>AOP（aspect-oriented programming，面向方面/切面编程）能够很好的解决这个问题，你只需要告诉它，在每一个set方法之后，调用一次paint()方法。</p>

<p>AOP能够很好地来处理一些具有横切性质的系统级服务，如事务管理、安全检查、日志服务等。</p>

<p><strong>AOP中的一些概念</strong>：</p>

<p>切面（Aspect）：一个关注点的模块化，该关注点会横切多个对象。在Spring AOP中有两种方式定义一个Aspect，通过在xml中配置，或者在Java类中使用@AspectJ的注解。</p>

<p>连接点（Joint point）：在程序执行过程中某个特定的点，比如某个方法调用的时候或者异常处理的时候。在Spring AOP中，一个连接点通常表示一个方法的执行。</p>

<p>通知（Advice）：在切面（Aspect）的某个特定的连接点（Joint point）上执行的动作。通知的类型有很多种，例如：“before”和“after”等等。</p>

<p>切入点（Point cut）：匹配连接点（Joint point）的断言（匹配连接点的公式）。通知（Advice）会和一个切入点（Point cut）表达式关联，并在满足这个切入点（Point cut）的连接点（Joint point）上运行。切入点如何和连接点匹配是AOP的核心。</p>

<p>在Spring AOP中的术语实在是太多了，往往其实不太让人好理解，也成为我们学习的绊脚石。</p>

<p>这里尝试用简单的话总结：</p>

<p><strong>通知就是要执行的动作，连接点就是程序中某个要插入动作（通知）的特定点，可能在该特定点之前插入（before），可能在它之后插入（after），或者在它抛出异常后插入（after throwing），切入点定义了如何找到该连接点的匹配模式，它们组合在一起，定义一个完整的切面。</strong></p>

<p>这里主要关注的如何使用Spring AOP，关于实现的方式，这里简单的提一下：</p>

<p>AOP实现的方式有三种：<strong>静态代理，JDK动态代理，CGLib动态里</strong>。Spring AOP采用的是动态代理方式实现AOP。</p>

<p>如果深入了解可以参考：<a href="http://developer.51cto.com/art/201309/410861_all.htm">http://developer.51cto.com/art/201309/410861_all.htm</a></p>

<p>通过Spring编写AOP代码方式有两种：<strong>1.通过@AspectJ的注解实现。2.通过在XML中配置</strong></p>

<p>这里看一个通过XML配置方式实现AOP的例子：</p>

<figure class='code'><figcaption><span>build.gradle </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'> <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'> <span class="n">compile</span> <span class="s1">&#39;org.springframework:spring-context:3.2.8.RELEASE&#39;</span>
</span><span class='line'> <span class="n">compile</span> <span class="s1">&#39;org.aspectj:aspectjweaver:1.7.4&#39;</span>
</span><span class='line'> <span class="n">testCompile</span> <span class="nl">group:</span> <span class="s1">&#39;junit&#39;</span><span class="o">,</span> <span class="nl">name:</span> <span class="s1">&#39;junit&#39;</span><span class="o">,</span> <span class="nl">version:</span> <span class="s1">&#39;4.+&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里需要添加aspectjweaver的依赖，否则会报class not found的异常。</p>

<figure class='code'><figcaption><span>HelloTransaction.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">aop</span><span class="o">.</span><span class="na">beans</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloTransaction</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>   <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">flag</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFlag</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">flag</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">flag</span> <span class="o">=</span> <span class="n">flag</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">startTransaction</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">process</span><span class="o">());</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">private</span> <span class="n">String</span> <span class="nf">process</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">flag</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="s">&quot;start transaction&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="o">(</span><span class="s">&quot;transaction exception&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里定义了“连接点类”，要被插入动作或者要被增强的类。</p>

<figure class='code'><figcaption><span>TransactionLogger.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">zeph</span><span class="o">.</span><span class="na">aop</span><span class="o">.</span><span class="na">aspect</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TransactionLogger</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">beforeTransaction</span><span class="o">(){</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;before transaction&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterTransaction</span><span class="o">(){</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;after transaction&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">transactionThrowException</span><span class="o">(){</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;transaction throw exception&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>“通知类”，定义了要在连接点执行的动作。</p>

<figure class='code'><figcaption><span>bean.xml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:aop=</span><span class="s">&quot;http://www.springframework.org/schema/aop&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/beans</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/aop</span>
</span><span class='line'><span class="s">           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;helloTransactionSuccess&quot;</span> <span class="na">class=</span><span class="s">&quot;me.zeph.aop.beans.HelloTransaction&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;flag&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;transactionLogger&quot;</span> <span class="na">class=</span><span class="s">&quot;me.zeph.aop.aspect.TransactionLogger&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;aop:config&gt;</span>
</span><span class='line'>        <span class="nt">&lt;aop:aspect</span> <span class="na">id=</span><span class="s">&quot;transactionAspect&quot;</span> <span class="na">ref=</span><span class="s">&quot;transactionLogger&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;aop:pointcut</span> <span class="na">id=</span><span class="s">&quot;startTransaction&quot;</span> <span class="na">expression=</span><span class="s">&quot;execution(public * me.zeph.aop.beans.*.startTransaction(..))&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;aop:before</span> <span class="na">pointcut-ref=</span><span class="s">&quot;startTransaction&quot;</span> <span class="na">method=</span><span class="s">&quot;beforeTransaction&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;aop:after-throwing</span> <span class="na">pointcut-ref=</span><span class="s">&quot;startTransaction&quot;</span> <span class="na">method=</span><span class="s">&quot;transactionThrowException&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;aop:after</span> <span class="na">pointcut-ref=</span><span class="s">&quot;startTransaction&quot;</span> <span class="na">method=</span><span class="s">&quot;afterTransaction&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/aop:aspect&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/aop:config&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里重点看定义切面的xml配置文件，首先定义了对应的两个Bean，然后在&lt;aop:config>标签定义中定义切面。在&lt;aop:config>标签下有三种标签：</p>

<p>&lt;aop:pointcut>：用来定义切入点（用来找到连接点的匹配的模式），该切入点可以重用；</p>

<p>&lt;aop:advisor>：用来定义只有一个通知和一个切入点的切面；</p>

<p>&lt;aop:aspect>：用来定义切面，该切面可以包含多个切入点和通知，而且标签内部的通知和切入点定义是无序的；它和advisor的区别就在此，advisor只包含一个通知和一个切入点。</p>

<p>在&lt;aop:aspect>标签下有&lt;aop:pointcut>切入点标签，和一堆通知标签，例如before和after。</p>

<p>&lt;aop:aspect>中的ref用于指定“通知类”，指定要添加的行为来自于哪个类。</p>

<p>&lt;aop:pointcut>中的expression用于定义寻找连接点的匹配模式。</p>

<p>&lt;aop:before>等通知标签中的pointcut-ref用于指定要在哪个连接点插入（增强）通知（行为）。</p>

<p>通过AOP，我并不需要改变HelloTransaction.startTransaction()中的业务逻辑代码，就可以给它增加例如，日志，事务管理等功能。</p>

<p>这就是AOP强大的位置。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cordova探索之旅系列（三）]]></title>
    <link href="http://benweizhu.github.io/blog/2014/01/19/cordova-using-accelerometer/"/>
    <updated>2014-01-19T15:39:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/01/19/cordova-using-accelerometer</id>
    <content type="html"><![CDATA[<p>自从3.0之后，Cordova默认是关闭所有关于设备原生特性功能的，所以我们要通过添加插件来启动原生特性。</p>

<p>这里以Accelerometer（加速度感应器）为例，来学习如何使用设备原生特性。</p>

<p><strong>1.添加插件</strong></p>

<p>首先，需要在工程目录下，通过CLI命令添加插件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cordova plugin add org.apache.cordova.device-motion
</span></code></pre></td></tr></table></div></figure>


<p>通过ls命令，可以查看当前项目下，已经安装的插件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cordova plugin ls
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.在config.xml文件中配置该特性</strong></p>

<p>路径：res/xml/config.xml</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;feature</span> <span class="na">name=</span><span class="s">&quot;Accelerometer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;android-package&quot;</span> <span class="na">value=</span><span class="s">&quot;org.apache.cordova.devicemotion.AccelListener&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/feature&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整配置如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39;?&gt;</span>
</span><span class='line'><span class="nt">&lt;widget</span> <span class="na">id=</span><span class="s">&quot;com.example.hello.HelloWorld&quot;</span> <span class="na">version=</span><span class="s">&quot;0.0.1&quot;</span>
</span><span class='line'><span class="na">xmlns=</span><span class="s">&quot;http://www.w3.org/ns/widgets&quot;</span> <span class="na">xmlns:cdv=</span><span class="s">&quot;http://cordova.apache.org/ns/1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>HelloCordova<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;description&gt;</span>
</span><span class='line'>        A sample Apache Cordova application that responds to the deviceready event.
</span><span class='line'>    <span class="nt">&lt;/description&gt;</span>
</span><span class='line'>    <span class="nt">&lt;author</span> <span class="na">email=</span><span class="s">&quot;dev@cordova.apache.org&quot;</span> <span class="na">href=</span><span class="s">&quot;http://cordova.io&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        Apache Cordova Team
</span><span class='line'>    <span class="nt">&lt;/author&gt;</span>
</span><span class='line'>    <span class="nt">&lt;content</span> <span class="na">src=</span><span class="s">&quot;index.html&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;access</span> <span class="na">origin=</span><span class="s">&quot;*&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;feature</span> <span class="na">name=</span><span class="s">&quot;Accelerometer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;android-package&quot;</span> <span class="na">value=</span><span class="s">&quot;org.apache.cordova.devicemotion.AccelListener&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/feature&gt;</span>
</span><span class='line'><span class="nt">&lt;/widget&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>某些插件还需要在Android的AndroidManifest.xml中添加uses-permission</p>

<p>例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，这里不需要！</p>

<p><strong>3.API</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">navigator</span><span class="p">.</span><span class="nx">accelerometer</span><span class="p">.</span><span class="nx">getCurrentAcceleration</span><span class="p">(</span><span class="nx">onSuccess</span><span class="p">,</span> <span class="nx">onError</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>onSuccess和onError是对应的回调函数</p>

<p><strong>4.完整例子</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Acceleration Example<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span> <span class="na">src=</span><span class="s">&quot;cordova.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;deviceready&quot;</span><span class="p">,</span> <span class="nx">onDeviceReady</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">onDeviceReady</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">getCurrrentAcceleration</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">navigator</span><span class="p">.</span><span class="nx">accelerometer</span><span class="p">.</span><span class="nx">getCurrentAcceleration</span><span class="p">(</span><span class="nx">onSuccess</span><span class="p">,</span> <span class="nx">onError</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">onSuccess</span><span class="p">(</span><span class="nx">acceleration</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Acceleration X: &#39;</span> <span class="o">+</span> <span class="nx">acceleration</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span> <span class="o">+</span>
</span><span class='line'>              <span class="s1">&#39;Acceleration Y: &#39;</span> <span class="o">+</span> <span class="nx">acceleration</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span> <span class="o">+</span>
</span><span class='line'>              <span class="s1">&#39;Acceleration Z: &#39;</span> <span class="o">+</span> <span class="nx">acceleration</span><span class="p">.</span><span class="nx">z</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span> <span class="o">+</span>
</span><span class='line'>              <span class="s1">&#39;Timestamp: &#39;</span>      <span class="o">+</span> <span class="nx">acceleration</span><span class="p">.</span><span class="nx">timestamp</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">onError</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;onError!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="na">onClick=</span><span class="s">&quot;getCurrrentAcceleration()&quot;</span><span class="nt">&gt;</span>click<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果用Android的原生API，用Java代码来实现相同功能呢，如下：</p>

<p>Activity</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.hardware.Sensor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.hardware.SensorEvent</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.hardware.SensorEventListener</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.hardware.SensorManager</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.shakeshake.R</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.shakeshake.fragment.FireMissilesDialogFragment</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">android</span><span class="o">.</span><span class="na">hardware</span><span class="o">.</span><span class="na">Sensor</span><span class="o">.</span><span class="na">TYPE_ACCELEROMETER</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">android</span><span class="o">.</span><span class="na">hardware</span><span class="o">.</span><span class="na">SensorManager</span><span class="o">.</span><span class="na">SENSOR_DELAY_NORMAL</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">SensorManager</span> <span class="n">sensorManager</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Sensor</span> <span class="n">sensor</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">AccelerometerListener</span> <span class="n">listener</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">text</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main</span><span class="o">);</span>
</span><span class='line'>        <span class="n">initSensor</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initSensor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sensorManager</span> <span class="o">=</span> <span class="o">(</span><span class="n">SensorManager</span><span class="o">)</span> <span class="n">getSystemService</span><span class="o">(</span><span class="n">SENSOR_SERVICE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">sensor</span> <span class="o">=</span> <span class="n">sensorManager</span><span class="o">.</span><span class="na">getDefaultSensor</span><span class="o">(</span><span class="n">TYPE_ACCELEROMETER</span><span class="o">);</span>
</span><span class='line'>        <span class="n">listener</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AccelerometerListener</span><span class="o">();</span>
</span><span class='line'>        <span class="n">sensorManager</span><span class="o">.</span><span class="na">registerListener</span><span class="o">(</span><span class="n">listener</span><span class="o">,</span> <span class="n">sensor</span><span class="o">,</span> <span class="n">SENSOR_DELAY_NORMAL</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onStop</span><span class="o">();</span>
</span><span class='line'>        <span class="n">sensorManager</span><span class="o">.</span><span class="na">unregisterListener</span><span class="o">(</span><span class="n">listener</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendMessage</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">FireMissilesDialogFragment</span> <span class="n">fireMissilesDialogFragment</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FireMissilesDialogFragment</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
</span><span class='line'>        <span class="n">fireMissilesDialogFragment</span><span class="o">.</span><span class="na">show</span><span class="o">(</span><span class="n">getFragmentManager</span><span class="o">(),</span> <span class="s">&quot;some tag&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">class</span> <span class="nc">AccelerometerListener</span> <span class="kd">implements</span> <span class="n">SensorEventListener</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSensorChanged</span><span class="o">(</span><span class="n">SensorEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">text</span> <span class="o">=</span> <span class="s">&quot;Acceleration X: \n&quot;</span> <span class="o">+</span> <span class="n">event</span><span class="o">.</span><span class="na">values</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s">&quot;Acceleration Y: \n&quot;</span> <span class="o">+</span> <span class="n">event</span><span class="o">.</span><span class="na">values</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s">&quot;Acceleration Z: \n&quot;</span> <span class="o">+</span> <span class="n">event</span><span class="o">.</span><span class="na">values</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s">&quot;Timestamp: \n&quot;</span> <span class="o">+</span> <span class="n">event</span><span class="o">.</span><span class="na">timestamp</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAccuracyChanged</span><span class="o">(</span><span class="n">Sensor</span> <span class="n">sensor</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dialog</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">android.app.AlertDialog</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Dialog</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.DialogFragment</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.DialogInterface</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.zeph.shakeshake.R</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FireMissilesDialogFragment</span> <span class="kd">extends</span> <span class="n">DialogFragment</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">text</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">FireMissilesDialogFragment</span><span class="o">(</span><span class="n">String</span> <span class="n">text</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">text</span> <span class="o">=</span> <span class="n">text</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Dialog</span> <span class="nf">onCreateDialog</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">AlertDialog</span><span class="o">.</span><span class="na">Builder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AlertDialog</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="n">getActivity</span><span class="o">());</span>
</span><span class='line'>        <span class="n">builder</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">dialog_accelerometer</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setMessage</span><span class="o">(</span><span class="n">text</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setNeutralButton</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">ok</span><span class="o">,</span> <span class="k">new</span> <span class="n">DialogInterface</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">DialogInterface</span> <span class="n">dialogInterface</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">});</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>main.xml</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>              <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>              <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>              <span class="na">android:layout_height=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>        <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span> <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;@string/click&quot;</span>
</span><span class='line'>            <span class="na">android:onClick=</span><span class="s">&quot;sendMessage&quot;</span>
</span><span class='line'>            <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cordova探索之旅系列（二）]]></title>
    <link href="http://benweizhu.github.io/blog/2014/01/18/cordova-plugin/"/>
    <updated>2014-01-18T15:28:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/01/18/cordova-plugin</id>
    <content type="html"><![CDATA[<p>在Cordova中有一个很重要的概念：<strong>插件</strong>。</p>

<p>插件会提供访问Cordova核心API的接口。</p>

<p>插件是一些附加的代码，它能够提供访问原生组件的接口。一般情况下，你都需要添加一些插件以启动Cordova设备级别的特性。</p>

<p>插件由官方和社区提供，可以在plugins.cordova.io上找到，当然还可以在命令行中去搜索插件。</p>

<p>从3.0之后，Cordova将所有设备的API都作为插件，并默认设置为是不启动的。</p>

<p>那么，如何添加插件呢？两种方式。</p>

<p><strong>第一种是使用CLI命令行。</strong></p>

<p><strong>第二种是使用更低级别的命令行Plugman。</strong></p>

<p>两个的区别在于，Plugman只能一次添加一个平台的插件，而<strong>CLI命令行会添加所有平台的插件</strong>。所以如果你只在单个平台上工作，使用Plugman就显得更合理。</p>

<h3>使用CLI命令行添加插件：</h3>

<p><strong>1.添加插件</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cordova plugin add org.apache.cordova.camera
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.删除插件</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cordova plugin rm org.apache.cordova.camera
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.查看当前已有插件</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cordova plugin ls
</span></code></pre></td></tr></table></div></figure>


<p><strong>4.根据关键字搜索插件</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cordova plugin search bar code
</span></code></pre></td></tr></table></div></figure>


<p><strong>5.社区中会提供很多插件，但是如果它没有注册到registry.cordova.io，你可以通过仓库地址添加</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cordova plugin add https://github.com/apache/cordova-plugin-console.git
</span></code></pre></td></tr></table></div></figure>


<h3>使用plugman添加插件：</h3>

<p>首先你需要安装plugman</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install -g plugman
</span></code></pre></td></tr></table></div></figure>


<p><strong>1.添加一个插件</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>plugman --platform &lt;ios<span class="p">|</span>amazon-fireos<span class="p">|</span>android<span class="p">|</span>blackberry10<span class="p">|</span>wp7<span class="p">|</span>wp8&gt; --project &lt;directory&gt; --plugin &lt;name<span class="p">|</span>url<span class="p">|</span>path&gt; <span class="o">[</span>--plugins_dir &lt;directory&gt;<span class="o">]</span> <span class="o">[</span>--www &lt;directory&gt;<span class="o">]</span> <span class="o">[</span>--variable &lt;name&gt;<span class="o">=</span>&lt;value&gt; <span class="o">[</span>--variable &lt;name&gt;<span class="o">=</span>&lt;value&gt; ...<span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过plugman命令行将一个插件加到一个Cordova工程中。你至少要指定平台信息、Cordova项目位置。</p>

<p><strong>name</strong>：插件的目录名称。它必须是存在于plugins_dirpath路径下或者在Cordova中有注册。</p>

<p><strong>url</strong>：以&#8221;<a href="http://">http://</a>&ldquo;或者&#8221;git://&#8221;开头的url，指向一个合法的git可克隆仓库，仓库中应该包含一个plugin.xml的文件，仓库中的内容可以被拷贝到plugins_dir路径下。</p>

<p><strong>path</strong>：一个指向包含合法插件（包含plugin.xml文件）目录的路径。该路径下的内容可以被拷贝到plugins_dir。
其他参数：</p>

<p><strong>plugin_dir</strong>：默认是指向<project>/cordova/plugins，当然也可以是任何包含每一个已获取插件的子目录。</p>

<p><strong>www</strong>：默认指向项目的www目录，但是也可以指向Cordova项目的应用web asserts目录。</p>

<p><strong>variable</strong>：允许在安装时指定某些变量，对于某些插件需要API key或者其他用户定义参数是有必要的。</p>

<p>下面是添加电池状态插件的安装命令行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>plugman -d --platform android --project myProject –plugin org.apache.cordova.battery-status
</span></code></pre></td></tr></table></div></figure>


<p>-d或者—debug参数，会帮助你打印出内部调试信息，帮助你跟踪具体信息。</p>

<p><strong>2.删除一个插件</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>plugman --uninstall --platform &lt;ios<span class="p">|</span>amazon-fireos<span class="p">|</span>android<span class="p">|</span>blackberry10<span class="p">|</span>wp7<span class="p">|</span>wp8&gt; --project &lt;directory&gt; --plugin &lt;id&gt; <span class="o">[</span>--www &lt;directory&gt;<span class="o">]</span> <span class="o">[</span>--plugins_dir &lt;directory&gt;<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Service(译)]]></title>
    <link href="http://benweizhu.github.io/blog/2014/01/11/android-service-translation/"/>
    <updated>2014-01-11T23:51:00+08:00</updated>
    <id>http://benweizhu.github.io/blog/2014/01/11/android-service-translation</id>
    <content type="html"><![CDATA[<p>Service是Android应用程序中的一个组件，它能够长时间在后台运行，并且不提供界面。另一个应用程序的组件可以启动一个Service并持续在后台运行即便用户切换到别的应用程序。而且，组件可以和Service绑定并与它进行交互，甚至执行进程间通信（IPC）。例如，一个Service可以处理网络通信，播放音乐，执行IO操作，或者和启动它的组件交互，这些都是在后台进行。</p>

<p>使用Service有两种方式：</p>

<h2>启动Start</h2>

<p>当一个应用组件（例如Activity）调用startService()方法时，可以启动一个Service。一旦被启动，一个Service会无止境的运行在后台，即使启动它的组件被销毁了。通常启动一个Service会去执行一个单独的操作，并且不会返回任何的结果给调用者。例如，它可以下载或者上传文件。当这件事情完成，Service自己会停止。</p>

<h2>绑定Bound</h2>

<p>当一个应用组件调用bindService()方法时，可以绑定一个Service。一个被绑定的Service提供了一个CS模式的接口，它允许组件与Service进行交互，发送请求，返回结果，与进程间通信。被绑定的Service会一直运行只要有其他应用组件绑定它。多个组件可以绑定到同一个Service，但是当所有的组件都解除绑定，该Service就会被销毁。</p>

<p>对应于这两种方式，有两个回调函数去实现，onStartCommand()对应启动方式，onBind()对应绑定方式。</p>

<p>无论你的应用程序是启动还是绑定一个Service还是两种方式有用到，对于任何一个应用程序都可以使用该Service（即便是另外一个应用程序）。同理，任何组件也可以使用一个Activity（通过Intent）。然而，你可以在Manifest文件中将Service定义为私有的，并禁止其他应用访问它。</p>

<p>Service运行在宿主进程的的主线程中——Service不会创建它自己的进程，也不会运行在分开的进程中（除非你特别指定）。这意味着，如果你的Service要做任何占用CPU或者阻塞操作（例如播放音乐或者网络操作），你应该单独为Service创建一个线程。通过使用单独的线程，你会减小应用程序未响应（ANR-Application Not Responding）错误，并且让应用程序主线程保持用户与Activity进行交互。</p>

<p>创建Service，你必须创建一个Service的子类（或者一个已经存在的子类）。在实现类中，你需要重写一些回调函数，这些回调函数处理着Service的生命周期，并且提供一个机制让组件去绑定Service。</p>

<p><strong>onStartCommand()</strong></p>

<p>该方法被调用，当另一个组件，例如Activity通过调用startService()，请求一个Service启动。一旦该方法被执行，Service会启动，并在后台无止境运行。如果你实现这个方法，你就应该负责停止它（通过调用stopSelf()或者stopService()，但如果是绑定，就不用实现这些方法）。</p>

<p><strong>onBind()</strong></p>

<p>该方法被调用，当一个组件想要绑定该Service（例如执行RPC），需要调用bindService()。在这个实现方法中，你需要提供一个接口（返回一个IBinder）给调用者，以便调用者与Service进行交互。你必须实现这方法，但是如果你不希望该Service被绑定，那么你可以放回一个null。</p>

<p><strong>onCreate()</strong></p>

<p>该方法被调用，当Service被第一次创建，要去执行一次性的配置过程（在该方法被调用的要么是onStartCommand()或者onBind()）。如果一个Service已经在运行，则这个方法不会再被调用。</p>

<p><strong>onDestroy()</strong></p>

<p>当Service不在被使用时，系统会去调这个方法。你的Service应该执行一些清理资源的工作，例如线程，已注册的监听器等。它是Service最后被调用的方法。</p>

<p>Android系统会强制停止一个Service，仅仅当内存不足且系统必须会已经有用户焦点的Activity恢复一些系统资源时。如果Service绑定到一个拥有用户焦点的Activity，那么一般不会被杀掉，如果该Service被定义在后台运行，那么它几乎不会被杀掉。否则，如果Service被启动且长时间运行，那么系统会降低它在后台任务中的位置，然后该Service会变成最容易被杀掉的服务。如果你的Service被启动，那么你必须将它优雅的设计成能够被系统重启。如果系统杀掉你的Service，它会在资源够用的时候立刻重启你的Service（虽然它也依赖于onStartCommand()方法返回的值）。</p>

<h2>LifeCycle</h2>

<p><img src="http://developer.android.com/images/service_lifecycle.png" alt="Jasmine" /></p>

<p>Service的整个生命周期发生在onCreate()方法和onDestory()方法之间，就像Activity一样，分别进行一些初始化工作和清理资源工作。且无论是启动Service还是绑定Service，这两个方法都会被调用到。</p>

<p>Service活动周期开始于onStartCommand()或者onBind()方法，每一个方法都会被传入一个Intent对象。</p>

<p>如果Service以启动方式开始，那么活动周期与整个生命周期同时结束。如果Service是绑定的，那么活动周期是以onUnbind()方法结束。</p>

<figure class='code'><figcaption><span>Service </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">android.app.Service</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Intent</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.IBinder</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExampleService</span> <span class="kd">extends</span> <span class="n">Service</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mStartMode</span><span class="o">;</span>       <span class="c1">// indicates how to behave if the service is killed</span>
</span><span class='line'>    <span class="n">IBinder</span> <span class="n">mBinder</span><span class="o">;</span>      <span class="c1">// interface for clients that bind</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">mAllowRebind</span><span class="o">;</span> <span class="c1">// indicates whether onRebind should be used</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// The service is being created</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">onStartCommand</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// The service is starting, due to a call to startService()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mStartMode</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">IBinder</span> <span class="nf">onBind</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// A client is binding to the service with bindService()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mBinder</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onUnbind</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// All clients have unbound with unbindService()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mAllowRebind</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRebind</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// A client is binding to the service with bindService(),</span>
</span><span class='line'>        <span class="c1">// after onUnbind() has already been called</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// The service is no longer used and is being destroyed</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>文献参考自：<a href="http://developer.android.com/guide/components/services.html">http://developer.android.com/guide/components/services.html</a></p>
]]></content>
  </entry>
  
</feed>
