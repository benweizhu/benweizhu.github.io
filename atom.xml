<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NO END FOR LEARNING]]></title>
  <link href="http://benweizhu.github.io/atom.xml" rel="self"/>
  <link href="http://benweizhu.github.io/"/>
  <updated>2015-11-14T23:54:01+08:00</updated>
  <id>http://benweizhu.github.io/</id>
  <author>
    <name><![CDATA[ZHU Benwei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[配置Jenkins运行Github的仓库代码构建]]></title>
    <link href="http://benweizhu.github.io/blog/2015/11/10/make-jenkins-run-github-code/"/>
    <updated>2015-11-10T13:38:27+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/11/10/make-jenkins-run-github-code</id>
    <content type="html"><![CDATA[<p>用了这么久的CI服务应用，Jenkins， Go pipeline，还没有自己尝试搭建一个。今天花点时间在本地搭建了Jenkins。</p>

<h2>安装</h2>

<p>以Mac版本为例：</p>

<p>打开： <a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins">https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins</a> ，下载Mac版本。</p>

<p>安装完成之后，会直接启动 <a href="http://localhost:8080">http://localhost:8080</a> ，也就是说，Jenkins会默认启动8080端口作为服务端口。</p>

<p>在mac下，如果你想要切换端口，你需要这么做：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="n">launchctl</span> <span class="n">unload</span> <span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">LaunchDaemons</span><span class="o">/</span><span class="n">org</span><span class="o">.</span><span class="n">jenkins</span><span class="o">-</span><span class="n">ci</span><span class="o">.</span><span class="n">plist</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">defaults</span> <span class="n">write</span> <span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">Preferences</span><span class="o">/</span><span class="n">org</span><span class="o">.</span><span class="n">jenkins</span><span class="o">-</span><span class="n">ci</span> <span class="n">httpPort</span> <span class="mi">8443</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">launchctl</span> <span class="n">load</span> <span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">LaunchDaemons</span><span class="o">/</span><span class="n">org</span><span class="o">.</span><span class="n">jenkins</span><span class="o">-</span><span class="n">ci</span><span class="o">.</span><span class="n">plist</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果切换成https，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="n">defaults</span> <span class="n">write</span> <span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">Preferences</span><span class="o">/</span><span class="n">org</span><span class="o">.</span><span class="n">jenkins</span><span class="o">-</span><span class="n">ci</span> <span class="n">httpPort</span> <span class="mi">8443</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">defaults</span> <span class="n">write</span> <span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">Preferences</span><span class="o">/</span><span class="n">org</span><span class="o">.</span><span class="n">jenkins</span><span class="o">-</span><span class="n">ci</span> <span class="n">httpsKeyStore</span> <span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">your</span><span class="o">/</span><span class="n">keystore</span><span class="o">/</span><span class="nb">file</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">defaults</span> <span class="n">write</span> <span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">Preferences</span><span class="o">/</span><span class="n">org</span><span class="o">.</span><span class="n">jenkins</span><span class="o">-</span><span class="n">ci</span> <span class="n">httpsKeyStorePassword</span> <span class="o">&lt;</span><span class="n">keystore</span> <span class="n">password</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你会发现，它们都有下面的两个命令，它们用来在mac中启动和关闭Jenkins服务：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="n">launchctl</span> <span class="n">load</span> <span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">LaunchDaemons</span><span class="o">/</span><span class="n">org</span><span class="o">.</span><span class="n">jenkins</span><span class="o">-</span><span class="n">ci</span><span class="o">.</span><span class="n">plist</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">launchctl</span> <span class="n">unload</span> <span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">LaunchDaemons</span><span class="o">/</span><span class="n">org</span><span class="o">.</span><span class="n">jenkins</span><span class="o">-</span><span class="n">ci</span><span class="o">.</span><span class="n">plist</span>
</span></code></pre></td></tr></table></div></figure>


<h2>安装Github插件和配置项目第一个项目</h2>

<p>安装完成之后，你可以点击new item来新建一个构建项目，选择Freestyle project。</p>

<p>在Source Code Management中，你会发现，它CVS和Subversion的支持。没错，Jenkins默认并不支持Git配置。你需要安装Github Plugin。</p>

<p>回到Jenkins服务器的首页，打开Manage Jenkins，里面有Manage Plugins。在Available Plugin中搜索GitHub plugin，安装并重启Jenkins（页面上又重启的checkbox，点击一下即可）。</p>

<p>安装完成后，再次新建item，可以看GitHub project字段，Source Code Management中多了Git，Build Triggers中多了Build when a change is pushed to GitHub(但简单配置这个，还不能实现自动trigger，后面讲)。</p>

<p>在Build那一栏，选择添加Build Step，在本例中选择python。</p>

<p>我的项目是一个NodeJS项目，所以第一步是npm install。</p>

<p>保存项目，回到项目栏，点击Schedule a build。</p>

<h2>构建执行失败和Jenkins用户</h2>

<p>正如这个小标题，构建执行失败了，你会发现失败的原因是command npm not found。</p>

<p>NPM这个命令不存在，原因是Jenkins在执行该shell脚本的时候是以jenkins这个用户身份去执行，所以命令的PATH配置是不正确的。</p>

<h2>Prepare Env Before Run</h2>

<p>在运行前配置Jenkins运行命令的环境，有两种方式：</p>

<p>1.直接在Prepare an environment for the run中配置   <br/>
2.安装Environment Inject插件，在Inject environment variables to the build process中配置</p>

<p>我这里配置了下node的bin，npm中的bin。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">PATH</span><span class="o">=</span><span class="err">$</span><span class="n">PATH</span><span class="p">:</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="nb">bin</span><span class="p">:</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">Cellar</span><span class="o">/</span><span class="n">node</span><span class="o">/</span><span class="mf">0.12</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">libexec</span><span class="o">/</span><span class="n">npm</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>


<h2>A Blue Ball Appear，一个蓝色灯泡的故事</h2>

<p>配置完成之后，再次执行，构建成功。但是构建的提示是一个蓝颜色的球。为什么是蓝色球呢？请看： <a href="http://jenkins-ci.org/content/why-does-jenkins-have-blue-balls">http://jenkins-ci.org/content/why-does-jenkins-have-blue-balls</a></p>

<p>当然我不太习惯，好在要换成绿色球也很简单，安装插件：Green Ball Plugin。</p>

<h2>Pipeline插件</h2>

<p>根据现代软件的开发方式，我们更习惯于构建CI以pipeline的方式呈现，pipeline中有不同的step，有可以自动的trigger，也有可以手动trigger，比如：部署到Test或者Production环境，理论上应该是手动的触发。</p>

<p>这个时候，你需要安装Jenkins的pipeline插件。安装完成之后，回到首页，点击tab上的加号，添加一个tab，你就可以看到pipeline选项。</p>

<p>新建一个pipeline的tab，需要你填写一些信息，比如：在pipeline页面一次显示多少个构建的pipeline，配置完成之后，你就可以看到pipeline页面了。</p>

<p>在pipeline页面，你可以添加一个step，其实也就是新建一个item，选项可以是free style的，也可以从别现有项目copy生成。</p>

<p>配置方式和新建一个item一样。</p>

<p>配置完成之后，你可以在前一个项目的Post-build Actions中添加Build Other Projects，选择Trigger only if build is stable或者其他，填写被trigger的项目。</p>

<p>这样就可以自动触发后续的step。</p>

<h2>Clone Workspace</h2>

<p>你肯定会发现，既然新的step就是一个新的item，那么不是要重新check out一次代码，而且之前build的archive也不在了。</p>

<p>没错，这是个问题，这个时候，你需要安装Clone Workspace SCM Plugin，安装完成之后，你需要做两件事情：</p>

<p>1.在upstream的项目中的Post-Build Actions中添加Achieve for Clone Workspace SCM <br/>
2.在downstream的项目的Source Code Management中选择Clone Workspace</p>

<h2>关于Build when a change is pushed to GitHub</h2>

<p>简单的添加这个选项还不行，需要你在github的webhook中进行配置，方法在下面的链接中，但是前提是，需要配置的jenkins有url，如果是像我这样在本地配置的，可能就会有问题。
<a href="http://thepracticalsysadmin.com/setting-up-a-github-webhook-in-jenkins/">http://thepracticalsysadmin.com/setting-up-a-github-webhook-in-jenkins/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring4.0中通过ActiveProfiles和SpringActiveProfileResolver为不同环境下的集成测试指定不同的Properties配置]]></title>
    <link href="http://benweizhu.github.io/blog/2015/11/07/spring-active-profile-resolver-and-active-profiles-and-integration-test/"/>
    <updated>2015-11-07T17:46:18+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/11/07/spring-active-profile-resolver-and-active-profiles-and-integration-test</id>
    <content type="html"><![CDATA[<h2>场景</h2>

<p>在运行集成测试的时候，很可能会遇到这样一种情况：</p>

<p>本地的测试环境和持续集成服务器上的运行环境不同，最可能不同的的一种场景就是数据库服务器的配置不同，比如：host，端口，instance。</p>

<h2>解决方案</h2>

<p>这个时候，我希望，不同的环境下，使用不同的application.properties文件配置。</p>

<p>如果你熟悉Spring Boot中profile的概念，那么，你一定会想到指定不同的profile，于是就有了两个不同的配置文件application-local.properties和application-ci.properties。</p>

<p>如果是启动Spring Boot，可以通过&ndash;spring.active.profile=dev来指定不同的profile。</p>

<p>如果是测试呢？通过注解@ActiveProfiles。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@SpringApplicationConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@WebAppConfiguration</span>
</span><span class='line'><span class="nd">@Transactional</span>
</span><span class='line'><span class="nd">@ActiveProfiles</span><span class="o">(</span><span class="s">&quot;test&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractControllerIntegrationTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">WebApplicationContext</span> <span class="n">webApplicationContext</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mockMvc</span> <span class="o">=</span> <span class="n">MockMvcBuilders</span><span class="o">.</span><span class="na">webAppContextSetup</span><span class="o">(</span><span class="n">webApplicationContext</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可是，这样做还有一个问题，通过@ActiveProfiles(&ldquo;test&rdquo;)，是硬编码该测试使用test这个profile，那本地环境和集成测试环境要使用不同的profile，应该怎么办呢？</p>

<p>Spring 4中提供了一个接口：ActiveProfilesResolver，以可编程的方式提供active profile的解析。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.ActiveProfilesResolver</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringActiveProfileResolver</span> <span class="kd">implements</span> <span class="n">ActiveProfilesResolver</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">resolve</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">testClass</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">String</span> <span class="n">activeProfile</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;spring.profiles.active&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="n">activeProfile</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="s">&quot;test&quot;</span> <span class="o">:</span> <span class="n">activeProfile</span><span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方式很简单，在ActiveProfiles中指定resolver。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@SpringApplicationConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@WebAppConfiguration</span>
</span><span class='line'><span class="nd">@Transactional</span>
</span><span class='line'><span class="nd">@ActiveProfiles</span><span class="o">(</span><span class="n">resolver</span> <span class="o">=</span> <span class="n">SpringActiveProfileResolver</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractControllerIntegrationTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">WebApplicationContext</span> <span class="n">webApplicationContext</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mockMvc</span> <span class="o">=</span> <span class="n">MockMvcBuilders</span><span class="o">.</span><span class="na">webAppContextSetup</span><span class="o">(</span><span class="n">webApplicationContext</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>根据上面ActiveProfileResolver的实现方式，你只需要在运行集成测试时，指定一个系统变量spring.profiles.active。</p>

<p>以Gradle为例：
如果运行集成测试的任务是test，那么你只需要这样写：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">test</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">systemProperty</span> <span class="s">&quot;spring.profiles.active&quot;</span><span class="o">,</span> <span class="s">&quot;ci&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是如果，你希望通过命令行参数传递，来决定active的profile，那么你还需要获取Gradle的命令参数：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">test</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">project</span><span class="o">.</span><span class="na">hasProperty</span><span class="o">(</span><span class="err">&#39;</span><span class="n">profile</span><span class="err">&#39;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">systemProperty</span> <span class="s">&quot;spring.profiles.active&quot;</span><span class="o">,</span> <span class="s">&quot;$profile&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行时的命令是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">./</span><span class="n">gradlew</span> <span class="n">test</span> <span class="o">-</span><span class="n">Pprofile</span><span class="o">=</span><span class="n">ci</span>
</span></code></pre></td></tr></table></div></figure>


<h2>结束语</h2>

<p>通过这样的配置，在集成测试环境中，配置执行的命令就可以通过传递参数来指定激活的profile，而开发环境使用默认值（即不同在命令行指定参数）。</p>

<p>参考资料：  <br/>
1.<a href="http://stackoverflow.com/questions/20551681/spring-integration-tests-with-profile">http://stackoverflow.com/questions/20551681/spring-integration-tests-with-profile</a> 作答人：Sam (author of the Spring TestContext Framework)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过DaoCloud配置Coding平台的持续集成服务]]></title>
    <link href="http://benweizhu.github.io/blog/2015/11/07/coding-net-and-dao-cloud/"/>
    <updated>2015-11-07T13:14:19+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/11/07/coding-net-and-dao-cloud</id>
    <content type="html"><![CDATA[<p>昨天无意间搜索到一篇文章： <a href="http://blog.daocloud.io/daocloud_coding/">http://blog.daocloud.io/daocloud_coding/</a> DaoCloud完成与Coding对接</p>

<p>这让我感到很兴奋，原因是我搜索的关键字是“coding.net 持续集成”。</p>

<p>有一个项目放在coding平台的私有库中，一直没有做持续集成，如果是放在github的公有库，倒是可以用TravisCI做，但是这个项目不是开源的，一直希望找到一个国内的类似TravisCI的服务，直到昨天。</p>

<h2>DaoCloud</h2>

<p><img src="http://blog.daocloud.io/wp-content/uploads/2015/06/Logo_2.jpg" alt="Alt text" /></p>

<p>DaoCloud 是业界领先的企业级容器云平台和解决方案提供商，致力于以 Docker 为代表的容器技术，为企业打造面向下一代互联网应用的交付和运维平台，帮助客户实现云端持续创新，&hellip;.，等等。就不帮别人打广告了。</p>

<p>对我来说最重要的是：  <br/>
DaoCloud 对接 GitHub、Coding、GitCafe 等国内外代码托管库，采用云端 SaaS 化服务，帮助开发者实现自动化持续集成测试和 Docker 容器镜像构建。DaoCloud 镜像构建服务基于全球分布式网路，构建速度极快，提供私有镜像存储空间，为容器化交付和跨团队合作奠定了基础。</p>

<h3>如何使用</h3>

<p>其实它提供的持续集成服务和TravisCI有点类似，至少从使用者的角度，是这么理解的。</p>

<p>目前支持如下语言和服务：</p>

<p>语言：Golang、Python、Ruby、Java、Javascript（NodeJS）、PHP、C（gcc） <br/>
服务：MySQL、Redis、MongoDB</p>

<p>服务指的意思是，比如：构建需要集成测试或者功能测试，那么它可以提供三种数据库供你使用。</p>

<p>和TravisCI类似，需要你提供一个daocloud.yml，格式如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">daocloud/ci-golang:1.4</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mongodb</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">redis</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">env</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYENV = &quot;hello&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">install</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo $MYENV</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;This is an install segment&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;Here, we usually run scripts to setup a base environment&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;For customized base image, you need to install git here unless you have git installed in your base image&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;e.g., apt-get install -y git-core&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">before_script</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo $MYENV</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;This is an before_script segment&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;Here, we usually run scripts to prepare our test&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo $MYENV</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;This is an script segment&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;Run test cases here&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">echo &quot;Below shows how to use services, mongodb/mysql/redis are the hostnames of services&quot;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ping -c 2 mongodb</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ping -c 2 mysql</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ping -c 2 redis</span>
</span></code></pre></td></tr></table></div></figure>


<p>image是指定构建运行的环境镜像，除了上面的go语言，还有其他node，java，php，ruby等，在文章底部的参考资料中可以找到。</p>

<h3>服务</h3>

<p>service也就是你需要的数据库服务了，举个例子，假设，你指定了mysql。那么它提供的mysql的配置如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="err">Version：MySQL</span> <span class="err">5.5</span>
</span><span class='line'><span class="na">Docker Link Alias</span><span class="o">:</span> <span class="s">mysql</span>
</span><span class='line'><span class="na">Host</span><span class="o">:</span> <span class="s">mysql</span>
</span><span class='line'><span class="na">Port</span><span class="o">:</span> <span class="s">3306</span>
</span><span class='line'><span class="na">UserName</span><span class="o">:</span> <span class="s">root</span>
</span><span class='line'><span class="na">Password</span><span class="o">:</span> <span class="s">不设密码</span>
</span><span class='line'><span class="na">Default Instance</span><span class="o">:</span> <span class="s">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，项目中的测试在连接数据库的时候，也需要对应配置，否则就连接不上。</p>

<h3>执行顺序</h3>

<p>设置环境变量。 <br/>
执行 install 脚本。 <br/>
克隆源代码，切换到对应的提交。 <br/>
执行 before_script 脚本。 <br/>
执行 script 脚本。</p>

<p>script脚本，也就是你的构建执行命令了，比如：./gradlew clean build</p>

<p>配置完成后，提交代码，就可以触发CI构建。</p>

<h2>微信提醒功能</h2>

<p>DaoCloud还可以和微信绑定，提供构建状态提醒，这样就不需要Build TV，直接手机微信提醒。</p>

<h2>结束语</h2>

<p>我的项目花费了大概半天的时间，就配置成功了，当然这包括项目本身的一些配置，与平台无关。</p>

<p>参考资料：  <br/>
1.<a href="http://help.daocloud.io/features/continuous-integration/daocloud-yml.html">http://help.daocloud.io/features/continuous-integration/daocloud-yml.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Node下通过TravisCI部署由Gulp启动服务的应用到云平台Heroku]]></title>
    <link href="http://benweizhu.github.io/blog/2015/11/06/node-gulp-travisci-heroku/"/>
    <updated>2015-11-06T08:06:16+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/11/06/node-gulp-travisci-heroku</id>
    <content type="html"><![CDATA[<p>这篇博客的起源比较有意思，客户给我们出了一道前端的开发题目，实现一个满足某种需求的web应用程序，算是某种程度的面试或者能力检测。</p>

<p>开发的技术栈采用我比较熟悉的：</p>

<p>环境：Node  <br/>
脚手架，构建和依赖管理：Yoman，Gulp，Bower，NPM（Node包管理也算依赖管理吧）  <br/>
开发框架：AngularJS，Bootstrap  <br/>
测试框架和Runner：Karma，Protractor，Jasmine，Webdriver</p>

<p>当然还有些七七八八的JavaScript类库，这里就不罗列了。</p>

<p>开发时间大概用了不到一天，考虑到这些环境我都没安装，所以下载还是花了点时间的，基本的本地运行，单元测试，功能测试都完善了，本来想着已经差不多了，但作为一个在以构建，持续集成和持续交付自豪的公司（Build and CI is in our DNA）里工作的开发人员，好像还差点什么。</p>

<p>没错，就是<strong>持续集成和部署到PreProduction环境或者Production环境</strong>，之前没怎么用过Heroku，所以彻底完成还是足足花费了一天的时间，也就是从开发到上线用了两天，不过这其中踩了无数的坑。</p>

<p>关于开发以及构建的部分，我就不详细说明了，这与标题也不符合。</p>

<h2>TravisCI</h2>

<p><img src="https://travis-ci.com/img/travis-mascot-200px.png" alt="Alt text" /></p>

<blockquote><p>Test and Deploy with Confidence
Easily sync your GitHub projects with Travis CI and you’ll be testing your code in minutes!</p></blockquote>

<p>TravisCI是一个免费的，可以和Github项目同步的持续集成服务器，对持续集成这个概念不懂的同学，请参考我司（我厂）高级咨询师腾云的翻译的Martin Fowler的文章《持续集成》 <a href="http://www.cnblogs.com/CloudTeng/archive/2012/02/25/2367565.html">http://www.cnblogs.com/CloudTeng/archive/2012/02/25/2367565.html</a> 。</p>

<p>其实，要使用TravisCI是非常简单的，假设你是Java的项目，且采用了Maven或者Gradle做构建，那么只需要在项目中添加一个.travis.yml的文件，在里面写上language: java，提交，并在TravisCI上将项目Sync打开，就可以开始构建了。可以参考资料： <a href="http://docs.travis-ci.com/user/languages/java/">http://docs.travis-ci.com/user/languages/java/</a></p>

<p>但是在本例子中，采用的是Node环境，所以相对的配置就需要有所改变。基本配置和Java环境类似：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">node_js</span>
</span><span class='line'><span class="l-Scalar-Plain">node_js</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;4.1&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;4.0&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;0.12&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;0.11&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;0.10&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;0.8&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;0.6&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;iojs&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里要注意的是Node的版本，如果你使用4.0以上版本，很有可能在TravisCI上会遇到，导致npm install失败：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">../</span><span class="n">node_modules</span><span class="o">/</span><span class="n">nan</span><span class="o">/</span><span class="n">nan</span><span class="o">.</span><span class="n">h</span><span class="p">:</span><span class="mi">41</span><span class="p">:</span><span class="mi">3</span><span class="p">:</span> <span class="n">error</span><span class="p">:</span> <span class="c">#error This version of node/NAN/v8 requires a C++11 compiler</span>
</span></code></pre></td></tr></table></div></figure>


<p>官方文档上并没有给出解决这个问题的办法，唯一的临时解决办法就是使用低于4的稳定版本，比如我使用是0.12。</p>

<p>对于Node项目，TravisCI默认执行：npm test命令来运行你的测试（官方翻译：测试套件）。</p>

<p>如果你查看了官方文档，项目采用Gulp做构建，它会告诉你还需要在.travis.yml文件中添加：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">before_script</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">npm install -g gulp</span>
</span><span class='line'><span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">gulp</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果添加script: gulp，TravisCI会运行gulp，而不会运行npm test命令，所以这里取决于你的项目构建（测试）运行方式。我这里采用的npm test，因为需要同时运行单元测试和功能测试，在我的配置中，gulp任务只是最优化打包应用，所以在.travis.yml我并没有这些配置。</p>

<p>官方参考文档： <a href="http://docs.travis-ci.com/user/languages/javascript-with-nodejs/#Using-Gulp">http://docs.travis-ci.com/user/languages/javascript-with-nodejs/#Using-Gulp</a></p>

<p>我的配置全部在package.json的Script中，主要原因是为了方便Heroku部署，这里之所以需要在npm install之后运行bower install是为了功能测试能够正常运行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;test&quot;</span><span class="o">:</span> <span class="s2">&quot;gulp test &amp; gulp protractor&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;start&quot;</span><span class="o">:</span> <span class="s2">&quot;./node_modules/.bin/gulp serve:dist&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;postinstall&quot;</span><span class="o">:</span> <span class="s2">&quot;./node_modules/.bin/bower install&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>到目前为止，TravisCI的配置就结束了，项目可以正常的在持续集成服务器（CI Server）上运行。</p>

<h2>Heroku</h2>

<p><img src="https://upload.wikimedia.org/wikipedia/en/thumb/a/a9/Heroku_logo.png/220px-Heroku_logo.png" alt="Alt text" /></p>

<blockquote><p>Heroku (pronounced her-OH-koo) is a cloud application platform – a new way of building and deploying web apps.</p></blockquote>

<p>Heroku是国外有名的云应用平台，旗下的产品有： <br/>
Heroku Platform <br/>
Heroku Postgres <br/>
Heroku Redis <br/>
Heroku Connect <br/>
Heroku Enterprise</p>

<h3>注册和安装Toolbelt</h3>

<p>首先，你需要注册Heroku的账号，然后安装Heroku的Toolbelt工具。   <br/>
可以参考： <a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs#set-up">https://devcenter.heroku.com/articles/getting-started-with-nodejs#set-up</a></p>

<p>安装参考资料的提示，登录：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">heroku</span> <span class="n">login</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">your</span> <span class="n">Heroku</span> <span class="n">credentials</span><span class="o">.</span>
</span><span class='line'><span class="n">Email</span><span class="p">:</span> <span class="n">zeke</span><span class="nd">@example.com</span>
</span><span class='line'><span class="n">Password</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>在Travis中配置Heroku</h3>

<p>登录Heroku创建一个应用程序，名字你自己取（得小写字母）</p>

<p>进入到应用，在Deploy的tab里面，你会看到一个Connect to Github，你可以选择将哪个repository和该应用关联来实现自动部署或手动部署，但TravisCI的自动部署跟它没有关系，所以你不用管它。</p>

<p>你要做的是看这里： <a href="http://docs.travis-ci.com/user/deployment/heroku/">http://docs.travis-ci.com/user/deployment/heroku/</a></p>

<p>在.travis.yml中配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">heroku</span>
</span><span class='line'>  <span class="l-Scalar-Plain">api_key</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">secure</span><span class="p-Indicator">:</span> <span class="s">&quot;YOUR</span><span class="nv"> </span><span class="s">ENCRYPTED</span><span class="nv"> </span><span class="s">API</span><span class="nv"> </span><span class="s">KEY&quot;</span>
</span><span class='line'><span class="nn">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然，你看得懂文档，但不建议手动配置，建议Travis和Heroku的客户端都安装，然后在项目目录下运行：travis setup heroku，来自动配置.travis.yml文件。</p>

<p>可以参考的文档： <a href="http://blog.travis-ci.com/2013-07-09-introducing-continuous-deployment-to-heroku/">http://blog.travis-ci.com/2013-07-09-introducing-continuous-deployment-to-heroku/</a></p>

<p>配置完成之后，.travis.yml文件大概和下面的相似：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">node_js</span>
</span><span class='line'><span class="l-Scalar-Plain">node_js</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="s">&#39;0.12&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">heroku</span>
</span><span class='line'>  <span class="l-Scalar-Plain">api_key</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">secure</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">QFSD0pnNddlsdZ6Wm/...</span>
</span><span class='line'>  <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yourapplicationname</span>
</span><span class='line'>  <span class="l-Scalar-Plain">on</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">repo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">benweizhu/yourApplicationRepoName</span>
</span></code></pre></td></tr></table></div></figure>


<p>提交代码之后，TravisCI就会开始在构建完成之后，开始执行部署到Heroku。</p>

<p>这样就完了吗？错！！！前面已经踩过一些坑，但还不够坑。</p>

<h2>现在正式开始采坑</h2>

<p>执行完上面的步骤，你会发现构建是绿的，并且显示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">-----&gt;</span> <span class="n">Compressing</span><span class="o">...</span> <span class="n">done</span><span class="p">,</span> <span class="mf">65.3</span><span class="n">MB</span>
</span><span class='line'><span class="o">-----&gt;</span> <span class="n">Launching</span><span class="o">...</span> <span class="n">done</span><span class="p">,</span> <span class="n">v28</span>
</span><span class='line'>       <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">yourapplicationname</span><span class="o">.</span><span class="n">herokuapp</span><span class="o">.</span><span class="n">com</span><span class="o">/</span> <span class="n">deployed</span> <span class="n">to</span> <span class="n">Heroku</span>
</span></code></pre></td></tr></table></div></figure>


<p>当你通过URL打开应用时，就会出现Application Error的页面。这个时候，就要开始troubleshooting了。</p>

<p>首先，你需要在TravisCI上构建和部署的log，这个就不用我教了。</p>

<p>如果TravisCI上没有问题，那么，你就需要查看Heroku服务器上的log，方法如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">heroku</span> <span class="n">logs</span> <span class="o">--</span><span class="n">tail</span> <span class="o">--</span><span class="n">app</span> <span class="n">appname</span>
</span></code></pre></td></tr></table></div></figure>


<p>所有的出现问题/导致失败的原因都可以在log中看到。</p>

<p><strong>常见问题</strong></p>

<p>问题1：Heroku的Node环境启动时，运行npm start，所以，你需要配置好，package中的script命令来正确的启动服务器。你也可以配置Procfile文件，那么它就会执行文件中的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">web</span><span class="p">:</span> <span class="n">node</span> <span class="n">node_modules</span><span class="o">/.</span><span class="n">bin</span><span class="o">/</span><span class="n">gulp</span> <span class="n">serve</span><span class="p">:</span><span class="n">dist</span>
</span></code></pre></td></tr></table></div></figure>


<p>问题2：Heroku没有在全局（global）下安装gulp，所以项目的gulp需要安装在本地，在npm start的命令中也要有相应的配置，比如：gulp命令是执行本地的bin目录。</p>

<p>问题3：Heroku会先运行npm install，所以如果项目使用了BowerJS，那么在postInstall要进行bower install。</p>

<p>问题4：确保package中，dependencies的配置是正确的，很多情况下，我们都把依赖放在了devDependencies中，但在产品环境下，应该在dependencies下。</p>

<p>问题5：端口号配置</p>

<p>一个Web dyno并需和传递给他的$PORT在60秒内绑定。</p>

<p>所以应用程序的端口配置应该：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// set the port of our application</span>
</span><span class='line'><span class="c1">// process.env.PORT lets the port be set by Heroku</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8080</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Web Dynos: Web dynos are dynos of the “web” process type that is defined in your Procfile. Only web dynos receive HTTP traffic from Heroku’s routers.</p>

<p>另外还有一些问题：可能出在Heroku的配置上，具体请参考<strong>Heroku官方的troubleshooting</strong>： <a href="https://devcenter.heroku.com/articles/troubleshooting-node-deploys#start-with-a-blank-slate">https://devcenter.heroku.com/articles/troubleshooting-node-deploys#start-with-a-blank-slate</a></p>

<h2>结束语</h2>

<p>整个项目是一个完整的JavaScript全栈项目，从需求，到开发，最后部署，花费两天时间，虽然辛苦，但是学到不少东西。</p>

<p>参考资料： <br/>
1.<a href="http://docs.travis-ci.com/user/languages/javascript-with-nodejs/">http://docs.travis-ci.com/user/languages/javascript-with-nodejs/</a>  <br/>
2.<a href="http://docs.travis-ci.com/user/deployment/heroku/">http://docs.travis-ci.com/user/deployment/heroku/</a>  <br/>
3.<a href="http://www.sitepoint.com/deploying-heroku-using-gulp-node-git/">http://www.sitepoint.com/deploying-heroku-using-gulp-node-git/</a>
4.<a href="http://www.hygkui.com/2015/03/13/%E4%BD%BF%E7%94%A8Gulp-Node-Git%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0Heroku%E4%B8%8A/">http://www.hygkui.com/2015/03/13/%E4%BD%BF%E7%94%A8Gulp-Node-Git%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0Heroku%E4%B8%8A/</a> 上面的中文版  <br/>
5.<a href="http://blog.travis-ci.com/2013-07-09-introducing-continuous-deployment-to-heroku/">http://blog.travis-ci.com/2013-07-09-introducing-continuous-deployment-to-heroku/</a>  <br/>
6.<a href="https://devcenter.heroku.com/articles/troubleshooting-node-deploys#start-with-a-blank-slate">https://devcenter.heroku.com/articles/troubleshooting-node-deploys#start-with-a-blank-slate</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SEO实战密码：URL静态化]]></title>
    <link href="http://benweizhu.github.io/blog/2015/10/31/static-url-for-seo/"/>
    <updated>2015-10-31T19:01:24+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/10/31/static-url-for-seo</id>
    <content type="html"><![CDATA[<p>URL静态化一直以来都是最基本的SEO要求之一，但近年来搜索引擎技术进步，抓取动态url已经不是问题，SEO行业对是否一定要做静态化也有了一些观念上的改变。</p>

<h2>为什么要做静态化？</h2>

<p>现在的网站绝大多数都是数据库驱动，页面由程序实时生成，而不是真的在服务器上有一个静态HTML文件存在。当用户访问一个网址时，程序根据URL中的参数调用数据库，实时生成页面内容。因此动态页面相对应的URL原始状态也是动态的，包含问号，等号及参数。</p>

<p>搜索引擎在发展初期，一般不愿意爬行和收录动态URL，主要原因是可能陷入无限循环或收录大量重复内容，造成资源极大的浪费。最典型的无线循环就是某些网站上出现的万年历。万年历会使得蜘蛛可以无限点击下去。</p>

<p>真实用户一眼就能看出这是一个万年历，但是搜索引擎蜘蛛面对的只是一串代码，不一定能判断它。</p>

<p>有时候就算不是无限循环，动态URL也可能造成大量重复页面。比如：想用的URL和参数（也就是相同的页面），但是参数的顺序不同（有多个参数）。</p>

<p>更麻烦的是，有时候某些参数完全可以是任意值，服务器都能够正常的返回某个固定页面。</p>

<p>这就是为什么搜索引擎对动态URL敬而远之的原因。</p>

<h2>如何静态化URL呢？</h2>

<p>最常见的方式是使用服务器URL重写模块，LAMP（Linux+Apache+MySQL+PHP）服务器上一般使用mod_rewrite模块，Windows服务器上也有类似的功能。</p>

<p>举例：</p>

<p><a href="http://www.domain.com/products.php?id=123">http://www.domain.com/products.php?id=123</a></p>

<p>静态化为:</p>

<p><a href="http://www.domain.com/products/123">http://www.domain.com/products/123</a></p>

<p>需要请用服务器模块mod_rewrite，然后在.htaccess文件写入代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">RewriteRule</span> <span class="o">/</span><span class="n">products</span><span class="o">/</span><span class="p">([</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="p">)</span><span class="o">/</span><span class="n">products</span><span class="o">.</span><span class="n">php</span><span class="err">?</span><span class="nb">id</span><span class="o">=</span><span class="err">$</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>URL重写基于正则表达式，每个网站的动态URL结构都不同，所以写起来就很麻烦。</p>

<p>严格的说，这里所说的URL静态化应该称为“伪静态化”，也就是说服务器上还是不存在相应的HTML文件，用户访问时还是动态生成页面，只不过通过URL重写技术使网站看起来像是静态的。当然，也有CMS系统可以实现真正静态化，系统会自动真实生成静态的HTML文件。但对于搜索引擎来说，真正的静态化和伪静态化没有区别。</p>

<h2>到底是否需要URL静态化？</h2>

<p>近年来搜索引擎对URL的抓取有了很大进步。一般来说，URL中有两三个参数，对于收录不会造成任何影响。权重高的域名，再多几个问号也不是问题。不过一般还是建议将URL静态化，即能提高用户体验，又能降低收录难度。</p>

<p>2008年9月，Google站长博客发表了一篇关于动态网址还是静态网址的帖子，颠覆了SEO界的观念。</p>

<p>Google的帖子有几个要点。</p>

<p>一是Google完全有能力抓取动态网址，多少个问号也不是问题。这一点基本靠谱。</p>

<p>第二，动态网址更有助于Google蜘蛛读懂URL含义，并进行鉴别，因为网址中的参数有提示性。比如Google举了这个例子：</p>

<p>www.example.com/article/bin/answer.foo?language=en&amp;answer=3&amp;sid=98971298178906&amp;query=URL</p>

<p>URL里的参数都有助于Google理解URL及网页内容。比如language后面跟的参数是提示语言，answer后面跟的是文章编号，sid后面的肯定是session ID。其他常用的包括color后面跟的参数指的是颜色，size后面跟的参数是尺寸等。有了这些参数的帮助，Google更容易理解网页。</p>

<p>而将网址静态化后，这些参数的意义通常就变得不明显了。比如这个URL：</p>

<p>www.example.com/shoes/red/7/12/men/index.html</p>

<p>就可能使Google不知道哪个是产品序列号，哪个是尺寸等。</p>

<p>第三，网址静态化很容易弄错，那就更得不偿失了。比如通常动态网址的参数调换顺序，所得到的页面其实是相同的，比如这两个网址很可能就是同一个页面：</p>

<p>www.example.com/article/bin/answer.foo?language=en&amp;answer=3</p>

<p>www.example.com/article/bin/answer.foo?answer=3&amp;language=en</p>

<p>保留动态网址，Google还比较容易明白这是一样的网页。而经过静态化后，这样两个网址Google就不容易判断是不是同一个页面，从而可能引起复制内容：</p>

<p>www.example.com/shoes/men/7/red/index.html</p>

<p>www.example.com/shoes/red/7/men/index.html</p>

<p>再一个容易搞错的是session ID，也可能被静态化进URL：</p>

<p>www.example.com/article/bin/answer.foo/en/3/98971298178906/URL</p>

<p>这样网站将产生大量URL不同，但其实内容相同的页面。</p>

<p>所以，Google建议不要静态化URL。</p>

<h2>虽然如此</h2>

<p>但是《SEO实战密码》的作者建议还是做静态化。他认为Google的这个帖子解释的有些极端和牵强，也没有从其他搜索引擎的角度出发。</p>

<p>参考资料： <br/>
1.《SEO实战密码》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[了解响应式设计]]></title>
    <link href="http://benweizhu.github.io/blog/2015/10/31/responsive-design/"/>
    <updated>2015-10-31T09:23:44+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/10/31/responsive-design</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[了解JavaScript模板引擎]]></title>
    <link href="http://benweizhu.github.io/blog/2015/10/28/js-template-engine/"/>
    <updated>2015-10-28T08:36:18+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/10/28/js-template-engine</id>
    <content type="html"><![CDATA[<p>模板引擎这个概念，相信对大家并不陌生，如果做过Java EE的开发，或者Rails开发，那么Jsp，Erb，Haml都是一种模板引擎，也许你还听说过Apache的velocity，只不过它们是后端的模板引擎，模板的渲染由服务器端完成。</p>

<p>比如这样的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//Jsp With EL
</span><span class='line'><span class="nt">&lt;div&gt;</span>user name: ${userName}<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>//Haml
</span><span class='line'>%div = &quot;user name: #{userName}&quot;
</span></code></pre></td></tr></table></div></figure>


<p>JavaScript模板引擎，顾名思义，它也是一种模板引擎，只不过由JavaScript实现，是一种前端或者说是客户端的模板引擎。</p>

<h3>这个时候，也许你要问了，为什么需要前端模板引擎，它有什么作用？</h3>

<p>其实，它的作用和后端的模板引擎作用相似，所以还是回归到了模板引擎的作用。</p>

<p>不知道，大家知不知道JavaEE(J2EE)的发展历程，基本过程是CGI-Servlet-JSP-Model1-Model2，再到之后的MVC。</p>

<p>如果你感兴趣，可以看我的这篇文章： <a href="http://benweizhu.github.io/blog/2013/12/21/web-mvc-by-example-with-spring-mvc/">http://benweizhu.github.io/blog/2013/12/21/web-mvc-by-example-with-spring-mvc/</a></p>

<h3>关于后端模板引擎(JSP)</h3>

<p>在纯Servlet的开发年代，这样的web开发流程都在实现一个servlet类的实例，也就是无论是业务逻辑还是前端显示，都是放在Servlet类中来完成，通过实现doGet和doPost的方法，来完成前端参数的获取和视图的渲染。</p>

<p>这样做的缺点是表现逻辑、控制逻辑和业务逻辑全部写在了Java类中，导致逻辑非常混乱。</p>

<p>JSP的出现改变了这一现状，它是一种后端模板引擎，它由Sun和许多公司参与共同创建的一种使软件开发者可以响应客户端请求，而动态生成HTML、XML或其他格式文档的Web网页的技术标准。</p>

<p>JSP将前端的表现逻辑（用户界面）与后端的业务逻辑相分离，于是，你就可以像这样，动态渲染前端显示内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="err">&lt;</span>%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>helloWorldConfirm<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'> hi,${user.name}
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>将前端表现逻辑和后端业务逻辑分离是模板引擎出现的最主要的原因。</strong></p>

<h3>那什么情况或者说场景下，我们要使用到JavaScript模板引擎呢？</h3>

<p>1.通过ajax获取数据，再封装成视图展现到前端 <br/>
2.经常遇到字符串拼接 <br/>
3.需要抽取动态的公共模块，以实现重用 <br/>
等等</p>

<p>那么，目前有哪些比较常见的JavaScript模板引擎呢？</p>

<p>答案是好多，百度或者谷歌搜索，你会得到很多答案。举一个，最近在看的类库的例子，handlebarsjs：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;replace&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">id=</span><span class="s">&quot;entry-template&quot;</span> <span class="na">type=</span><span class="s">&quot;text/x-handlebars-template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;entry&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p">{</span> <span class="p">{</span><span class="nx">title</span><span class="p">}</span> <span class="p">}</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;body&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="p">{</span> <span class="p">{</span><span class="nx">body</span><span class="p">}</span> <span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">source</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#entry-template&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span><span class="c1">//获取到模板内容</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nx">Handlebars</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">source</span><span class="p">);</span><span class="c1">//编译模板</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;My New Post&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">body</span><span class="o">:</span> <span class="s2">&quot;This is my first post!&quot;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">html</span> <span class="o">=</span> <span class="nx">template</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span><span class="c1">//传入Json对象，替换模板中的内容</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#replace&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>




<p data-height="268" data-theme-id="0" data-slug-hash="rOvyde" data-default-tab="result" data-user="benweizhu" class='codepen'>See the Pen <a href='http://codepen.io/benweizhu/pen/rOvyde/'>handlebarsjs example</a> by Benwei (<a href='http://codepen.io/benweizhu'>@benweizhu</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="//assets.codepen.io/assets/embed/ei.js"></script>


<p>你肯定会有些疑问，比如，在HTML中下面这段代码是干什么的？</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span> <span class="o">=</span> <span class="err">“</span><span class="nx">text</span><span class="o">/</span><span class="nx">template</span><span class="err">”</span><span class="o">&gt;</span> <span class="err">…</span> <span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码最常用的位置是实现客户端模板功能，通过将类型设置成为“text/template”，它变成了一段浏览器不能解释的脚本代码，所以浏览器就会忽略这段脚本。这样，就允许你在这段脚本片段中存放任何东西，存放的内容可以再之后由JavaScript抽取提供给一个模板库来生产HTML片段。</p>

<p>至于，剩余的函数是干什么的已经在代码中注释了，这里就不多解释。</p>

<p>问题又来了，Handlebars是来源于另外一个有名的模板引擎Mustache，</p>

<p>Mustache声明自己是一个logic-less（无逻辑或轻逻辑）语法模板。那么，什么是logic-less，有什么好处？其实答案在stackoverflow有人回答。参考： <a href="http://stackoverflow.com/questions/3896730/whats-the-advantage-of-logic-less-template-such-as-mustache">http://stackoverflow.com/questions/3896730/whats-the-advantage-of-logic-less-template-such-as-mustache</a></p>

<p>简单来说，比如在JSP中，提供了很多的taglib，实现了如if，loop（循环）等逻辑标签。这样就导致，在纯粹的前端显示代码中，仍然存在许多的逻辑判断和操作。</p>

<p>Mustache从设计上就不允许这样的操作，逼迫你在前端页面不要有任何逻辑的代码。但其实，这一点很难做到。</p>

<p>即便是基于Mustache的Handlebars，也提供了if和loop的语法(代码块中的两个大括号加了空格，只是为了博客中可以显示)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{ {permalink} }
</span><span class='line'>{ {#each comments} }
</span><span class='line'>  { {../permalink} }
</span><span class='line'>
</span><span class='line'>  { {#if title} }
</span><span class='line'>    { {../permalink} }
</span><span class='line'>  { {/if} }
</span><span class='line'>{ {/each} }
</span></code></pre></td></tr></table></div></figure>


<p>关于模板引擎的框架还有很多，大家可以自己去搜索，我也可以给一个链接作为参考：<a href="http://www.imooc.com/article/1219">http://www.imooc.com/article/1219</a> 。当然谁好谁坏，众说风云，只有你用了才能知道适不适合你。</p>

<p>参考资料  <br/>
1.<a href="http://handlebarsjs.com">http://handlebarsjs.com</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重温SASS基础]]></title>
    <link href="http://benweizhu.github.io/blog/2015/10/27/sass-basic/"/>
    <updated>2015-10-27T14:18:48+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/10/27/sass-basic</id>
    <content type="html"><![CDATA[<p>最早因为Bootstrap接触到了LESS，但LESS随着时间，使用的人越来越少，大家都开始转向SASS，至于为什么，原因很多，大家可以去网上搜索，有很多人都对比了LESS和SASS。今天主要是来回顾SASS的基础知识。</p>

<p>CSS很好，但是随着stylesheets的内容增多，变得越来越复杂，也越来越难以维护。此时，CSS预处理器横空出世，SASS就是其中一种。</p>

<p>SASS允许你做许多在CSS中做不了的事情，比如：变量，网状结构（接近DOM结构），mixin，继承等。</p>

<h3>变量</h3>

<p>Sass使用$符号定义变量，就和其他编程语言一定，它可以被赋值和重复使用。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">$</span><span class="nt">font-stack</span><span class="o">:</span>    <span class="nt">Helvetica</span><span class="o">,</span> <span class="nt">sans-serif</span><span class="o">;</span>
</span><span class='line'><span class="o">$</span><span class="nt">primary-color</span><span class="o">:</span> <span class="nf">#333</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font</span><span class="o">:</span> <span class="m">100%</span> <span class="err">$</span><span class="k">font</span><span class="o">-</span><span class="n">stack</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="err">$</span><span class="n">primary</span><span class="o">-</span><span class="k">color</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>网状结构</h3>

<p>Sass比CSS强大的一点是，可读性好，CSS有后代选择器和权重的知识，它们与DOM结构息息相关，但是CSS本身却没有很好的语法结构来反映这种结构，Sass做到了这一点。</p>

<p>Sass让你的css选择器符合真实的HTML层次结构，当然Sass官方也提示如果过度的使用网状结构，也会导致CSS很难维护。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">nav</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">ul</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">list-style</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">li</span> <span class="p">{</span> <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">6px</span> <span class="m">12px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的例子中，ul和li是在nav结构之中的。</p>

<h3>通过Partial和Import来做模块化</h3>

<p>CSS本身也是有import功能的，但是缺点是，它会在页面中单独发送一个Http请求来获取这个import进来的css。</p>

<p>Sass是一个CSS预处理器，它的import是建立在编译过程中，将两个或者多个文件合并，所以机制完全不同。</p>

<p>比如，有_reset.scss和base.scss两个文件，注意，定义Partial的sass文件是以下划线开头的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span> <span class="nt">_reset</span><span class="nc">.scss</span>
</span><span class='line'>
</span><span class='line'><span class="nt">html</span><span class="o">,</span>
</span><span class='line'><span class="nt">body</span><span class="o">,</span>
</span><span class='line'><span class="nt">ul</span><span class="o">,</span>
</span><span class='line'><span class="nt">ol</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span> <span class="nt">base</span><span class="nc">.scss</span>
</span><span class='line'>
</span><span class='line'><span class="k">@import</span> <span class="s1">&#39;reset&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font</span><span class="o">:</span> <span class="m">100%</span> <span class="n">Helvetica</span><span class="o">,</span> <span class="k">sans-serif</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="m">#efefef</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Mixins</h3>

<p>Mixins是一个非常有用的功能，Mixins允许你将一组css定义在不同的位置重用，而且还可以像函数一样传递变量。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@mixin</span> <span class="nt">border-radius</span><span class="o">($</span><span class="nt">radius</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">-webkit-border-radius</span><span class="o">:</span> <span class="o">$</span><span class="nt">radius</span><span class="o">;</span>
</span><span class='line'>     <span class="nt">-moz-border-radius</span><span class="o">:</span> <span class="o">$</span><span class="nt">radius</span><span class="o">;</span>
</span><span class='line'>      <span class="nt">-ms-border-radius</span><span class="o">:</span> <span class="o">$</span><span class="nt">radius</span><span class="o">;</span>
</span><span class='line'>          <span class="nt">border-radius</span><span class="o">:</span> <span class="o">$</span><span class="nt">radius</span><span class="o">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.box</span> <span class="p">{</span> <span class="o">@</span><span class="n">include</span> <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="p">(</span><span class="m">10px</span><span class="p">);</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Extend/Inheritance继承</h3>

<p>通过@extend关键字，你可以让一系列的在某个选择器中css属性，在另一个css选择器中继承，也是重用css定义的一种模式。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.message</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#ccc</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#333</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.success</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">@</span><span class="n">extend</span> <span class="o">.</span><span class="n">message</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.error</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">@</span><span class="n">extend</span> <span class="o">.</span><span class="n">message</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.warning</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">@</span><span class="n">extend</span> <span class="o">.</span><span class="n">message</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-color</span><span class="o">:</span> <span class="nb">yellow</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Operators操作符/运算符</h3>

<p>Sass可以轻易的进行数学运算，+, -, *, /, %</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span> <span class="p">{</span> <span class="k">width</span><span class="o">:</span> <span class="m">100%</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">article</span><span class="o">[</span><span class="nt">role</span><span class="o">=</span><span class="s2">&quot;main&quot;</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">600px</span> <span class="o">/</span> <span class="m">960px</span> <span class="o">*</span> <span class="m">100%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">aside</span><span class="o">[</span><span class="nt">role</span><span class="o">=</span><span class="s2">&quot;complimentary&quot;</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">300px</span> <span class="o">/</span> <span class="m">960px</span> <span class="o">*</span> <span class="m">100%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Data Types有用的数据类型</h3>

<p>SassScript支持七种主要的数据类型</p>

<p>numbers (e.g. 1.2, 13, 10px) <br/>
strings of text, with and without quotes (e.g. &ldquo;foo&rdquo;, &lsquo;bar&rsquo;, baz) <br/>
colors (e.g. blue, #04a3f9, rgba(255, 0, 0, 0.5)) <br/>
booleans (e.g. true, false) <br/>
nulls (e.g. null) <br/>
lists of values, separated by spaces or commas (e.g. 1.5em 1em 0 2em, Helvetica, Arial, sans-serif) <br/>
maps from one value to another (e.g. (key1: value1, key2: value2))</p>

<p>比如：map</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">$</span><span class="nt">map</span><span class="o">:</span> <span class="o">(</span><span class="nt">key1</span><span class="o">:</span> <span class="nt">value1</span><span class="o">,</span> <span class="nt">key2</span><span class="o">:</span> <span class="nt">value2</span><span class="o">,</span> <span class="nt">key3</span><span class="o">:</span> <span class="nt">value3</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考文献： <br/>
1.SASS官方文档</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Node中使用Express]]></title>
    <link href="http://benweizhu.github.io/blog/2015/10/27/how-to-use-express/"/>
    <updated>2015-10-27T09:43:04+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/10/27/how-to-use-express</id>
    <content type="html"><![CDATA[<p>Node.js是基于Chrome V8引擎的JavaScript运行时。</p>

<p><a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>

<p>Express是Node.js上最小的，灵活的web应用框架，给web和移动应用提供了一系列有用的特性。</p>

<p><a href="http://expressjs.com/">http://expressjs.com/</a></p>

<h2>如何安装</h2>

<p>首先确保你已经安装好Node.js，下面是mac环境下，安装node的一些简单步骤（安装路径，根据不同的系统有所不同，注意安装结束时的说明）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Go</span> <span class="n">to</span> <span class="nl">https:</span><span class="c1">//nodejs.org/en/, and download the latest version of node.</span>
</span><span class='line'>
</span><span class='line'><span class="n">install</span> <span class="n">it</span> <span class="n">and</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'><span class="n">Node</span><span class="o">.</span><span class="na">js</span> <span class="n">was</span> <span class="n">installed</span> <span class="n">at</span>
</span><span class='line'>   <span class="s">/usr/</span><span class="n">local</span><span class="s">/bin/</span><span class="n">node</span>
</span><span class='line'>
</span><span class='line'><span class="n">npm</span> <span class="n">was</span> <span class="n">installed</span> <span class="n">at</span>
</span><span class='line'>   <span class="s">/usr/</span><span class="n">local</span><span class="s">/bin/</span><span class="n">npm</span>
</span><span class='line'>
</span><span class='line'><span class="n">Make</span> <span class="n">sure</span> <span class="n">that</span> <span class="s">/usr/</span><span class="n">local</span><span class="o">/</span><span class="n">bin</span> <span class="n">is</span> <span class="k">in</span> <span class="n">your</span> <span class="n">$PATH</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Then</span><span class="o">,</span> <span class="k">try</span>
</span><span class='line'>
</span><span class='line'><span class="n">node</span> <span class="o">-</span><span class="n">v</span>
</span><span class='line'><span class="n">npm</span> <span class="o">-</span><span class="n">v</span>
</span><span class='line'>
</span><span class='line'><span class="n">to</span> <span class="n">verify</span> <span class="n">the</span> <span class="n">node</span> <span class="n">has</span> <span class="n">been</span> <span class="n">successfully</span> <span class="n">installed</span> <span class="n">on</span> <span class="n">your</span> <span class="n">PC</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>新建一个myapp文件夹，从命令行进入目录，运行 npm init 。</p>

<p>npm init命令会创建一个package.json的文件，关于这个文件里面具体每个字段的含义，请参考： <a href="https://docs.npmjs.com/files/package.json">https://docs.npmjs.com/files/package.json</a> 。</p>

<p>npm init命令会提示你输入一段内容，不必管它，一路回车（enter）。只是要注意一点，entry point: (index.js)会提示你输入【入口点文件】，默认是index.js，你也可以改为app.js（我这里改为了app.js，之后都采用app.js作为入口文件）。</p>

<p>现在来安装express，输入：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="n">express</span> <span class="o">--</span><span class="n">save</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你有node相关的知识，或者看过我的这篇文章《用Grunt做JavaScript的构建》（ <a href="http://benweizhu.github.io/blog/2015/01/09/use-grunt-to-build-javascript/">http://benweizhu.github.io/blog/2015/01/09/use-grunt-to-build-javascript/</a> ）中，对node和npm部分进行讲解。</p>

<p>应该知道，express的模块会安装到当前目录的node_modules文件夹中， express会保存到package.json的dependencies中。</p>

<p>express的安装部分现在就完成了。</p>

<h2>Hello World 向世界说你好</h2>

<p>简单的让express跑起来，验证上面的步骤都是正确的，新建一个app.js文件，用编辑器打开它，然后拷贝下面这段代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Hello World!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nx">server</span><span class="p">.</span><span class="nx">address</span><span class="p">().</span><span class="nx">address</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">server</span><span class="p">.</span><span class="nx">address</span><span class="p">().</span><span class="nx">port</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Example app listening at http://%s:%s&#39;</span><span class="p">,</span> <span class="nx">host</span><span class="p">,</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>不用我解释，看到这段代码，你应该猜测的出来，它要干什么，这段代码会启动一个server，监听3000端口，接受一个“/”的uri作为请求路径，返回‘Hello World!’的字符串。</p>

<p>运行方式应用的方式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">node</span> <span class="nx">app</span><span class="p">.</span><span class="nx">js</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个里面有用到一个require函数来或者express对象（函数对象），关于require，在《用Grunt做JavaScript的构建》也有简单介绍Node的模块系统。</p>

<h2>Express的应用生成器（generator）</h2>

<p>无论是前端，后端还是构建工具，任何成熟的应用框架都不会让你从头写应用，都会提供一套基本的脚手架（scaffold），比如maven的archetype，前端的yeoman等等。</p>

<p>Express也有自己的generator来做一些初始化的工作。</p>

<p>安装generator：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="n">express</span><span class="o">-</span><span class="n">generator</span> <span class="o">-</span><span class="n">g</span>
</span></code></pre></td></tr></table></div></figure>


<p>-g 参数表示express-generator模块会安装到npm的全局环境，而不是当前目录，这样，所有的node应用都可以重用，而不需要重新下载。运行express -h可以查看帮助。</p>

<p>和之前helloworld中不同，使用generator就不需要手动运行npm init命令和建立app.js文件，直接运行express myapp，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">express</span> <span class="n">myapp</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">create</span> <span class="p">:</span> <span class="n">myapp</span>
</span><span class='line'>   <span class="n">create</span> <span class="p">:</span> <span class="n">myapp</span><span class="o">/</span><span class="n">package</span><span class="o">.</span><span class="n">json</span>
</span><span class='line'>   <span class="n">create</span> <span class="p">:</span> <span class="n">myapp</span><span class="o">/</span><span class="n">app</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>   <span class="n">create</span> <span class="p">:</span> <span class="n">myapp</span><span class="o">/</span><span class="n">public</span>
</span><span class='line'>   <span class="n">create</span> <span class="p">:</span> <span class="n">myapp</span><span class="o">/</span><span class="n">public</span><span class="o">/</span><span class="n">javascripts</span>
</span><span class='line'>   <span class="n">create</span> <span class="p">:</span> <span class="n">myapp</span><span class="o">/</span><span class="n">public</span><span class="o">/</span><span class="n">images</span>
</span><span class='line'>   <span class="n">create</span> <span class="p">:</span> <span class="n">myapp</span><span class="o">/</span><span class="n">routes</span>
</span><span class='line'>   <span class="n">create</span> <span class="p">:</span> <span class="n">myapp</span><span class="o">/</span><span class="n">routes</span><span class="o">/</span><span class="n">index</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>   <span class="n">create</span> <span class="p">:</span> <span class="n">myapp</span><span class="o">/</span><span class="n">routes</span><span class="o">/</span><span class="n">users</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>   <span class="n">create</span> <span class="p">:</span> <span class="n">myapp</span><span class="o">/</span><span class="n">public</span><span class="o">/</span><span class="n">stylesheets</span>
</span><span class='line'>   <span class="n">create</span> <span class="p">:</span> <span class="n">myapp</span><span class="o">/</span><span class="n">public</span><span class="o">/</span><span class="n">stylesheets</span><span class="o">/</span><span class="n">style</span><span class="o">.</span><span class="n">css</span>
</span><span class='line'>   <span class="n">create</span> <span class="p">:</span> <span class="n">myapp</span><span class="o">/</span><span class="n">views</span>
</span><span class='line'>   <span class="n">create</span> <span class="p">:</span> <span class="n">myapp</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">index</span><span class="o">.</span><span class="n">jade</span>
</span><span class='line'>   <span class="n">create</span> <span class="p">:</span> <span class="n">myapp</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">layout</span><span class="o">.</span><span class="n">jade</span>
</span><span class='line'>   <span class="n">create</span> <span class="p">:</span> <span class="n">myapp</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">error</span><span class="o">.</span><span class="n">jade</span>
</span><span class='line'>   <span class="n">create</span> <span class="p">:</span> <span class="n">myapp</span><span class="o">/</span><span class="nb">bin</span>
</span><span class='line'>   <span class="n">create</span> <span class="p">:</span> <span class="n">myapp</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">www</span>
</span></code></pre></td></tr></table></div></figure>


<p>也许你会发现安装了express-generator，运行express时，还是会提示命令找不到，如果是mac环境，你需要查看$PATH中，npm的bin目录是否包含在里面，方法如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">echo</span> <span class="err">$</span><span class="n">PATH</span>
</span><span class='line'>
</span><span class='line'><span class="n">touch</span> <span class="o">~/.</span><span class="n">bash_profile</span><span class="p">;</span> <span class="o">//</span><span class="err">如果以前没有创建过</span>
</span><span class='line'>
</span><span class='line'><span class="nb">open</span> <span class="o">~/.</span><span class="n">bash_profile</span>
</span><span class='line'>
</span><span class='line'><span class="o">//</span><span class="err">将</span><span class="n">npm</span><span class="err">的</span><span class="nb">bin</span><span class="err">目录放在原始的$</span><span class="p">{</span><span class="n">PATH</span><span class="p">}</span><span class="err">后面</span>
</span><span class='line'><span class="n">export</span> <span class="n">PATH</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">PATH</span><span class="p">}:</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">Cellar</span><span class="o">/</span><span class="n">node</span><span class="o">/</span><span class="mf">0.12</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">libexec</span><span class="o">/</span><span class="n">npm</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span>
</span><span class='line'>
</span><span class='line'><span class="n">source</span> <span class="o">~/.</span><span class="n">bash_profile</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以参考： <a href="http://hathaway.cc/post/69201163472/how-to-edit-your-path-environment-variables-on-mac">http://hathaway.cc/post/69201163472/how-to-edit-your-path-environment-variables-on-mac</a></p>

<p>安装成功之后，进入myapp目录，运行npm install，安装对应的依赖，运行DEBUG=myapp npm start命令，运行package.json中配置的start脚本命令来启动应用，进入 <a href="http://localhost:3000/">http://localhost:3000/</a> 就可以。</p>

<h2>关于路由</h2>

<p>路由这个概念就很容易理解了，无论是前端的AngularJS还后端的SpringMVC或者Ruby on Rails，它们都有自己的一套请求和对应handler（Controller）的映射方式。</p>

<p>Express也不例外，用来指定应用程序如何响应客户端的特定请求，包含URI，请求的HTTP方法（GET，POST）。</p>

<p>Express中路由定义是通过app.METHOD(PATH, HANDLER)结构实现，app是express的一个实例对象，METHOD是HTTP请求方法，PATH就是请求的相对URI，HANDLER是一个回调函数来处理请求内容，具体例子看下面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/ respond with &quot;Hello World!&quot; on the homepage</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Hello World!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// accept POST request on the homepage</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Got a POST request&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// accept PUT request at /user</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Got a PUT request at /user&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// accept DELETE request at /user</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Got a DELETE request at /user&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>静态文件处理</h2>

<p>静态文件也就是，常说的“非服务器程序代码”，比如：图片，CSS，字体，JavaScript文件等。</p>

<p>Express有一套自己的内置中间件来处理它们，express.static，使用方式如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="s1">&#39;public&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>将目录的名字传递过去，如果它是作为static assets的目录，express.static就会把它们host起来。比如，你将图片，CSS和JavaScript放在名字是publish的目录。</p>

<p>这样，你就可以直接通过浏览器访问它们了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">images</span><span class="o">/</span><span class="n">kitten</span><span class="o">.</span><span class="n">jpg</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">css</span><span class="o">/</span><span class="n">style</span><span class="o">.</span><span class="n">css</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">js</span><span class="o">/</span><span class="n">app</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">images</span><span class="o">/</span><span class="n">bg</span><span class="o">.</span><span class="n">png</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">hello</span><span class="o">.</span><span class="n">html</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，如果你想使用多个目录，也是可以的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="s1">&#39;public&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="s1">&#39;files&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你想使用自定义的路径，而不是默认的真是文件路径作为url的路径（我想你看了代码应该明白我的意思），可以像下面这样做：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/static&#39;</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="s1">&#39;public&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么，你通过浏览器访问它们，就成这样了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">static</span><span class="o">/</span><span class="n">images</span><span class="o">/</span><span class="n">kitten</span><span class="o">.</span><span class="n">jpg</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">static</span><span class="o">/</span><span class="n">css</span><span class="o">/</span><span class="n">style</span><span class="o">.</span><span class="n">css</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">static</span><span class="o">/</span><span class="n">js</span><span class="o">/</span><span class="n">app</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">static</span><span class="o">/</span><span class="n">images</span><span class="o">/</span><span class="n">bg</span><span class="o">.</span><span class="n">png</span>
</span><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">static</span><span class="o">/</span><span class="n">hello</span><span class="o">.</span><span class="n">html</span>
</span></code></pre></td></tr></table></div></figure>


<p>路径问题一直都是所有Web框架最头痛的问题，所以express.static的路径定义，也取决于你在哪个位置启动Node进程。如果，你在另一个位置启动node，最好还是给对应的你想要载入的文件目录（比如，publish目录），加一个绝对路径。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/static&#39;</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/public&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考资料：  <br/>
1.<a href="http://expressjs.com/starter/installing.html">http://expressjs.com/starter/installing.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Gradle和Intellij的Spring Boot热交换]]></title>
    <link href="http://benweizhu.github.io/blog/2015/10/26/spring-boot-hot-swap/"/>
    <updated>2015-10-26T12:19:43+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/10/26/spring-boot-hot-swap</id>
    <content type="html"><![CDATA[<p>在去年的一篇《Gradle Jetty和Gradle Watch插件实现热部署》中，谈到Java热部署带来的好处，文章地址在： <a href="http://benweizhu.github.io/blog/2014/07/27/gradle-jetty-plugin-hot-deploy/">http://benweizhu.github.io/blog/2014/07/27/gradle-jetty-plugin-hot-deploy/</a> 。</p>

<p>但是现在越来越多的Spring应用直接使用Spring Boot作为框架，那么这个Jetty插件的配置就不起作用了，好在Spring官方针对热部署问题，提供了解决方案：Spring Reloaded。</p>

<p>项目地址在： <a href="https://github.com/spring-projects/spring-loaded">https://github.com/spring-projects/spring-loaded</a></p>

<p>这里，我就不多说废话了，直接告诉大家怎么用？</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span> <span class="n">jcenter</span><span class="o">()</span> <span class="o">}</span>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s2">&quot;org.springframework.boot:spring-boot-gradle-plugin:1.2.7.RELEASE&quot;</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;org.springframework:springloaded:1.2.4.RELEASE&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">idea</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">module</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">inheritOutputDirs</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'>        <span class="n">outputDir</span> <span class="o">=</span> <span class="n">file</span><span class="o">(</span><span class="s2">&quot;$buildDir/classes/main/&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">testOutputDir</span> <span class="o">=</span> <span class="n">file</span><span class="o">(</span><span class="s2">&quot;$buildDir/classes/test/&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想将Spring Loaded和Gradle，IntelliJ结合起来，那你需要付出代价。默认情况下，IntelliJ将类编译到一个跟Gradle不同的位置，这会导致Spring Loaded监控失败，所以使用idea模块修改编译输出位置和Gradle一样。</p>

<p>注：IntelliJ必须配置跟命令行Gradle任务相同的Java版本，并且springloaded必须作为一个buildscript依赖被包含进去。</p>

<p>官方文档的springloaded版本是1.2.0.RELEASE，这个版本有问题，会出现：</p>

<p>org.springsource.loaded.jvm.JVM : Problems copying method. Incompatible JVM? 报错</p>

<p>依赖下载完成之后，正常启动Spring Boot Run。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">./</span><span class="n">gradlew</span> <span class="n">bRun</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你自己有仔细阅读官方文档的代码，你会发现官方少了一行testOutputDir的配置。官方文档上没有设置testOutputDir，这就会导致，intellij编译代码时，输出test下面的class到了out目录的main中。从而改变了Gradle默认的输出测试路径（main和test分开的），所以最好还是手动配置一下。</p>

<p>此时，如果你在应用启动的时候修改了Java代码，只需要点击Intellij的编译按钮，重新编译代码即可。</p>

<h2>导致集成测试的问题</h2>

<p>由于这样配置之后，导致Intellij上进行make project，输出到build/classes下。</p>

<p>这样做会导致集成测试有一个问题，运行集成测试的时候，我们常常需要使用properties文件和xml文件。</p>

<p>如果之前运行过gradle build，而build目录下没有被clean，则gradle默认会将properties文件和xml文件放在build/resources下，这与Intellij的行为不同。</p>

<p>而运行测试的时候，本来Intellij会默认先跑make project，但是由于build/classes已经有文件了，所以就skip了，于是导致Intellij找不到resource文件，因为Intellij要求的resource路径和gradle构建时输出的路径不同。</p>

<h3>手动点击Project Rebuild</h3>

<p>可以手动点击Project Rebuild，它会清理Intellij的输出目录（也就是当前Gradle的classes目录），然后在make。</p>

<h3>配置Intellij的Junit</h3>

<p>又或者改变Intellij中Junit的配置，Junit会在运行测试之前，先跑make，可以然它在make之前先跑Gradle的clean任务。</p>

<h3>通过Watch来解决</h3>

<p>还可以将我在上篇文章中介绍的Watch引入，监测文件变化，自动运行compileJava和processResources等Gradle命令，而不要改变Intellij的输出目录，让Gradle和Intellij采用各自的输出目录，就可以的。</p>

<p>参考文献： <br/>
1.<a href="http://docs.spring.io/spring-boot/docs/current/reference/html/howto-hotswapping.html">http://docs.spring.io/spring-boot/docs/current/reference/html/howto-hotswapping.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学好JavaScript（二）- 被我忽视的东西(2)对象]]></title>
    <link href="http://benweizhu.github.io/blog/2015/10/06/learning-js-well-2/"/>
    <updated>2015-10-06T10:02:04+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/10/06/learning-js-well-2</id>
    <content type="html"><![CDATA[<p>原型</p>

<p>每个JavaScript对象（null除外）都和另一个对象相关联。“另一个”对象就是我们熟知的原型，每一个对象都从原型继承属性。</p>

<p>所有通过对象直接量创建的对象都具有同一个原型对象，并可以通过JavaScript代码Object.prototype获得对原型对象的引用。通过关键字new和构造函数调用创建的对象的原型就是构造函数的prototype属性的值。因此，同使用{}创建对象一样，通过new Object()创建的对象也继承自Object.prototype。同样，通过new Array()创建的对象的原型就是Array.prototype，通过new Date()创建的对象的原型就是Date.prototype。</p>

<p>没有原型的对象为数不多，Object.prototype就是其中之一。他不继承任何属性。其他原型对象都是普通对象，普通对象也有原型。所有的内置的构造函数都具有一个继承自Object.prototype的原型。例如，Date.prototype的属性继承自Object.prototype，因此由new Date()创建的Date对象的属性同时继承自Date.prototype和Object.prototype。这就是所谓的“原型链”。</p>

<p>关联数组</p>

<p>object.property
object[&ldquo;property&rdquo;]</p>

<p>第二种语法使用方括号和一个字符串，看起来更像数组，只是这个数组是通过字符串索引而不是数字索引，这种数组就是所说的关联数组。</p>

<p>在C++、Java等强类型语言中，对象只能拥有固定数目的属性，并且这些属性名称必须提前定义好。由于JavaScript是弱类型语言，因此不必遵循这个条规定，在任何对象中程序都可以创建任意数量的属性。但当通过点运算符访问对象的属性时，属性名用一个标识符来表示。标示符必须直接出现在JavaScript程序中，它们不是数据类型，因此程序无法修改它们。</p>

<p>反过来讲，当通过[]来访问对象的属性时，属性名通过字符串来表示。字符串是JavaScript的数据类型，在程序运行时可以修改和创建它们。</p>

<p>for(i = 0; i &lt; 4; i++)
    addr += customer[&ldquo;address&rdquo; + i];</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学好JavaScript（一）- 被我忽视的东西(1)]]></title>
    <link href="http://benweizhu.github.io/blog/2015/10/05/learning-js-well-1/"/>
    <updated>2015-10-05T10:06:40+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/10/05/learning-js-well-1</id>
    <content type="html"><![CDATA[<h3>JavaScript普通对象</h3>

<p>JavaScript中除了数字、字符串、布尔值、null和undefined之外的就是对象了。对象是属性的集合，每个属性都由“名/值对”构成，值可以是原始值，比如数字、字符串，也可以是对象。普通的JavaScript对象就是“命名值”的无序集合。（JavaScript同样定义了一种特殊对象-数组，表示带编号的值的有序集合）</p>

<h3>可选的分号</h3>

<p>JavaScript使用分号将语句分开。但如果语句各自独占一行，通常可以省略语句之间的分号。是否省略分号是一种风格，对于不知道什么时候可以省略分号的开发，在任何时候都采用分号分割是一种常见风格。</p>

<h3>布尔值</h3>

<p>任意JavaScript的值都可以转换为布尔值，下面这些值会被转换为false， <br/>
undefined  <br/>
null  <br/>
0  <br/>
-0 <br/>
NaN <br/>
&ldquo;&rdquo; <br/>
所有其他值，包括所有对象（数组）都会转换成true，false和上面6个可以转换成false的值有时称作“假值”，其他值称作“真值”。JavaScript期望使用一个布尔值的时候，假值会被当做false，真值会被当做true。</p>

<h3>null和undefined</h3>

<p>null是JavaScript语言的关键字，它表示一个特殊值，常用来描述“空值”。对null执行typeof运算，结果返回字符串“object”，也就是说，可以将null认为是一个特殊的对象值，含义是“非对象”。但实际上，通常认为null是它自由类型的唯一一个成员，它可以表示数字，字符串和对象是“无值”的。</p>

<p>JavaScript还有第二值来表示值的空缺。用未定义的值表示更深层次的“空值”。它是变量的一种取值，表示变量没有初始化，如果要查询对象属性或者数组元素的值时，返回undefined则说明这个属性或者元素不存在。如果函数没有任何返回值，则返回undefined。</p>

<p>undefined是预定义的全局变量，它和null不一样，它不是关键字，它的值就是“未定义”。</p>

<p>尽管null和undefined是不同的，但它们都表示“值的空缺”，两者往往可以互换。判断相等运算符“==”认为两者是相等的，所以需要使用严格相等运算符“===”来区分它们。</p>

<p>如果你想将它们赋值给变量或者属性，或将它们作为参数传入函数，最佳的选择是使用null。</p>

<h3>全局对象</h3>

<p>全局对象的属性是全局定义的符号，JavaScript程序可以直接使用。当JavaScript解释器启动时（或者任何Web浏览器加载新页面的时候），它将创建一个新的全局对象，并给它一组定义的初始属性：全局属性，undefined，全局函数，isNaN()，构造函数，Date()，全局对象，Math。</p>

<p>全局对象的初始属性并不是保留字，但它们应该当做保留字来对待。</p>

<p>在代码的最顶级——不在任何函数内的JavaScript代码——可以使用JavaScript关键字this来引用全局对象：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">var</span> <span class="nx">global</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span> <span class="c1">// 定义一个引用全局对象的全局变量</span>
</span></code></pre></td></tr></table></div></figure>


<p>在客户端JavaScript中，在其表示的浏览器窗口中的所有JavaScript代码中，Window对象充当了全局对象。这个全局对象Window对象有一个属性window引用其自身，它可以代替this来引用全局对象。</p>

<p>当初次创建的时候，全局对象定义了JavaScript中所有的预定义全局值。这个特殊对象同样包含了为程序定义的全局值。如果代码声明了一个全局变量，这个全局变量就是对象的一个属性。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="s1">&#39;a&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span> <span class="c1">//输出&quot;a&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>包装对象</h3>

<p>我们看到字符串也同样具有属性和方法，字符串既然不是对象，为什么它会有属性呢？  <br/>
只要引用了字符串的属性，JavaScript就会将字符串通过调用new String(&ldquo;some string&rdquo;)的方法转换成对象。</p>

<p>同字符串一样，数字和布尔值也具有各自的方法：通过Number()和Boolean()构造函数创建一个临时对象。</p>

<p>JavaScript会在必要时将包装对象转换成原始值。“==”等于运算符将原始值和其他包装对象视为相等，但“===”全等运算符将它们视为不等。</p>

<h3>相等和不相等运算符</h3>

<p>“==”和“===”运算符用于比较</p>

<p>详细内容待输入</p>

<h3>in运算符</h3>

<p>in运算符希望它的左操作数是一个字符串或可以转换为字符串，希望它的右操作数是一个对象。如果右侧的对象拥有一个名为做操作数值的属性名，那么表达式返回true。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="p">{</span><span class="nx">text</span><span class="o">:</span><span class="s2">&quot;hi&quot;</span><span class="p">}</span>
</span><span class='line'><span class="s2">&quot;text&quot;</span> <span class="k">in</span> <span class="nx">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>for/in语句也使用for关键字，但它是和常规的for循环完全不同的一类循环。for/in循环语句的语法如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">variable</span> <span class="k">in</span> <span class="nx">object</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">statement</span>
</span></code></pre></td></tr></table></div></figure>


<p>variable通常是一个变量名，也可以是一个可以产生左值的表达式或者一个通过var语句声明的变量，总之必须是一个适用于赋值表达式左侧的值。object是一个表达式，这表达式的计算结果是一个对象。</p>

<p>for/in循环则是用来更方便地遍历对象属性成员：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">p</span> <span class="k">in</span> <span class="nx">o</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">[</span><span class="nx">p</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在执行for/in语句的过程中，JavaScript解释器首先计算object表达式。如果表达式为null或者undefined，JavaScript解释器将会跳出循环并执行后续的代码。如果表达式等于一个原始值，这个原始值将会转换为与之对应的包装对象。否则，expression本身已经是对象了。JavaScript会依次枚举对象的属性来执行循环。</p>

<h3>&ldquo;use strict&rdquo;</h3>

<p>&ldquo;use strict&#8221;是ECMAScript5引入的一条指令。指令不是语句。</p>

<p>它不含任何语言的关键，指令仅仅是一个包含一个特殊字符串直接量的表达式，对于那些没有实现ECMAScript5的JavaScript解释器来说，它只是一条没有副作用的表达式语句，它什么也没做。</p>

<p>它只能出现在脚本代码的开始或者函数体的开始，任何实体语句之前。但他不必一定要出现在脚本的首行或者函数体首行，因为“use strict”指令之后或者之前都可能有其他字符串直接量表达式语句，并且JavaScript的具体实现可能将它们解析为解释器自有的指令。在脚本或者函数体第一条常规语句之后字符串直接量表达式语句只当做普通表达式语句对待；它们不会当做指令解析，它们也没有任何副作用。</p>

<p>使用“use strict”指令的目的是说明（脚本或函数中）后续的代码将会解析为严格代码。</p>

<p>严格代码以严格模式执行。ECMAScript5中的严格模式是该语言的一个受限制的子集，它修正了语言的重要缺陷，并提供健壮的查错功能和增强的安全机制。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[当whenever遇到capistrano和rbenv - Linux下的cron Job]]></title>
    <link href="http://benweizhu.github.io/blog/2015/09/27/whenever-plus-capistrano-plus-rbenv/"/>
    <updated>2015-09-27T11:01:41+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/09/27/whenever-plus-capistrano-plus-rbenv</id>
    <content type="html"><![CDATA[<p>当你遇到这样一个需求：用户订阅了很多信息，服务器需要每周，或者每月给用户发送邮件，告知用户订阅信息的更新内容。你需要怎么做？</p>

<p>在RoR的环境下，发送邮件使用Rails Action Mailer。参考资料：<a href="http://guides.ruby-china.org/action_mailer_basics.html">http://guides.ruby-china.org/action_mailer_basics.html</a> 。</p>

<p>那么如何定时呢？答案是Cron Job。</p>

<p>如果大家谷歌rails cron job，就可以得到答案，一个是关于Cron Job的答案， <a href="http://www.gotealeaf.com/blog/cron-jobs-and-rails">http://www.gotealeaf.com/blog/cron-jobs-and-rails</a> ，一个是whener gem， <a href="https://github.com/javan/whenever">https://github.com/javan/whenever</a> 。</p>

<p>Cron是*nux系统中一个基于时间的任务安排软件。通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。</p>

<p>更多关于crontab定时任务，可以查看： <a href="http://linuxtools-rst.readthedocs.org/zh_CN/latest/tool/crontab.html">http://linuxtools-rst.readthedocs.org/zh_CN/latest/tool/crontab.html</a></p>

<p>关于时间的定义：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># +---------------- minute (0 - 59)</span>
</span><span class='line'><span class="c1"># |  +------------- hour (0 - 23)</span>
</span><span class='line'><span class="c1"># |  |  +---------- day of month (1 - 31)</span>
</span><span class='line'><span class="c1"># |  |  |  +------- month (1 - 12)</span>
</span><span class='line'><span class="c1"># |  |  |  |  +---- day of week (0 - 6) (Sunday=0)</span>
</span><span class='line'><span class="c1"># |  |  |  |  |</span>
</span><span class='line'>  <span class="o">*</span>  <span class="o">*</span>  <span class="o">*</span>  <span class="o">*</span>  <span class="o">*</span>  <span class="n">command</span> <span class="n">to</span> <span class="n">be</span> <span class="n">executed</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里，我就不细谈crontab定时任务，大家可以去看上面那个链接。</p>

<p>whenever是一个Ruby的gem，它可以提供一个清晰的语法来编写定时任务。</p>

<p>如果你刚才有停下来看crontab的内容，你会发现crontab任务的语法非常的复杂。</p>

<p>whenever的目的就是为了让你以ruby的语法来编写要执行的任务，再由它来生成真正的crontab任务。</p>

<p>如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:environment</span><span class="p">,</span> <span class="s2">&quot;staging&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:output</span><span class="p">,</span> <span class="p">{</span><span class="ss">:error</span> <span class="o">=&gt;</span> <span class="s2">&quot;log/cron_error_log.log&quot;</span><span class="p">,</span> <span class="ss">:standard</span> <span class="o">=&gt;</span> <span class="s2">&quot;log/cron_log.log&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">weekly_of_day</span> <span class="o">=</span> <span class="ss">:sunday</span> <span class="c1"># every sunday</span>
</span><span class='line'><span class="n">weekly_of_time</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:at</span> <span class="o">=&gt;</span> <span class="s1">&#39;0:00 am&#39;</span><span class="p">}</span> <span class="c1"># every sunday 0:00am</span>
</span><span class='line'>
</span><span class='line'><span class="n">monthly</span> <span class="o">=</span> <span class="s1">&#39;0 0 1 * *&#39;</span> <span class="c1"># monthly 0 0 1 * * (every first day of month at 0:00am)</span>
</span><span class='line'>
</span><span class='line'><span class="n">quarterly</span> <span class="o">=</span> <span class="s1">&#39;0 0 1 1,4,7,10 *&#39;</span> <span class="c1"># quarterly 0 0 1 1,4,7,10 * (every 3 months at 0:00am start from the first day in january)</span>
</span><span class='line'>
</span><span class='line'><span class="n">job_type</span> <span class="ss">:rbenv_rake</span><span class="p">,</span> <span class="sx">%Q{export PATH=~/.rbenv/shims:~/.rbenv/bin:/usr/bin:$PATH; eval &quot;$(rbenv init -)&quot;; cd :path &amp;&amp; RAILS_ENV=staging bundle exec rake :task --silent &gt;&gt; log/cron_log.log 2&gt;&gt; log/cron_error_log.log}</span>
</span><span class='line'>
</span><span class='line'><span class="n">every</span> <span class="n">weekly_of_day</span><span class="p">,</span> <span class="n">weekly_of_time</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">rbenv_rake</span> <span class="s2">&quot;email_notification:send_email_notification_weekly&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">every</span> <span class="n">monthly</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">rbenv_rake</span> <span class="s2">&quot;email_notification:send_email_notification_monthly&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>更多关于如何使用whenever的内容，请查看： <a href="https://github.com/javan/whenever">https://github.com/javan/whenever</a></p>

<p>whenever提供提供了四种job类型，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">job_type</span> <span class="ss">:command</span><span class="p">,</span> <span class="s2">&quot;:task :output&quot;</span>
</span><span class='line'><span class="n">job_type</span> <span class="ss">:rake</span><span class="p">,</span>    <span class="s2">&quot;cd :path &amp;&amp; :environment_variable=:environment bundle exec rake :task --silent :output&quot;</span>
</span><span class='line'><span class="n">job_type</span> <span class="ss">:runner</span><span class="p">,</span>  <span class="s2">&quot;cd :path &amp;&amp; bin/rails runner -e :environment &#39;:task&#39; :output&quot;</span>
</span><span class='line'><span class="n">job_type</span> <span class="ss">:script</span><span class="p">,</span>  <span class="s2">&quot;cd :path &amp;&amp; :environment_variable=:environment bundle exec script/:task :output&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，你在我给的例子中可以看到，我并没有使用其中的任何一个，而是自定义了一个rbenv_rake，这便是接下来的重点。</p>

<p>如果你产品环境的Ruby环境是通过rbenv配置，那么在你使用crontab任务的可能会遇到这个问题。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">/</span><span class="n">spec_set</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">92</span><span class="ss">:in</span> <span class="sb">`block in materialize&#39;: Could not find rake-10.4.2 in any of the sources (Bundler::GemNotFound)</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于原因，可以查看这个： <a href="http://benscheirman.com/2013/12/using-rbenv-in-cron-jobs/">http://benscheirman.com/2013/12/using-rbenv-in-cron-jobs/</a></p>

<p>Crontab运行在一个受限的环境下，所以.bash_profile的配置方式，并不起作用。需要在每次运行该任务前，重新初始化一次rbenv。</p>

<p>最后一点：</p>

<p>关于whenever和capistrano的集成，其实官方网站上也给出了，但是测试过不起作用，至少我这没起作用，所以我在部署的ruby文件中添加了一个task。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Update crontab with whenever&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:update_cron</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">within</span> <span class="n">current_path</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">execute</span> <span class="ss">:bundle</span><span class="p">,</span> <span class="ss">:exec</span><span class="p">,</span> <span class="s2">&quot;whenever --update-crontab </span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:application</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span> <span class="ss">:finishing</span><span class="p">,</span> <span class="s1">&#39;deploy:update_cron&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails环境和Capistrano部署]]></title>
    <link href="http://benweizhu.github.io/blog/2015/09/26/rails-env-and-capistrano/"/>
    <updated>2015-09-26T10:09:49+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/09/26/rails-env-and-capistrano</id>
    <content type="html"><![CDATA[<p>默认情况下，Rails 提供了三个环境：开发（development），测试（test）和生产（production）。这三个环境能满足大多数需求，但有时需要更多的环境。</p>

<p>假设有个服务器镜像了生产环境，但只用于测试。这种服务器一般叫做“交付准备服务器”（staging server）。要想为这个服务器定义一个名为“staging”的环境，新建文件 config/environments/staging.rb 即可。请使用 config/environments 文件夹中的任一文件作为模板，以此为基础修改设置。</p>

<p>在持续集成开发的场景下，除了开发环境（提供给Dev的验证环境），测试环境（提供QA的测试环境），一般还会有一个UAT环境（用户验收测试环境 - User Acceptance Test），它是离生产环境最近的一个预备环境，就像上面所说的staging。</p>

<p>通过Rails Server命令启动环境，默认是development。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">=&gt;</span> <span class="n">Booting</span> <span class="n">Puma</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">Rails</span> <span class="mf">4.2</span><span class="o">.</span><span class="mi">0</span> <span class="n">application</span> <span class="n">starting</span> <span class="ow">in</span> <span class="n">development</span> <span class="n">on</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">3000</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">Run</span> <span class="sb">`rails server -h`</span> <span class="k">for</span> <span class="n">more</span> <span class="n">startup</span> <span class="n">options</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">Ctrl</span><span class="o">-</span><span class="n">C</span> <span class="n">to</span> <span class="n">shutdown</span> <span class="n">server</span>
</span><span class='line'><span class="n">Puma</span> <span class="mf">2.11</span><span class="o">.</span><span class="mi">1</span> <span class="n">starting</span><span class="o">...</span>
</span><span class='line'><span class="o">*</span> <span class="n">Min</span> <span class="n">threads</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">max</span> <span class="n">threads</span><span class="p">:</span> <span class="mi">16</span>
</span><span class='line'><span class="o">*</span> <span class="n">Environment</span><span class="p">:</span> <span class="n">development</span>
</span><span class='line'><span class="o">*</span> <span class="n">Listening</span> <span class="n">on</span> <span class="n">tcp</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">3000</span>
</span></code></pre></td></tr></table></div></figure>


<p>切换不同的环境启动可以通过参数-e</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">rails</span> <span class="n">server</span> <span class="o">-</span><span class="n">e</span> <span class="n">production</span> <span class="o">-</span><span class="n">p</span> <span class="mi">4000</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《实战Gradle》译者序]]></title>
    <link href="http://benweizhu.github.io/blog/2015/09/19/gradle-in-action-chinese-version/"/>
    <updated>2015-09-19T10:02:36+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/09/19/gradle-in-action-chinese-version</id>
    <content type="html"><![CDATA[<p><img src="http://benweizhu.github.io/images/gradle_in_action_preview.jpg" width="500" title="《实战Gradle》" alt="Alt text" /></p>

<p><a href="http://search.jd.com/Search?keyword=%E5%AE%9E%E6%88%98gradle&enc=utf-8&wq=%E5%AE%9E%E6%88%98gradle&pvid=31qzkqei.dn8ieh" target="_blank">在京东搜索《实战Gradle》</a></p>

<p><a href="https://s.taobao.com/search?initiative_id=tbindexz_20150919&spm=a21bo.7724922.8452-taobao-item.2&sourceId=tb.index&search_type=item&ssid=s5-e&commend=all&imgfile=&q=%E5%AE%9E%E6%88%98gradle&suggest=0_1&_input_charset=utf-8&wq=gradle&suggest_query=gradle&source=suggest" target="_blank">在淘宝搜索《实战Gradle》</a></p>

<p><a href="http://www.amazon.cn/s/ref=nb_sb_noss?__mk_zh_CN=%E4%BA%9A%E9%A9%AC%E9%80%8A%E7%BD%91%E7%AB%99&url=search-alias%3Daps&field-keywords=%E5%AE%9E%E6%88%98+gradle " target="_blank">在亚马逊搜索《实战Gradle》</a></p>

<p><a href="http://www.amazon.cn/s/ref=nb_sb_noss?__mk_zh_CN=%E4%BA%9A%E9%A9%AC%E9%80%8A%E7%BD%91%E7%AB%99&url=search-alias%3Daps&field-keywords=%E5%AE%9E%E6%88%98+gradle" target="_blank">在当当网搜索《实战Gradle》</a></p>

<h1>内容简介</h1>

<p>Gradle是Java软件开发中的自动化构建工具，类似的传统工具如Ant和Maven。Gradle吸收或沿用了Maven中比较成功的一些实践，但相对于Maven或Ant又有极强的扩展。</p>

<p>《Gradle in Action》一书全方位的讲解了Gradle这一工具相关的知识，包括Gradle的基本知识，自动化构建的基本概念和最佳实践，以实际案例的方式解释如何使用Gradle进行软件项目构建。</p>

<p>除了基础知识外，由于软件开发绝对不仅仅是实现业务逻辑代码，书中还介绍了一些解决软件开发中常见问题的实践，如多语言，多项目构建，Gradle在持续集成和持续交付中的应用，Gradle构建JVM其他语言，以及Gradle集成Javascript构建等。
云计算和DevOps的兴起，给软件行业带来了翻天覆地的变化，书中对于云计算平台，开源社区中的一些工具与Gradle的结合使用也做了相关的介绍。</p>

<p>因为Groovy用于编写Gradle构建配置的DSL，所以为了帮助读者更好的理解Gradle，本书还讲解了Groovy的基本知识，虽然不足以全方位的讲解Groovy，但是理解Gradle足矣。</p>

<h1>译者序</h1>

<p>提到自动化构建，你能想到的是什么？是经典的make脚本语言？是曾经统治了Java构建世界的Ant?或者是颠覆了Ant统治地位的Maven? 抑或是即将也正在颠覆Maven的Gradle?不管你想到的哪一个，如果你还在使用Java语言开发软件，那Gradle将是你工具箱中必不可少的一样利器。而《Gradle in Action》将可能是你不可或缺的教材，或者参考书。</p>

<p>第一次接触到Gradle是加入ThoughtWorks的第一个项目，从此以后，我几乎认为Gradle应该是一个Java软件项目的标配，是每一个Java程序员都应该了如指掌的东西。本书结合简单实用的案例，由浅入深地讲解Gradle，正是我在学习Gradle时所希望拥有的一本教材，所以我便欣然接受并参与此书的翻译工作。希望本书能帮助所有将软件质量和开发效率视为软件项目中不可或缺的一环的程序员，把软件开发带到另一个高度。</p>

<p>虽然本书是Gradle的一本实用指南，但本书不仅仅局限于此。软件构建在现代软件开发过程中并不是独立工作的，开发人员通常面临的问题还包括持续集成，持续交付，以及云平台下的基础设施搭建，多语言项目构建等。本书还对如何结合Gradle解决此类问题以及一些常用的工具有一定的说明，如用于持续集成和交付的Jenkins，虚拟化技术工具vagrant等。Groovy语言用于实现Gradle DSL，因此理解基础的Groovy语言对理解Gradle也有极大的帮助，因此本书对Gradle语言的基本功能也做了讲解。</p>

<p>与另外两位同事合作翻译此书的过程，并非一帆风顺，由于物理位置的不同，使得沟通变得困难，我们不得不采用通读对方译文的形式使各自的行文风格尽量保持一致。但这同时也是一个充实有趣的过程，想要把一个单词或一句话翻译的精准到位从而反复推敲，有些技术语言如果直译又会生硬难懂，我们得寻求适合中文的准确表达方式。这些过程无疑是翻译中最大的趣味所在。在这里我想感谢朱本威和杨柳的智慧结晶，感谢出版社同事的辛勤劳作，感谢滕云的严格审校，更感谢Benjamin为Gradle社区带来如此优秀的读物。</p>

<p>博主评论：</p>

<p>朱本威，Java/Ruby软件开发工程师，Gradle系列博客<a href="http://benweizhu.github.io/blog/categories/gradleshen-ru-yu-shi-zhan/" target="_blank">Gradle深入与实战</a>，《实战Gradle》译者之一</p>

<blockquote><p>《实战Gradle》是一本既适合初学者，也适合有经验人员的经典参考书。它以故事的方式，简单而生动的解释了软件开发对构建的刚需，对比了Gradle的前辈Ant、Maven的优缺点，详细的介绍了Gradle优秀的特性集，并通过范例的方式生动的介绍了如何使用Gradle，是一本不可多得的优秀的Gradle书籍。 - 朱本威</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于运行Active Record数据迁移]]></title>
    <link href="http://benweizhu.github.io/blog/2015/09/10/active-record-migration/"/>
    <updated>2015-09-10T08:51:45+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/09/10/active-record-migration</id>
    <content type="html"><![CDATA[<p>Active Record数据库迁移是 Active Record提供的一个功能，按照时间顺序管理数据库模式。使用迁移，无需编写 SQL，使用简单的Ruby DSL就能修改数据表，对数据库的操作和所用的数据库种类无关。</p>

<p>你可以把每个迁移看做数据库的一个修订版本。数据库中一开始什么也没有，各个迁移会添加或删除数据表、字段或记录。Active Record知道如何按照时间线更新数据库，不管数据库现在的模式如何，都能更新到最新结构。同时，Active Record还会更新db/schema.rb文件，匹配最新的数据库结构。</p>

<h2>db:migrate</h2>

<p>Rails提供了很多Rake任务，用来执行指定的迁移。</p>

<p>其中最常使用的是rake db:migrate，执行还没执行的迁移中的change或up方法。如果没有未运行的迁移，直接退出。rake db:migrate按照迁移文件名中时间戳顺序执行迁移。</p>

<p>注意，执行db:migrate时还会执行db:schema:dump，更新db/schema.rb文件，匹配数据库的结构。</p>

<h2>db:migrate VERSION</h2>

<p>如果指定了版本，Active Record会运行该版本之前的所有迁移。版本就是迁移文件名前的数字部分。例如，要运行 20080906120000 这个迁移，可以执行下面的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span> <span class="no">VERSION</span><span class="o">=</span><span class="mi">20080906120000</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果20080906120000比当前的版本高，上面的命令就会执行所有20080906120000之前（包括 20080906120000）的迁移中的change或up方法，但不会运行20080906120000之后的迁移。如果回滚迁移，则会执行 20080906120000之前（不包括20080906120000）的迁移中的down方法。</p>

<h2>db:rollback</h2>

<p>还有一个常用的操作时回滚到之前的迁移。例如，迁移代码写错了，想纠正。我们无须查找迁移的版本号，直接执行下面的命令即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">rollback</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个命令会回滚上一次迁移，撤销 change 方法中的操作，或者执行 down 方法。如果想撤销多个迁移，可以使用 STEP 参数：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">rollback</span> <span class="no">STEP</span><span class="o">=</span><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个命令会撤销前三次迁移。</p>

<h2>db:redo</h2>

<p>db:migrate:redo 命令可以回滚上一次迁移，然后再次执行迁移。和 db:rollback 一样，如果想重做多次迁移，可以使用 STEP 参数。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="ss">migrate</span><span class="p">:</span><span class="k">redo</span> <span class="no">STEP</span><span class="o">=</span><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些 Rake 任务的作用和 db:migrate 一样，只是用起来更方便，因为无需查找特定的迁移版本号。</p>

<h2>db:migrate:up和db:migrate:down</h2>

<p>如果想执行指定迁移，或者撤销指定迁移，可以使用db:migrate:up和db:migrate:down任务，指定相应的版本号，就会根据需求调用change、up或down方法。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="ss">migrate</span><span class="p">:</span><span class="n">up</span> <span class="no">VERSION</span><span class="o">=</span><span class="mi">20080906120000</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个命令会执行20080906120000迁移中的change方法或up方法。db:migrate:up 首先会检测指定的迁移是否已经运行，如果Active Record任务已经执行，就不会做任何操作。</p>

<h2>修改现有的迁移</h2>

<p>有时编写的迁移中可能有错误，如果已经运行了迁移，不能直接编辑迁移文件再运行迁移。Rails 认为这个迁移已经运行，所以执行 rake db:migrate 任务时什么也不会做。这种情况必须先回滚迁移（例如，执行 rake db:rollback 任务），编辑迁移文件后再执行 rake db:migrate 任务执行改正后的版本。</p>

<p>一般来说，直接修改现有的迁移不是个好主意。这么做会为你以及你的同事带来额外的工作量，如果这个迁移已经在生产服务器上运行过，还可能带来不必要的麻烦。你应该编写一个新的迁移，做所需的改动。编辑新生成还未纳入版本控制的迁移（或者更宽泛地说，还没有出现在开发设备之外），相对来说是安全的。</p>

<h2>在不同的环境中运行迁移</h2>

<p>默认情况下，rake db:migrate 任务在 development 环境中执行。要在其他环境中运行迁移，执行命令时可以使用环境变量 RAILS_ENV 指定环境。例如，要在 test 环境中运行迁移，可以执行下面的命令：</p>

<p>$ rake db:migrate RAILS_ENV=test</p>

<p>参考资料：   <br/>
1.<a href="http://guides.ruby-china.org/active_record_migrations.html">http://guides.ruby-china.org/active_record_migrations.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring AOP 深入了解（一）还给业务逻辑代码一个干净的世界]]></title>
    <link href="http://benweizhu.github.io/blog/2015/09/06/deep-into-spring-aop-1/"/>
    <updated>2015-09-06T10:49:31+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/09/06/deep-into-spring-aop-1</id>
    <content type="html"><![CDATA[<h2>本篇博客系列的目的：</h2>

<p>之前一直想要实现一个日志类库：<a href="https://github.com/benweizhu/LoggerUtil">https://github.com/benweizhu/LoggerUtil</a></p>

<p>用来记录某个方法在调用前，调用后，抛出异常后的一些信息，比如方法名，参数，返回值。还希望可以指定记录的格式以及日志的级别（INFO，DEBUG等）。最关键的是，这个日志类库，必须有通用性和不可以有侵入性，这就导致它必定通过AOP来实现。</p>

<p>于是，为了做到这一点，现在我们就来深入的学习一次AOP：</p>

<h2>为什么要AOP</h2>

<p>编程语言最终极的目标就是能以更自然、更灵活的语言的方式模拟世界，从原始机器语言到过程语言再到面向对象的语言（OOP）。AOP提供了与OOP不同的另外一种方式来思考软件架构。OOP的模块单元是“类”，而AOP的模块单元“面”（Aspect）。</p>

<h4>那么问题来了，什么是“面”？以及什么“面向切面编程”？</h4>

<p>AOP被翻译成“面向方面编程”，“面向切面编程”，所以这里我更倾向于将“面”理解为“切面”（Aspect）。</p>

<p>从字面上理解，“切面”来自几何学，在立体几何中，切面是指用一个平面去截一个几何体（包括圆柱，圆锥，球，棱柱，棱锥、长方体，正方体等等），得到的平面图形。</p>

<p>那什么是“面向切面编程”？就是在该切面上加入一些逻辑操作（可以简单理解为“面向切面的操作”）。举个最常见的例子：</p>

<p>扑克牌的切牌，你可以将“广告牌”切入在任何你想要切入（或插入）的位置（你可以对扑克牌的任何一个切面做切牌操作）。插入的位置就是切面，插入的广告牌就是逻辑操作。</p>

<p>又或者是“斗地主”中，第一把不知道谁是地主，于是将一张牌反插入到牌的中间。本来应该按照顺序发牌，并不能知道谁是地主，但是因为你在某个位置插入了一个特殊操作（将一张牌反插入），因为多了一个逻辑，所以可以知道谁是地主。（或者将广告牌插入中间，也可以知道谁是地主）</p>

<p>这是“面向切面的编程”的最基础理解。</p>

<h3>也许你还是不能理解面向切面编程，最重要是你并不知道为什么需要它，即何时需要它？</h3>

<p>在OO的世界里，我们操作的是对象，创建一个对象并使用对象的属性和方法，而对象有抽象和继承的特性，因此，我们会利用抽象和继承的特性来消除重复的代码。</p>

<p>我们知道，编程语言是从原始机器语言到过程语言再到面向对象的语言，但是即便是OO的世界，我们也逃离不了面向过程的编程方式，代码的每一步操作一定是有顺序的，因为机器解释代码也是按顺序执行的。</p>

<p>代码按照顺序执行无可厚非，遇到重复的代码，我们利用抽象的方式，将重复的部分抽离成一个独立模块（方法或者类），由所有需要的地方重用即可。</p>

<p>但有一种顺序代码，它重复使用在不同的固定位置，它与业务代码无关，通过OO的常用办法并不能消除这种模式的重复，比如：事务管理，性能监控（和控制）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">addUser</span><span class="o">(){</span>
</span><span class='line'>  <span class="n">transactionManager</span><span class="o">.</span><span class="na">beginTransaction</span><span class="o">();</span>
</span><span class='line'>  <span class="o">..</span>
</span><span class='line'>  <span class="n">transactionManager</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们知道这些重复性的代码逻辑，是可以非常轻松的独立出来，比如，beginTransaction和commit方法，但，我们无法通过抽象的方式来消除这种重复的调用，因为它和业务代码具有关联性，它依附在业务代码的顺序流程中。</p>

<p>有人说，可以采用模板方法（设计模式中的一种模式），这样可以消除重复，但也导致所有使用模板方法的类，都要重写模板中的其中一步（某个方法）来实现业务逻辑，重写方法是不能改变方法的名字。这样就给代码的自描述性带来了困难，得不偿失。</p>

<p>好在AOP希望做得到的就是，将这些分散在各个不同业务逻辑代码中的相同代码，通过切入的方式，将这块具有顺序性关联的逻辑抽离到独立模块，而在逻辑代码中将看不到之前重复的逻辑。</p>

<p>从而，还给业务逻辑代码一个干净的世界。这就是AOP给我们带来的好处。</p>

<p>参考资料：  <br/>
1.Spring 3.0就是这么简单  <br/>
2.<a href="http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/aop.html">http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/aop.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用Postgres全文搜索特性（一）]]></title>
    <link href="http://benweizhu.github.io/blog/2015/08/09/postgres-full-text-search-1/"/>
    <updated>2015-08-09T08:24:23+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/08/09/postgres-full-text-search-1</id>
    <content type="html"><![CDATA[<h2>基本概念</h2>

<p>全文搜索提供了一种能力来鉴别的自然语言文档是否满足某个查询语句，并根据与查询语句的相关性来对查询结果排序。最常见的查询就是找到所有包含查询术语（term）的文档，并根据他们的相似性进行排序。</p>

<p>文字查询已经在数据库中存在多年。PostgreSQL有~，~*，LIKE和ILIKE这样的对应文字数据类型的操作符，但它们缺少现代信息系统需要的必要属性：</p>

<p>1.没有语言特性的支持，比如，英语中的单数和复数，用正则表达式是做不到识别复数单词的。<br/>
2.没有查询结果的相似性的排序。 <br/>
3.因为没有索引支持，所以会比较慢</p>

<p>全文搜索允许对文档进行预处理，比允许建立索引来提供搜索速度。预处理一般包括：</p>

<p>1.将文档解析为符号。这对于解析不同类型的符号非常有用。比如，数字，单词，复杂单词，email，这样它们就可以用不同的方式被处理。原则上，符号类型取决于文档，但是大部分情况，可以使用预定义的类型就足够了。Postgres提供了一个标准的解析器，但也可以建立自定义的解析器。</p>

<p>2.将符号转化为分词。一个分词（词位，单词单位）是一个字符串，跟符号相似，但是它被正常化，这样就可以匹配同一个单词的不同形式，比如，正常化允许将大写字母转换为小写，更常见的是英语单词的前缀和后缀（复数单词），这就允许搜索同一个单词的不同形式，而不需要输入该单词的全部可能变形式。（话句话说，符号是文档文本的直接片段，而分词是可以用来索引和搜索的有用单词）。而Postgres实现这种方式的办法就是利用词典，可以提供不同标准的词典，或者自定义的词典来满足不同的需要。</p>

<p>3.Storing preprocessed documents optimized for searching. For example, each document can be represented as a sorted array of normalized lexemes. Along with the lexemes it is often desirable to store positional information to use for proximity ranking, so that a document that contains a more &ldquo;dense&rdquo; region of query words is assigned a higher rank than one with scattered query words.(这段没看明白)</p>

<h2>文档</h2>

<p>上面提到一个很重要的概念，叫做文档（Document）。那么，它的含义是什么？</p>

<p>在PostgresSQL的搜索中，文档可以是数据库表中某一行的某一个文字字段（textual field），或者是多个这样的字段的组合，也许他们存储在不同表中，又或者是动态获取到的结果。话句话说，文档是由不同的部分组成，可能并不会作为一个整体存在某一个位置。比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">title</span> <span class="o">||</span> <span class="s1">&#39; &#39;</span> <span class="o">||</span>  <span class="n">author</span> <span class="o">||</span> <span class="s1">&#39; &#39;</span> <span class="o">||</span>  <span class="n">abstract</span> <span class="o">||</span> <span class="s1">&#39; &#39;</span> <span class="o">||</span> <span class="n">body</span> <span class="k">AS</span> <span class="n">document</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">messages</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">mid</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span> <span class="n">m</span><span class="p">.</span><span class="n">title</span> <span class="o">||</span> <span class="s1">&#39; &#39;</span> <span class="o">||</span> <span class="n">m</span><span class="p">.</span><span class="n">author</span> <span class="o">||</span> <span class="s1">&#39; &#39;</span> <span class="o">||</span> <span class="n">m</span><span class="p">.</span><span class="n">abstract</span> <span class="o">||</span> <span class="s1">&#39; &#39;</span> <span class="o">||</span> <span class="n">d</span><span class="p">.</span><span class="n">body</span> <span class="k">AS</span> <span class="n">document</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">messages</span> <span class="n">m</span><span class="p">,</span> <span class="n">docs</span> <span class="n">d</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">did</span> <span class="k">AND</span> <span class="n">mid</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span> 
</span></code></pre></td></tr></table></div></figure>


<p>title，author，abstract作为了文档，它们是message的不同字段。</p>

<p>还有一种可能，文档以简单文本的方式存储在文件系统中，这样的情况下，数据库中可以存放全文的索引来执行搜索，并使用一些独立的标识符来从文件系统中获取文档。</p>

<h2>TSVECTOR（分词向量）</h2>

<p>以文本搜索为目的，每个文档必须缩减为预处理的tsvector（某种向量）形式，搜索和排名都是在这个可以代表文档的tsvector上执行，文档只是在需要用户需要使用时才去获取，因此，我们常常将tsvector作为一种文档，当然它只是全文文档的一种压缩形式。</p>

<p>PostgreSQL全文搜索是基于匹配操作符@@实现，当一个tsvector（document）匹配一个tsquery（query）时，返回true。至于哪个写在前面，哪个写在后面不重要：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="s1">&#39;a fat cat sat on a mat and ate a fat rat&#39;</span><span class="p">::</span><span class="n">tsvector</span> <span class="o">@@</span> <span class="s1">&#39;cat &amp; rat&#39;</span><span class="p">::</span><span class="n">tsquery</span><span class="p">;</span>
</span><span class='line'> <span class="o">?</span><span class="k">column</span><span class="o">?</span>
</span><span class='line'><span class="c1">----------</span>
</span><span class='line'> <span class="n">t</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span> <span class="s1">&#39;fat &amp; cow&#39;</span><span class="p">::</span><span class="n">tsquery</span> <span class="o">@@</span> <span class="s1">&#39;a fat cat sat on a mat and ate a fat rat&#39;</span><span class="p">::</span><span class="n">tsvector</span><span class="p">;</span>
</span><span class='line'> <span class="o">?</span><span class="k">column</span><span class="o">?</span>
</span><span class='line'><span class="c1">----------</span>
</span><span class='line'> <span class="n">f</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上面的例子中，一个tsquery不是单纯的文本，tsvector也是一样。一个tsquery包含搜索术语（term），它们是已经做过正常化的分词，并且可能通过AND，OR和NOT操作将多个术语结合。函数to_tsquery和plainto_tsquery可以帮助将用户写的文本转化为适当的tsquery。简单来说，to_tsvector是用来解析和正常化一个文档字符串的。所以，在实际应用中，一个文本搜索匹配应该长如下这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;fat cats ate fat rats&#39;</span><span class="p">)</span> <span class="o">@@</span> <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;fat &amp; rat&#39;</span><span class="p">);</span>
</span><span class='line'> <span class="o">?</span><span class="k">column</span><span class="o">?</span>
</span><span class='line'><span class="c1">----------</span>
</span><span class='line'> <span class="n">t</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，如果写成如下方式将不会成功：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="s1">&#39;fat cats ate fat rats&#39;</span><span class="p">::</span><span class="n">tsvector</span> <span class="o">@@</span> <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;fat &amp; rat&#39;</span><span class="p">);</span>
</span><span class='line'> <span class="o">?</span><span class="k">column</span><span class="o">?</span>
</span><span class='line'><span class="c1">----------</span>
</span><span class='line'> <span class="n">f</span>
</span></code></pre></td></tr></table></div></figure>


<p>@@操作符也支持文本输入，简单情况下，允许跳过具体的tsvector或者tsquery的转换。使用如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">tsvector</span> <span class="o">@@</span> <span class="n">tsquery</span>
</span><span class='line'><span class="n">tsquery</span>  <span class="o">@@</span> <span class="n">tsvector</span>
</span><span class='line'><span class="nb">text</span> <span class="o">@@</span> <span class="n">tsquery</span>
</span><span class='line'><span class="nb">text</span> <span class="o">@@</span> <span class="nb">text</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何在数据库表中进行搜索，并使用索引呢？</h2>

<p>我们是可以再没有索引的情况下做全文搜索的，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">title</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">pgweb</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;english&#39;</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span> <span class="o">@@</span> <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;english&#39;</span><span class="p">,</span> <span class="s1">&#39;friend&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>创建索引</h3>

<p>我们可以创建GIN索引来提供文本搜索的速度：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">pgweb_idx</span> <span class="k">ON</span> <span class="n">pgweb</span> <span class="k">USING</span> <span class="n">gin</span><span class="p">(</span><span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;english&#39;</span><span class="p">,</span> <span class="n">body</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意这里使用两个参数的to_tsvector方法。只有文本搜索指定了一个配置名字才能使用在表达式索引中。这是因为索引内容必须不被default_text_search_config所影响。如果它们被影响了，索引内容有可能不一致，因为不同的条目（entries）可以包含有不同配置生成的tsvector，所以没有办法猜测谁是谁。所以也就没办法正确的删除和还原这样是索引。</p>

<p>因为上面使用了两个参数版本的to_tsvector，只有也使用了两参数版本to_tsvector并且配置相同的查询语句才能使用。也就说，WHERE to_tsvector(&lsquo;english&rsquo;, body) @@ &lsquo;a &amp; b&#8217;可以使用索引，WHERE to_tsvector(body) @@ &#8216;a &amp; b&#8217;就不行。</p>

<p>索引可以建立在联合的字段中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">pgweb_idx</span> <span class="k">ON</span> <span class="n">pgweb</span> <span class="k">USING</span> <span class="n">gin</span><span class="p">(</span><span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;english&#39;</span><span class="p">,</span> <span class="n">title</span> <span class="o">||</span> <span class="s1">&#39; &#39;</span> <span class="o">||</span> <span class="n">body</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h3>在单独的字段创建向量</h3>

<p>另外一种办法就是创建一个单独的tsvector字段来保存to_tsvector的输出，本例中，coalesce用来保证即便有一个字段是null，仍然会生成索引：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">pgweb</span> <span class="k">ADD</span> <span class="k">COLUMN</span> <span class="n">textsearchable_index_col</span> <span class="n">tsvector</span><span class="p">;</span>
</span><span class='line'><span class="k">UPDATE</span> <span class="n">pgweb</span> <span class="k">SET</span> <span class="n">textsearchable_index_col</span> <span class="o">=</span>
</span><span class='line'>     <span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;english&#39;</span><span class="p">,</span> <span class="n">coalesce</span><span class="p">(</span><span class="n">title</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="s1">&#39; &#39;</span> <span class="o">||</span> <span class="n">coalesce</span><span class="p">(</span><span class="n">body</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们创建一个GIN索引来加快搜索：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">textsearch_idx</span> <span class="k">ON</span> <span class="n">pgweb</span> <span class="k">USING</span> <span class="n">gin</span><span class="p">(</span><span class="n">textsearchable_index_col</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在可以来执行一个快速的全文搜索：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">title</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">pgweb</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">textsearchable_index_col</span> <span class="o">@@</span> <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;create &amp; table&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">last_mod_date</span> <span class="k">DESC</span>
</span><span class='line'><span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当使用独立字段来存储tsvector的结果时，非常有必要创建一个触发器（trigger）来保证tsvector的状态，当title或者body发生改变。</p>

<p>独立列的方式比表达式索引方式好的其中一点是当使用索引查询时，不用在查询语句中指定文本查询的配置。正如上面的例子中，查询语句依赖于default_text_search_config。另外一个优点是，查询更快速，因为它不需要重新执行to_tsvector来验证索引的匹配（特别是使用GiST的时候）。唯一的不同时，这种方式需要占据存储空间。</p>

<p>参考自：<a href="http://www.postgresql.org/docs/9.2/static/textsearch-intro.html">http://www.postgresql.org/docs/9.2/static/textsearch-intro.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS后代选择器以及选择器特殊性]]></title>
    <link href="http://benweizhu.github.io/blog/2015/08/01/css-selector-basic/"/>
    <updated>2015-08-01T17:46:56+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/08/01/css-selector-basic</id>
    <content type="html"><![CDATA[<h3>常用的重要选择器规则：</h3>

<p>element,element div,p   选择所有 div 元素和所有 p 元素。  <br/>
element element div p   后代选择器：选择 div 元素内部的所有 p 元素。 <br/>
element>element div>p   子选择器：选择父元素为 div 元素的所有 p 元素。  <br/>
element+element div+p   第一个子元素选择器：选择紧接在 div 元素之后的所有 p 元素。</p>

<h3>后代选择器</h3>

<p>后代选择器（descendant selector）又称为包含选择器。后代选择器可以选择作为某元素后代的元素。</p>

<p>我们可以定义后代选择器来创建一些规则，使这些规则在某些文档结构中起作用，而在另外一些结构中不起作用。
举例来说，如果你希望只对 h1 元素中的 em 元素应用样式，可以这样写：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">h1</span> <span class="nt">em</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span><span class="nb">red</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面这个规则会把作为 h1 元素后代的 em 元素的文本变为 红色。其他 em 文本（如段落或块引用中的 em）则不会被这个规则选中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>This is a <span class="nt">&lt;em&gt;</span>important<span class="nt">&lt;/em&gt;</span> heading<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>This is a <span class="nt">&lt;em&gt;</span>important<span class="nt">&lt;/em&gt;</span> paragraph.<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在后代选择器中，规则左边的选择器一端包括两个或多个用空格分隔的选择器。选择器之间的空格是一种结合符（combinator）。每个空格结合符可以解释为“&hellip; 在 &hellip; 找到”、“&hellip; 作为 &hellip; 的一部分”、“&hellip; 作为 &hellip; 的后代”，但是要求必须从右向左读选择器。
因此，h1 em 选择器可以解释为 “作为 h1 元素后代的任何 em 元素”。如果要从左向右读选择器，可以换成以下说法：“包含 em 的所有 h1 会把以下样式应用到该 em”。</p>

<p>关于后代选择器有一个常被忽略的方面，即两个元素之间的层次间隔可以是无限的。例如，如果写作ul em，这个语法就会选择从u1元素继承的所有em元素，而无论em的嵌套层次有多深。</p>

<h3>子选择器</h3>

<p>某些情况下，可能并不想选择一个任意的后代元素，而是希望缩小范围，只选择另一个元素的子元素（不是所有后代元素）。可以使用子结合符，即大于号(>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">h1</span> <span class="o">&gt;</span> <span class="nt">strong</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>特殊性</h3>

<p>如果有多个选择器都满足同一个元素，即冲突了，怎么知道哪一个规则更强？</p>

<p>答案在于每个选择器的特殊性。对于每个规则，用户代理会计算选择器的特殊性，并将这个特殊性附加在规则中的各个声明。如果一个元素有两个或者多个冲突的属性声明，那么有最高特殊性的声明就会胜出。</p>

<p>选择器的特殊性由选择器本身的组件确定。特殊性表述为4个部分，0,0,0,0</p>

<p>1.对于选择器中给定的各个ID属性，加 0,1,0,0
2.对于选择器中给定的各个类元素，属性选择器或伪类，加 0,0,1,0
3.对于选择器中给定的各个元素和伪元素，加0,0,0,1
4.结合符和通配选择器对特殊性没有任何贡献</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">h1</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;}</span> <span class="nt">0</span><span class="o">,</span><span class="nt">0</span><span class="o">,</span><span class="nt">0</span><span class="o">,</span><span class="nt">1</span>
</span><span class='line'><span class="nt">p</span> <span class="nt">em</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="nb">purple</span><span class="p">;}</span> <span class="nt">0</span><span class="o">,</span><span class="nt">0</span><span class="o">,</span><span class="nt">0</span><span class="o">,</span><span class="nt">2</span>
</span><span class='line'><span class="nc">.grape</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="nb">purple</span><span class="p">}</span> <span class="nt">0</span><span class="o">,</span><span class="nt">0</span><span class="o">,</span><span class="nt">1</span><span class="o">,</span><span class="nt">0</span>
</span><span class='line'><span class="o">*</span><span class="nc">.bright</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="nb">yellow</span><span class="p">}</span> <span class="nt">0</span><span class="o">,</span><span class="nt">0</span><span class="o">,</span><span class="nt">1</span><span class="o">,</span><span class="nt">0</span>
</span><span class='line'><span class="nt">p</span><span class="nc">.bright</span> <span class="nt">em</span><span class="nc">.dark</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="nb">maroon</span><span class="p">}</span> <span class="nt">0</span><span class="o">,</span><span class="nt">0</span><span class="o">,</span><span class="nt">2</span><span class="o">,</span><span class="nt">2</span>
</span><span class='line'><span class="nt">div</span><span class="nf">#sidebar</span> <span class="o">*[</span><span class="nt">href</span><span class="o">]</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="nb">silver</span><span class="p">}</span> <span class="nt">0</span><span class="o">,</span><span class="nt">1</span><span class="o">,</span><span class="nt">1</span><span class="o">,</span><span class="nt">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>第五条规则强于第二条</p>

<p>0011 > 0001
0101 > 0017</p>

<p>内联样式的特殊性
我们已经见过以0开头的特殊性，所以你可能会奇怪为什么会有这些特殊性。一般地，第一个0是为内联样式声明保留的，它比所有其他声明的特殊性都高，内联样式的特殊性是1,0,0,0</p>

<h3>!important 重要性规则</h3>

<p>有时某个声明可能非常重要，超过了所有其他声明。CSS2.1称之为重要声明，并允许在这些声明的结束分号之前插入!important来标识。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">p</span><span class="nc">.dark</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="m">#333</span> <span class="cp">!important</span><span class="p">;</span> <span class="k">background</span><span class="o">:</span> <span class="nb">white</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>必须正确地放置!important，否则声明将无效，它应该总是放在声明的最后，即分号之前。如果一个属性的值包含多个关键字，则必须放在最后一个关键词的后面，比如font：sss,sss !important;</p>

<p>标志位!important的声明并没有特殊的特殊性值，不过要与非重要声明分开考虑。实际上，所有!important声明会分组在一起，重要声明的特殊性冲突会在重要声明内部解决，而不会与非重要声明相混肴。类似的，非重要声明也归为一组，使用特殊性来解决冲突。如果一个重要声明和一个非重要声明冲突，胜出的总是重要声明。</p>

<p>1.《css权威指南》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解设计RESTful API - 资源、表述和HTTP协议语义]]></title>
    <link href="http://benweizhu.github.io/blog/2015/07/25/restful-web-api-part-1/"/>
    <updated>2015-07-25T20:39:45+08:00</updated>
    <id>http://benweizhu.github.io/blog/2015/07/25/restful-web-api-part-1</id>
    <content type="html"><![CDATA[<h3>什么是资源？什么是表述？</h3>

<p>就本质而言，任何足够重要并被引用的事物都可以是资源。如果你的用户“想要建立指向它的超文本链接，指出或者反对关于它的断言，获取或者缓存它的表述，共另外的表述引用它的全部或者部分，给它增加注释信息，或者对它执行某些操作”，（源自《万维网的架构》），你都应该将它定义为资源。</p>

<p>每个资源必须拥有URL，在web上，我们使用URL来为每个资源提供一个全球唯一的地址，将一个事物赋以URL，它就会成为一个资源。</p>

<p>石榴可以是一个资源，但是你不可能通过互联网传输它，数据库中的一条记录可以是一个资源，并且可以通过互联网传输。</p>

<p>当客户端对一个资源发起一个Get请求的时候，服务器会以一种有效的方式提供一个采集了资源信息的文档作为回应。这种资源信息的文档就是一种表述，一种以机器可读的方式对资源当前的状态进行说明。</p>

<h3>资源有多重表述</h3>

<p>一个资源可以有多种表述。比如，有的资源可以有整体概括性的表述，也可以有面面俱到的详细表述，又或者可能以JSON格式或者XML格式来表述同一个资源。</p>

<h3>约束 - HTTP协议语义</h3>

<p>尽管任何事物都可以成为一个资源，但是客户端并不能随心所欲地对资源进行任意的操作。所能进行的操作是有规定的。在一个RESTful系统里，客户端和服务器端只能通过相互发送遵循预定义协议的消息来进行交互。在Web API的世界里，该协议就是HTTP。</p>

<p>在设计Web API时，严格遵守HTTP协议语义是设计好的API的重要基础。</p>

<h4>GET请求</h4>

<p>客户端通过发送Get请求来获取某个URL所标示的资源的表述。Get被定义为安全的HTTP方法。它仅仅是对信息的一次请求。向服务器发送一条Get请求对资源的影响应该和没有发送一样。</p>

<h4>DELETE请求</h4>

<p>发送DELETE请求，客户端希望服务器将资源销毁，并且以后再也不会跳到它。当Get请求再次访问一个已经销毁的资源，服务器应该返回错误响应码，比如404（Not Found）。Delete不是一个安全的方法，它会改变资源的状态，但是DELETE方法有另外一个很重要的属性，就是幂等性。当你发送一个DELETE请求后，资源就永久性的消失了，即便之后，再次发送相同的DELETE请求，也许你会收到404的错误码，但是第二次发送后和第一次发送后，资源的状态是一致的，仍然不存在。</p>

<p>幂等性是一个很重要的特性，因为互联网的不稳定性，假设发送的一个Delete请求，因为连接超时，你并没有收到响应，所以你无法知道发送的Delete请求是否顺利完成，这时你也许会发送第二次Delete请求。幂等性保证了执行两次Delete请求并不会比执行一次Delete请求给资源带来更多的影响。</p>

<h4>POST-to-Append请求</h4>

<p>为什么是Post-to-Append而不是Post呢？因为Post方法可以做两件事情，第一件事情就是Post-to-Append，第二件事情叫做overloaded post。我们先看POST-to-Append，向某个资源发送一条Post请求用以在该资源的下一级中创建新的资源，当客户端发送一个POST-to-Append请求时，它会在请求的实体消息体中添加所希望创建的资源的表述信息并发给服务器。Post方法既不安全也不幂等，如果发送多次Post请求，就会创建多个资源。</p>

<h4>PUT请求</h4>

<p>Put请求用于修改资源的状态。客户端一般会通过Get请求获取表述，然后对其进行修改，最后再将修改后的资源表述作为PUT请求的负载数据发送回去。PUT请求也是幂等的，无论发送多少次PUT请求，结果都和第一次发送PUT请求一样。</p>

<hr />

<p>以上4种请求，我们最常见也是使用最频繁的请求。接下来要介绍的请求，虽然见的不多，但是当你了解后，你会觉得它非常有用。</p>

<h4>PATCH请求</h4>

<p>表述的信息量可能非常大。虽然，我们可以使用PUT请求来修改资源，但是如果只想修改资源状态的部分，或者说很少一部分，才PUT就会造成极大的资源浪费，这对于移动应用所使用的Web API设计是非常重要的。和将完整信息发送过去的PUT方法不同，PATCH方法将一个“diff”的表述放在请求的负载数据中发送给服务器。</p>

<h4>HEAD请求</h4>

<p>Head方法是和Get方法一样的安全方法。服务器应该和处理Get方法一样除了Head方法，但是Head方法不需要发送实体消息，只需要发送HTTP状态码和报头。</p>

<h4>OPTIONS请求</h4>

<p>OPTIONS是HTTP的原生探索机制。一个OPTIONS请求的返回结果包含一个HTTP Allow报头，这个报头展示了这个资源所支持的所有HTTP方法。</p>

<h4>肮脏的Overloaded POST请求</h4>

<p>POST不仅仅被用于创建新的资源，在用浏览器上网的时候，POST也被用于传输任何形式的变化，它将PUT、DELETE、PATCH、LINK和UNLINK所有的方法混合成一个方法。</p>

<p>比如，在页面有一个表单对用户的基本信息进行修改，它是一个POST请求，但是从语义上，它更像是一个PUT，但这完全是合法的，任何数据作为POST请求的一部分发出去，不论是出于什么目的，这都是合法的。这导致POST请求没有任何语义。由于重载后的POST请求可以用来完成任何事情，所以这种POST方法既不安全也不幂等。</p>

<hr />

<p><strong>好的API不应该依靠文档来维护它的使用方式，就好像是优秀的代码，不需要注释来考诉你它是干什么，合理的协议语义的使用会帮助API实现基本的自我描述，虽然这还远远不够，但它最起码是互联网上大家都遵守的约束。</strong></p>

<p>参考资料： <br/>
1. RESTful Web AIPs</p>
]]></content>
  </entry>
  
</feed>
