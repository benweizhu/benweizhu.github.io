<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NO END FOR LEARNING]]></title>
  <link href="http://benweizhu.github.io/atom.xml" rel="self"/>
  <link href="http://benweizhu.github.io/"/>
  <updated>2017-05-14T11:13:28+08:00</updated>
  <id>http://benweizhu.github.io/</id>
  <author>
    <name><![CDATA[ZHU Benwei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React应用在产品环境下的性能优化]]></title>
    <link href="http://benweizhu.github.io/blog/2017/05/12/react-redux-production-optimisation/"/>
    <updated>2017-05-12T18:21:55+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/05/12/react-redux-production-optimisation</id>
    <content type="html"><![CDATA[<p>只有10%~20%的最终用户响应时间花在了下载HTML文档上，其余的80%~90%时间花在了下载页面中的 <strong>所有组件</strong> 上。   - 性能黄金法则，Steve Souders</p>

<p>Steve Souders在2007年提出这样的“性能黄金法则”，我猜测当他看到React这样一项技术之后，一定会觉得自己的这个法则居然如此的准确，可能甚至觉得这个比例不够极致。（虽然此组件非React组件，但是我还是忍不住想笑）</p>

<p>所以，今天我们就来聊聊，React应用在产品环境下的性能优化问题。</p>

<h2>Bundle大小分析</h2>

<p>在开始做任何的优化之前，你需要知道痛点在什么地方？既然Steve说80%~90%时间花在了下载页面中的 <strong>所有组件</strong> 上，那么就从了解项目的模块组成开始。</p>

<p><strong>1.Webpack运行时的输出</strong></p>

<p>在没有任何外部力量帮助的情况下，我们可以直接阅读Webpack的输出
<img src="http://benweizhu.github.io/images/react-production/webpack-output.png" width="500" alt="react ouput" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>webpack --display-chunks</span></code></pre></td></tr></table></div></figure>


<p>可以查看模块在哪个分块中出现，帮助我们查找分块中重复的依赖。</p>

<p><strong>2.bundle-size-analyzer</strong></p>

<p><a href="https://github.com/robertknight/webpack-bundle-size-analyzer" title="webpack-bundle-size-analyzer">webpack-bundle-size-analyzer</a>是我个人比较喜欢的模块大小分析工具，使用起来非常简单，输出也非常清晰。</p>

<p><img src="http://benweizhu.github.io/images/react-production/webpack-analyzer.png" width="500" alt="webpack-analyzer" /></p>

<p><strong>3.webpack-bundle-analyzer</strong></p>

<p><a href="https://github.com/th0r/webpack-bundle-analyzer" title="webpack-bundle-analyzer">webpack-bundle-analyzer</a>在github上star人数更多，功能也相对更加齐全（fancy）。
<img src="http://benweizhu.github.io/images/react-production/webpack-bundle-analyzer.gif" width="500" alt="webpack-bundle-analyzer.gif" /></p>

<h2>代码分离（Code Splitting）</h2>

<p><strong>1.Vendor代码分离</strong></p>

<p>代码分离是Webpack核心功能之一，典型的做法是将第三方依赖代码从应用代码中抽离出来，这样可以利用浏览器的缓存来提高性能（减少下载次数）。</p>

<p>Webpack官方文档有非常详细的介绍： <a href="https://webpack.js.org/guides/code-splitting-libraries/" title="code-splitting-libraries">code-splitting-libraries</a>，我就不在这里赘述，下面是一个简单代码样例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpack&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">env</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">entry</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">main</span><span class="o">:</span> <span class="s1">&#39;./index.js&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">vendor</span><span class="o">:</span> <span class="s1">&#39;react&#39;</span><span class="p">,</span> <span class="s1">&#39;react-dom&#39;</span><span class="p">,</span> <span class="s1">&#39;react-redux&#39;</span><span class="p">,</span> <span class="s1">&#39;babel-polyfill&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">output</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">filename</span><span class="o">:</span> <span class="s1">&#39;[name].[chunkhash].js&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">path</span><span class="o">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;dist&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span>
</span><span class='line'>                <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;vendor&#39;</span> <span class="c1">// Specify the common bundle&#39;s name.</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.CSS代码</strong></p>

<p>也许你还会想要的就是将CSS文件分离，原因是一样的。官方文档也给出了非常详细的介绍：<a href="https://webpack.js.org/guides/code-splitting-css/" title="code-splitting-css">code-splitting-css</a>，所以同样也不赘述了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">extractCSS</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExtractTextPlugin</span><span class="p">(</span><span class="s1">&#39;styles.css&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">module</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">rules</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.scss$/</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">use</span><span class="o">:</span> <span class="nx">extractCSS</span><span class="p">.</span><span class="nx">extract</span><span class="p">([</span><span class="s1">&#39;css-loader&#39;</span><span class="p">,</span> <span class="s1">&#39;postcss-loader&#39;</span><span class="p">,</span> <span class="s1">&#39;sass-loader&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="nx">extractCSS</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.React-Router按需分离</strong></p>

<p>当应用逐渐变得复杂后，你会发现，仅仅将代码分离为vendor和app两个bundle，远远是不够的，要么vendor.js文件特别大，要么app.js文件特别大，这个时候你一定会想到，要按需加载（异步加载）。</p>

<p>ES2015 Loader spec中定义了一个import()方法来在运行时动态加载ES2015的模块，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">determineDate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">import</span><span class="p">(</span><span class="s1">&#39;moment&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">moment</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">moment</span><span class="p">().</span><span class="nx">format</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Failed to load moment&#39;</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">determineDate</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Webpack会将import()方法看做一个“代码分离点”，将被加载的模块放在一个单独的文件块中。</p>

<p>那么，如果你的应用采用了React-Router，我们就可以根据路由，按需加载所使用的组件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">errorLoading</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="err">`</span><span class="nx">Dynamic</span> <span class="nx">page</span> <span class="nx">loading</span> <span class="nx">failed</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">error</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">loadRoute</span><span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">module</span> <span class="o">=&gt;</span> <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">module</span><span class="p">.</span><span class="k">default</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">Router</span> <span class="nx">history</span><span class="o">=</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="nx">queryKey</span><span class="o">=</span><span class="s2">&quot;false&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/user&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;UserPage&quot;</span> <span class="nx">getComponent</span><span class="o">=</span><span class="p">{(</span><span class="nx">location</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">System</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="s1">&#39;./components/UserPage&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">loadRoute</span><span class="p">(</span><span class="nx">cb</span><span class="p">,</span> <span class="kc">false</span><span class="p">)).</span><span class="k">catch</span><span class="p">(</span><span class="nx">errorLoading</span><span class="p">)}}</span>
</span><span class='line'>  <span class="o">/&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/data&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;DataPage&quot;</span> <span class="nx">getComponent</span><span class="o">=</span><span class="p">{(</span><span class="nx">location</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">System</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="s1">&#39;./components/DataPage&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">loadRoute</span><span class="p">(</span><span class="nx">cb</span><span class="p">,</span> <span class="kc">false</span><span class="p">)).</span><span class="k">catch</span><span class="p">(</span><span class="nx">errorLoading</span><span class="p">)}}</span>
</span><span class='line'>  <span class="o">/&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/about&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;AboutPage&quot;</span> <span class="nx">getComponent</span><span class="o">=</span><span class="p">{(</span><span class="nx">location</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">System</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="s1">&#39;./components/AboutPage&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">loadRoute</span><span class="p">(</span><span class="nx">cb</span><span class="p">,</span> <span class="kc">false</span><span class="p">)).</span><span class="k">catch</span><span class="p">(</span><span class="nx">errorLoading</span><span class="p">)}}</span>
</span><span class='line'>  <span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/Router&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>运行webpack -p</h2>

<p>Webpack的官方文档有详细的说明，对于产品环境的构建应该运行webpack -p：<a href="https://webpack.js.org/guides/production-build/" title="production-build">production-build</a>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">webpack</span> <span class="o">--</span><span class="nx">optimize</span><span class="o">-</span><span class="nx">minimize</span> <span class="o">--</span><span class="nx">define</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span><span class="o">=</span><span class="s2">&quot;&#39;production&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时，Webpack会做几件事情，我们也需要根据这些事情做相关的配置：</p>

<p><strong>1.对JS代码进行压缩</strong></p>

<p>&ndash;optimize-minimize 标签会对JS代码用UglifyJsPlugin做压缩，并根据Webpack中配置的devtool配置SourceMap</p>

<p><strong>2.SourceMap</strong></p>

<p>即便在产品环境下，仍然建议使用SourceMap，方便产品环境的bug定位，但是对于开发环境和产品环境，我们需要使用不同力度的SourceMap，才能既方便开发也兼容产品环境性能。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// webpack config</span>
</span><span class='line'>  <span class="nx">devtool</span><span class="o">:</span> <span class="nx">isProd</span> <span class="o">?</span> <span class="s1">&#39;cheap-source-map&#39;</span> <span class="o">:</span> <span class="s1">&#39;cheap-module-inline-source-map&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>官方提供了7种Devtool，而且有更详细的关于devtool的配置，请详见 <a href="https://webpack.js.org/configuration/devtool/" title="devtool">devtool</a>。
<strong>3.Node环境变量production</strong></p>

<p>将redux的中间件和开发环境使用的devtool通过变量分离
&ndash;define process.env.NODE_ENV=&ldquo;&lsquo;production&rsquo;&rdquo; 标签会以下面的方式使用DefinePlugin：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpack&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="cm">/*...*/</span>
</span><span class='line'>  <span class="nx">plugins</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">DefinePlugin</span><span class="p">({</span>
</span><span class='line'>      <span class="s1">&#39;process.env.NODE_ENV&#39;</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="s1">&#39;production&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个时候，就可以在产品代码里面获取到此环境变量。这个时候我们要做的就是根据环境变量的不同，来进行不同的配置，比如：这样写log</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">!==</span> <span class="s1">&#39;production&#39;</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于产品环境就等价于：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时UglifyJS插件就会将它去除掉。</p>

<p>又比如：在react-redux开发中，我们一般都会配置开发插件DevTool，或者log中间件，但其实，在产品环境中，我们不需要，这个时候就需要根据环境变量来动态配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">applyMiddleware</span><span class="p">,</span> <span class="nx">compose</span><span class="p">,</span> <span class="nx">createStore</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;redux&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">thunkMiddleware</span> <span class="nx">from</span> <span class="s1">&#39;redux-thunk&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">createLogger</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;redux-logger&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">rootReducer</span> <span class="nx">from</span> <span class="s1">&#39;./reducers&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">promiseMiddleware</span> <span class="nx">from</span> <span class="s1">&#39;redux-promise-middleware&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">finalCreateStore</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">===</span> <span class="s1">&#39;production&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">finalCreateStore</span> <span class="o">=</span> <span class="nx">compose</span><span class="p">(</span>
</span><span class='line'>      <span class="nx">applyMiddleware</span><span class="p">(</span><span class="nx">promiseMiddleware</span><span class="p">(),</span> <span class="nx">thunkMiddleware</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)(</span><span class="nx">createStore</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">finalCreateStore</span> <span class="o">=</span> <span class="nx">compose</span><span class="p">(</span>
</span><span class='line'>      <span class="nx">applyMiddleware</span><span class="p">(</span><span class="nx">promiseMiddleware</span><span class="p">(),</span> <span class="nx">thunkMiddleware</span><span class="p">,</span> <span class="nx">createLogger</span><span class="p">()),</span>
</span><span class='line'>      <span class="nb">window</span><span class="p">.</span><span class="nx">devToolsExtension</span> <span class="o">?</span> <span class="nb">window</span><span class="p">.</span><span class="nx">devToolsExtension</span><span class="p">()</span> <span class="o">:</span> <span class="nx">f</span> <span class="o">=&gt;</span> <span class="nx">f</span>
</span><span class='line'>    <span class="p">)(</span><span class="nx">createStore</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">finalCreateStore</span><span class="p">(</span><span class="nx">rootReducer</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tree Shaking</h2>

<p><a href="https://webpack.js.org/guides/tree-shaking/" title="Webpack TreeShake">Webpack TreeShake</a></p>

<p>清理无用的JS代码，真实导入有用的模块。配置起来非常简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;presets&quot;</span><span class="o">:</span> <span class="p">[[</span><span class="s2">&quot;es2015&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;modules&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">}],</span> <span class="s2">&quot;react&quot;</span><span class="p">,</span> <span class="s2">&quot;stage-0&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://benweizhu.github.io/images/react-production/tree-shake.png" alt="tree-shake.png" /></p>

<h2>Babel对React代码的优化</h2>

<p>除了从产品环境模块架构上优化，Babel也在编译阶段优化React应用性能作出了巨大贡献。</p>

<p>1.transform-react-constant-elements插件</p>

<p><a href="https://babeljs.io/docs/plugins/transform-react-constant-elements/" title="transform-react-constant-elements">transform-react-constant-elements</a>，自从React0.14版本，我们可以将React元素以及他们的属性对象当做普通的值对象看待。这时候我们就可以重用那些输入是immutable的React元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">Hr</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">hr</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;hr&quot;</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">_ref</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">hr</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;hr&quot;</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">Hr</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">_ref</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>从而减少对React.createElement的调用。</p>

<p>2.transform-react-inline-elements插件</p>

<p><a href="https://babeljs.io/docs/plugins/transform-react-inline-elements/" title="transform-react-inline-elements">transform-react-inline-elements</a>，自从React0.14版本，可以将React元素内联为对象，Babel将React.createElement方法替换成babelHelpers.jsx来转换元素为对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">Baz</span> <span class="nx">foo</span><span class="o">=</span><span class="s2">&quot;bar&quot;</span> <span class="nx">key</span><span class="o">=</span><span class="s2">&quot;1&quot;</span><span class="o">&gt;&lt;</span><span class="err">/Baz&gt;;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">babelHelpers</span><span class="p">.</span><span class="nx">jsx</span><span class="p">(</span><span class="nx">Baz</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foo</span><span class="o">:</span> <span class="s2">&quot;bar&quot;</span>
</span><span class='line'><span class="p">},</span> <span class="s2">&quot;1&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>{type: Baz,props:{foo:&ldquo;bar&rdquo;},key:&ldquo;1&rdquo;}</p>

<p>除了以上两个官方插件，在开源世界还有许多其他Babel插件可以优化代码，而且非常实用，这里留给大家自己去探索： <a href="https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types" title="transform-react-remove-prop-types">transform-react-remove-prop-types</a>， <a href="https://github.com/thejameskyle/babel-react-optimize/tree/master/packages/babel-plugin-transform-react-pure-class-to-function" title="transform-react-pure-class-to-function">transform-react-pure-class-to-function</a>， <a href="https://github.com/thejameskyle/babel-react-optimize" title="babel-react-optimize">babel-react-optimize</a>（综合所有优化的插件，此处应该有掌声）</p>

<h2>代码本身的优化</h2>

<p>除了利用工具和构建，以及模块按需加载，来提高产品环境下的代码性能，最最基础的还是开发在平时写代码的需要注意的一些基础原则</p>

<p>1.只导入需要的包</p>

<p>比如：lodash，如果你只用到isEqual，那么就不要把整个lodash都引入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">isEqual</span> <span class="nx">from</span> <span class="s1">&#39;lodash/isEqual&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.使用ESLint</p>

<p>合理的使用ESLint，除了帮助团队指导代码风格，也可以告诉你如何正确的写React应，比如，当组件是纯presentational组件时，就应该使用PureComponent或者纯函数组件，这些eslint都会告诉你。</p>

<p>3.利用React官方的<a href="https://facebook.github.io/react/docs/perf.html" title="Perf工具">Perf工具</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Perf</span><span class="p">.</span><span class="nx">start</span><span class="p">()</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="nx">Perf</span><span class="p">.</span><span class="nx">stop</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>服务器端优化</h2>

<p>使用Gzip压缩倒不是React应用才有的性能优化策略，但还是要提一下，因为确实有用。</p>

<p>1.Nginx服务器端配置</p>

<p>我猜测大部分的情况下，都会用Nginx来部署静态资源，斗胆提供一个nginx的gzip配置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gzip</span> <span class="nx">on</span><span class="p">;</span> <span class="c1">//仅仅配置这一行是不会起作用的</span>
</span><span class='line'><span class="nx">gzip_types</span>  <span class="nx">text</span><span class="o">/</span><span class="nx">plain</span> <span class="nx">application</span><span class="o">/</span><span class="nx">javascript</span> <span class="nx">application</span><span class="o">/</span><span class="nx">x</span><span class="o">-</span><span class="nx">javascript</span> <span class="nx">text</span><span class="o">/</span><span class="nx">javascript</span> <span class="nx">text</span><span class="o">/</span><span class="nx">xml</span> <span class="nx">text</span><span class="o">/</span><span class="nx">css</span><span class="p">;</span>
</span><span class='line'><span class="nx">gzip_proxied</span>    <span class="nx">no</span><span class="o">-</span><span class="nx">cache</span> <span class="nx">no</span><span class="o">-</span><span class="nx">store</span> <span class="kr">private</span> <span class="nx">expired</span> <span class="nx">auth</span><span class="p">;</span>
</span><span class='line'><span class="nx">gzip_min_length</span> <span class="mi">1000</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.手动压缩</p>

<p>另外一种方式，就是我们自己手动压缩Gzip，这样可以减少Nginx编码带来的性能消耗，Webpack插件
<a href="https://github.com/webpack-contrib/compression-webpack-plugin" title="compression-webpack-plugin">compression-webpack-plugin</a>可以做到。</p>

<h2>还有什么别的提高性能的办法呢？</h2>

<p><strong>1.服务器端渲染如何</strong></p>

<p>有人会说，<strong>服务器端渲染如何？</strong> 这个要看情况。服务器端渲染一般主要用来处理首屏渲染性能（注意是首次加载）和搜索引擎爬虫问题。如果你的JS文件特别大，那么服务器端渲染能够，让用户在加载完HTML和CSS之后立刻看到页面。如果不是首次加载，那么其实JS是可以缓存在客户端的，所以即便不用服务器端渲染，之后也不会很慢。</p>

<p>相对的缺点是：配置起来比较麻烦，但如果是一劳永逸的事情，还是值得一做的。</p>

<p>更多关于<a href="http://andrewhfarmer.com/server-side-render/" title="是否应该进行服务器端渲染">是否应该进行服务器端渲染</a>以及<a href="http://redux.js.org/docs/recipes/ServerRendering.html" title="如何进行服务器端渲染">如何进行服务器端渲染</a>？请查看相关文章。</p>

<p><strong>2.ServiceWork</strong></p>

<p>渐进式 Web 应用程序思想（PWA）最近可火了，2017年<a href="https://www.thoughtworks.com/radar" title="ThoughtWorks技术雷达">ThoughtWorks技术雷达</a>将<a href="https://www.thoughtworks.com/radar/techniques/progressive-web-applications" title="“Progressive Web Applications”">“Progressive Web Applications”</a>放在了试验阶段。</p>

<p>简单介绍什么是service worker:</p>

<blockquote><p>在2014年，W3C公布了service worker的草案，service worker提供了很多新的能力，使得web app拥有与native app相同的离线体验、消息推送体验。
service worker是一段脚本，与web worker一样，也是在后台运行。
作为一个独立的线程，运行环境与普通脚本不同，所以不能直接参与web交互行为。native app可以做到离线使用、消息推送、后台自动更新，service worker的出现是正是为了使得web app也可以具有类似的能力。</p></blockquote>

<p>Github： <a href="https://github.com/GoogleChrome/sw-toolbox" title="Google sw-toolbox">Google sw-toolbox</a>, <a href="https://github.com/goldhand/sw-precache-webpack-plugin" title="sw-precache-webpack-plugin">sw-precache-webpack-plugin</a>和<a href="https://github.com/NekR/offline-plugin" title="offline-plugin">offline-plugin</a></p>

<p><strong>3.Preload</strong></p>

<p>Preload 作为一个新的web标准，旨在提高性能和为web开发人员提供更细粒度的加载控制。Preload使开发者能够自定义资源的加载逻辑，且无需忍受基于脚本的资源加载器带来的性能损失。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">“preload”</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>作为新的标准，浏览器兼容性是你有必要考虑的一个方面：</p>

<p><img src="http://benweizhu.github.io/images/react-production/preload.png!web" alt="preload" /></p>

<p>github: <a href="https://github.com/GoogleChrome/preload-webpack-plugin" title="preload-webpack-plugin">preload-webpack-plugin</a></p>

<h2>最后</h2>

<p>文章内容有点长，但我相信这些都是干货是值得一读的，前端产品环境性能优化确实是一个说不完的话题，前端技术更新迭代也没有多少其他计算机技术能够匹敌的，这也对前端开发工程师（全栈开发工程师）的技术敏感度和追求新技术的态度有很高的要求。</p>

<p>作者：Benwei，ThoughtWorks高级咨询师，全栈开发工程师，《实战Gradle》译者</p>

<p>参考文献：  <br/>
1.<a href="https://hackernoon.com/optimising-your-application-bundle-size-with-webpack-e85b00bab579">https://hackernoon.com/optimising-your-application-bundle-size-with-webpack-e85b00bab579</a>  <br/>
2.<a href="https://brotzky.co/blog/code-splitting-react-router-webpack-2/">https://brotzky.co/blog/code-splitting-react-router-webpack-2/</a>  <br/>
3.<a href="http://www.jianshu.com/p/f4054b2dcc6e">http://www.jianshu.com/p/f4054b2dcc6e</a>  <br/>
4.<a href="http://2ality.com/2015/12/webpack-tree-shaking.html">http://2ality.com/2015/12/webpack-tree-shaking.html</a>  <br/>
5.<a href="https://hackernoon.com/how-i-built-a-super-fast-uber-clone-for-mobile-web-863680d2100f">https://hackernoon.com/how-i-built-a-super-fast-uber-clone-for-mobile-web-863680d2100f</a>  <br/>
6.<a href="http://andrewhfarmer.com/server-side-render/">http://andrewhfarmer.com/server-side-render/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术雷达之Web VR浅尝]]></title>
    <link href="http://benweizhu.github.io/blog/2017/04/26/web-vr/"/>
    <updated>2017-04-26T21:25:15+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/04/26/web-vr</id>
    <content type="html"><![CDATA[<h3>VR的风口</h3>

<p>VR（Virtual Reality）即虚拟现实，这个作为由美国VPL公司创始人拉尼尔在20世纪80年代初提出的一个概念，在16，17年成为了除AI（在此感谢“阿法狗”）之外，最为接近风口的技术行业。</p>

<p>雷总说过“站在台风口，猪都能飞上天”，何况这只猪还有点本事。</p>

<p>回想一下，在这个风口上，哪些人已经参与进去了？VR设备厂家（VR眼镜），视频拍摄设备厂家（360度全景视频拍摄相机），视频制作工作室，游戏工作室，还有CCTV5体育台（忍不住笑出声），最后还有我们普罗大众（整个生态链上的消费者）。</p>

<h3>Web VR</h3>

<p>有时候，我还真的很羡慕那些做游戏开发的程序员，一边拿着高工资，一边实现着小时候的梦想，偶尔通宵紧急修bug也情有可原，看看他们现在又多了个玩具。</p>

<p>光羡慕可不行，我要充分发挥自己的能动性为最具程序员群众基础的Web程序员谋福利。</p>

<p>我们除了作为一个普通的消费者参与到VR的风口中，当真没有别的办法了？<a href="https://www.thoughtworks.com/radar" title="ThoughtWorks技术雷达">ThoughtWorks技术雷达</a>第16卷（2017年）告诉你，答案就是Web VR。</p>

<p>下面快速的引用一下本期技术雷达对Web VR的描述：</p>

<blockquote><p>Web VR是一组可让你通过浏览器访问VR设备的实验性JavaScript API。它已经获得了技术社区的支持，并有正式版本和每日构建的版本可用。如果你想在浏览器中构造VR 体验，那么WebVR将会是一个不错的开始。此项技术以及相关补充工具，例如 Three.js，A-Frame，ReactVR，Argon.js和Awe.js都能够为浏览器带来AR体验。除了互联网委员会标准以外，该领域中的各种工具也将有助于促进AR和VR更广泛的应用。</p></blockquote>

<p>WebVR更主要的是一种开放标准，目的是能够从浏览器给用户带来VR体验。 &ndash;webvr.info</p>

<p>今天最主要的目的就是和大家一起快速的浏览一下三个github上比较火的开源Web VR技术。</p>

<h4>Three.js</h4>

<p>github: <a href="https://github.com/mrdoob/three.js/">https://github.com/mrdoob/three.js/</a></p>

<p>光看这个名字，就能深深的感受它，和3d，和VR，和Web有着非比寻常的相关系。Three.js其实不是一个很新的东西，2010年的4月就已经发布了它的第一个开源版本R1（至今有7年了）。它是一个JavaScript 3D库，提供Canvas，SVG，CSS3D的渲染方式，但更多的是封装了底层的WebGL图形接口，以提供简化、高效的三维图形程序开发。</p>

<p><a href="https://threejs.org/examples/webvr_rollercoaster.html" title="一个Three.js VR例子">一个Three.js VR例子</a>（可惜需要兼容性的浏览器，Android的Chrome，HTC Vive，Gear VR等）</p>

<h4>A-Frame</h4>

<p>github: <a href="https://github.com/aframevr/aframe/">https://github.com/aframevr/aframe/</a></p>

<p>A-Frame相对Three.js要更新一些，第一个开源版本发布于2015年12月。它是由Mozilla旗下的VR研究团队MozVR推出的开源框架，A-Frame旨在帮助开发者更轻松的开发在浏览器中运行的高性能响应式的VR体验。</p>

<p>和Three.js不同，A-Frame是纯粹的VR Web框架，而且它与现代Web开发的趋势结合更加紧密，使用Web开发者熟悉的HTML标签来创建WebVR场景，提供自定义的语义化标签，降低学习成本。你只需要仅仅几行代码就可以创建一个VR场景，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://aframe.io/releases/0.5.0/aframe.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a-scene&gt;</span>
</span><span class='line'>      <span class="nt">&lt;a-box</span> <span class="na">color=</span><span class="s">&quot;#6173F4&quot;</span> <span class="na">opacity=</span><span class="s">&quot;0.8&quot;</span> <span class="na">depth=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;&lt;/a-box&gt;</span>
</span><span class='line'>      <span class="nt">&lt;a-sphere</span> <span class="na">radius=</span><span class="s">&quot;2&quot;</span> <span class="na">src=</span><span class="s">&quot;texture.png&quot;</span> <span class="na">position=</span><span class="s">&quot;1 1 0&quot;</span><span class="nt">&gt;&lt;/a-sphere&gt;</span>
</span><span class='line'>      <span class="nt">&lt;a-sky</span> <span class="na">color=</span><span class="s">&quot;#ECECEC&quot;</span><span class="nt">&gt;&lt;/a-sky&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/a-scene&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为A-Frame基于DOM，他可以和现有其他现代Web框架结合。比如：<a href="https://github.com/aframevr/aframe-react" title="A-Frame-React">A-Frame-React</a>。
<img src="http://benweizhu.github.io/images/vrweb/a-frame-works-with-everything.jpg" alt="" /></p>

<p><a href="https://aframe.io/a-blast/" title="A-Blast">A-Blast</a> - Mozilla基于A-Frame研发的VR游戏（请在Wifi环境下打开）。</p>

<p><strong>超强的场景Inspector工具 - A-Frame Inspector</strong>   <br/>
A-Frame提供一个场景查看工具A-Frame Inspector，可以让你改变场景，操作组件。
<img src="http://benweizhu.github.io/images/vrweb/a-frame-inspector.gif" alt="Inspector工具" /></p>

<h4>ReactVR</h4>

<p>Mozilla都建立了自己的专门的VR团队来专注于A-Frame的研发，你想其他的巨头们就不会蠢蠢欲动，Facebook就是其中一个。</p>

<p>github: <a href="https://github.com/facebook/react-vr">https://github.com/facebook/react-vr</a></p>

<p>一个好消息是React于2017年04月19日正式推出ReactVR（即正式开源），即去年第一次在Twitter上公布React VR项目已过去10个月了。</p>

<p>React的优势在于它已经在广大人民群众中打下坚实的基础，并且拥有了一群忠实的粉丝。从技术角度上谈，React VR使用了一个简化版的OVRUI库，其内部使用的是我们上面已经介绍的Three.js（即通过WebGL来渲染场景）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">AppRegistry</span><span class="p">,</span> <span class="nx">Pano</span><span class="p">,</span> <span class="nx">Text</span><span class="p">,</span> <span class="nx">View</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-vr&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">WelcomeToVR</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Displays &quot;hello&quot; text on top of a loaded 360 panorama image.</span>
</span><span class='line'>    <span class="c1">// Text is 0.8 meters in size and is centered three meters in front of you.</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">View</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Pano</span> <span class="nx">source</span><span class="o">=</span><span class="p">{</span><span class="nx">asset</span><span class="p">(</span><span class="s1">&#39;chess-world.jpg&#39;</span><span class="p">)}</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Text</span>
</span><span class='line'>          <span class="nx">style</span><span class="o">=</span><span class="p">{{</span>
</span><span class='line'>            <span class="nx">fontSize</span><span class="o">:</span> <span class="mf">0.8</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">layoutOrigin</span><span class="o">:</span> <span class="p">[</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">],</span>
</span><span class='line'>            <span class="nx">transform</span><span class="o">:</span> <span class="p">[{</span><span class="nx">translate</span><span class="o">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">]}],</span>
</span><span class='line'>          <span class="p">}}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">hello</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">AppRegistry</span><span class="p">.</span><span class="nx">registerComponent</span><span class="p">(</span><span class="s1">&#39;WelcomeToVR&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">WelcomeToVR</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://benweizhu.github.io/images/vrweb/hellovr.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Debug]]></title>
    <link href="http://benweizhu.github.io/blog/2017/04/26/web-debug/"/>
    <updated>2017-04-26T21:18:54+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/04/26/web-debug</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端不止系列 - 时间都去哪了？]]></title>
    <link href="http://benweizhu.github.io/blog/2017/04/15/website-effecient/"/>
    <updated>2017-04-15T18:58:04+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/04/15/website-effecient</id>
    <content type="html"><![CDATA[<p>只有10%~20%的最终用户响应时间花在了下载HTML文档上，其余的80%~90%时间花在了下载页面中的所有组件上。   - 性能黄金法则，Steve Souders</p>

<p><img src="http://benweizhu.github.io/images/performance/golden-top10.png" width="400" title="前十名网站" alt="Alt text" /></p>

<p>性能黄金法则由《高性能网站建站指南》的作者Steve Souders在2007年提出。在2012年，他重新发表了一篇博客<a href="https://www.stevesouders.com/blog/2012/02/10/the-performance-golden-rule/" title="《The Performance Golden Rule》">《The Performance Golden Rule》</a>，分析并统计排名前10，10个在10000排名左右网站的加载时间，并计算了在<a href="http://httparchive.org/index.php" title="HTTP Archive">HTTP Archive</a>上被抓取到的50000个网站的前后端耗时占比，而最终验证了自2007年提出的这个理念的准确性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端不止系列 - 请告诉我，你要什么样的图标]]></title>
    <link href="http://benweizhu.github.io/blog/2017/04/03/svg-and-icon-font/"/>
    <updated>2017-04-03T09:47:12+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/04/03/svg-and-icon-font</id>
    <content type="html"><![CDATA[<h4>一个图标的生命周期（工作流程）</h4>

<p><img src="http://benweizhu.github.io/images/svg/icomoon-svg.png" width="265" title="图标的生命周期" alt="Alt text" />   <br/>
图标库(选择阶段) -> 图标使用（开发阶段）</p>

<p><img src="http://benweizhu.github.io/images/svg/ai-ps-svg.png" width="400" title="图标的生命周期" alt="Alt text" />   <br/>
图标设计（设计阶段） -> 图标导出（沟通阶段） -> 图标使用（开发阶段）</p>

<p>第一种方式是一般是小公司或者独立开发者的工作流程。而对于大型组织或公司，因为拥有更完善的团队和资源，一般是第二种方式，能够获得更多自主权和建立企业VI（Visual Identity，企业视觉识别）的能力。</p>

<p>但无论是哪种方式，都包括两个角色：设计师和Web开发，只是第一种工作方式中，设计师是不可见的。</p>

<h4>图标的设计和使用</h4>

<p>设计阶段通常是由不了解Web开发的设计师们来完成的，他们会根据产品的需要，绘画出满足需求的图标。</p>

<p><img src="http://benweizhu.github.io/images/svg/ThoughtWorksContactUSIcon.jpg" width="400" title="ThoughtWorksContactUSIcon" alt="Alt text" />  <br/>
ThoughtWorks官网Contact with us图标</p>

<p>然后交给Web开发人员使用，为什么要先介绍图标的使用，而一笔跳过导出过程呢？原因很简单，因为我们需要先知道服务的对象是谁，才知道如何正确的为它服务。</p>

<h5>常见的三种使用图标的方式</h5>

<p>1.使用图片</p>

<p>直接将设计师画好的图标，以PNG格式的图片一个个分离导出，这是最直观的图标打包方式。</p>

<p><img src="http://benweizhu.github.io/images/svg/taobao.png" width="300" title="iconfont cn taobao icon" alt="Alt text" /> <br/>
1688DPL中台图标库</p>

<p>它的优点是：（1）能够使用彩色的图标（2）能够支持大部分浏览器；缺点是：（1）图标大小是固定的（不能根据场景自由缩放）（2）Retina屏幕需要两倍图。</p>

<p>开发人员拿到这样的图标，通常会需要先合成为一张图片，以方便制作<a href="https://css-tricks.com/css-sprites/" title="雪碧图">雪碧图</a>，这个过程可以由开发人员自己完成，也可以由设计师（设计师可以根据源文件中心导出一张包含所有图标的PNG文件）。</p>

<p>制作雪碧图的工具有很多，我比较常用的在线雪碧图工具是：<a href="http://www.spritecow.com/" title="Sprite Cow">Sprite Cow</a>，或者NodeJS平台下的构建工具插件，如：<a href="https://github.com/mixtur/webpack-spritesmith" title="webpack-spritesmith">webpack-spritesmith</a>。</p>

<p>2.直接使用svg</p>

<p>使用SVG（可缩放矢量图形），W3C标准，<strong>最看好的Web端图形解决方案</strong>。它能提供如裁剪路径、Alpha通道、滤镜效果等复杂渲染能力，具备传统图片没有的矢量功能，还可以被记事本等阅读器、搜索引擎访问。</p>

<p>设计师可以轻松的在设计绘图软件（AI，PS）的帮助下导出SVG格式的图标/图片。</p>

<p>但目前，国内svg还并没有被非常广泛的使用，原因是它的兼容性，不能够很好的兼容旧的IE版本和一些Android原生浏览器。</p>

<p><img src="http://benweizhu.github.io/images/svg/svg-support.png" width="400" title="svg support" alt="Alt text" />  <br/>
Can I use svg?</p>

<p><img src="http://benweizhu.github.io/images/svg/baidu.jpg" width="400" title="baidu tong ji" alt="Alt text" />    <br/>
百度2017年前三个月的浏览器使用统计，目前国内还有超过20%的用户仍在使用IE8，9甚至是IE7。</p>

<p>3.IconFont</p>

<p>IconFont是目前最为流行的图标解决方案，顾名思义，它就是字体文件，你可以用任何一个字体编辑工具打开它，如果你打开某一个查看，你会发现它就是一些路径，这些路径可以用AI，PS，Sketch等软件来绘制。</p>

<p><img src="http://benweizhu.github.io/images/svg/font-awesome.png" width="300" title="font awesome" alt="Alt text" /></p>

<p>IconFont的优点在于能够用CSS控制样式，无限缩放而不失真，支持IE7+，兼顾屏幕阅读器，不过缺点是不能支持彩色（拥有多种颜色的图标）图标。获得IconFont的方式也很简单，设计师将图标通过AI/PS转成SVG文件，然后由开发人员通过工具（在线或者本地）转换为IconFont，比如：国外的<a href="https://icomoon.io/" title="icomoon.io">icomoon.io</a>，国内的<a href="http://iconfont.cn/" title="iconfont.cn">iconfont.cn</a>，开源构建工具插件有<a href="https://github.com/nfroidure/gulp-iconfont" title="gulp-iconfont">gulp-iconfont</a>等等。</p>

<h4>产生适合Web开发的图标</h4>

<p>“产生适合Web开发的图标”是我们今天要关注的重点。</p>

<p>1.使用图片的方式</p>

<p>如果开发人员直接使用图片，则相对简单，设计师只需要针对普通屏幕和Retina屏幕准备两套图（单倍图和两倍图）。</p>

<p>以国内某著名的中文小说阅读网站为例，会针对不同的设备使用不同倍数的logo图片，以保证在如Retina屏幕下的清晰度。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.logo-wrap</span> <span class="nc">.logo</span> <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">219px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">52px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="sx">url(/qd/images/logo.0.2.png)</span> <span class="k">no-repeat</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="o">(</span><span class="nt">min--moz-device-pixel-ratio</span><span class="nd">:1</span><span class="nc">.3</span><span class="o">),(</span><span class="nt">-o-min-device-pixel-ratio</span><span class="o">:</span> <span class="nt">2</span><span class="nc">.6</span> <span class="o">/</span> <span class="nt">2</span><span class="o">),(</span><span class="nt">-webkit-min-device-pixel-ratio</span><span class="nd">:1</span><span class="nc">.3</span><span class="o">),(</span><span class="nt">min-device-pixel-ratio</span><span class="nd">:1</span><span class="nc">.3</span><span class="o">),(</span><span class="nt">min-resolution</span><span class="nd">:1</span><span class="nc">.3dppx</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nc">.logo-wrap</span> <span class="nc">.logo</span> <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">background</span><span class="o">:</span> <span class="sx">url(/qd/images/logo3x.0.2.png)</span> <span class="k">no-repeat</span><span class="p">;</span>
</span><span class='line'>      <span class="k">background-repeat</span><span class="o">:</span> <span class="k">no-repeat</span><span class="p">;</span>
</span><span class='line'>      <span class="k">background</span><span class="o">-</span><span class="k">size</span><span class="o">:</span> <span class="m">217px</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.使用SVG</p>

<p>关于转换成SVG，这里就要引荐一下Sara Soueidan在Generate London 2015 Conference上的演讲<a href="https://www.youtube.com/watch?v=q4QI9iOeyPo" title="《Sara Soueidan: SVG for Web Designers (and Developers)》">《Sara Soueidan: SVG for Web Designers (and Developers)》</a>（YouTube视频需要翻墙），如果不方便，Sara Soueidan有一篇博客<a href="https://sarasoueidan.com/blog/svg-tips-for-designers/" title="《Tips for Creating and Exporting Better SVGs for the Web》">《Tips for Creating and Exporting Better SVGs for the Web》</a>更详细的讲解关于SVG导出的内容，当然，还有一篇国内的翻译文章<a href="http://www.w3cplus.com/svg/svg-tips-for-designers.html" title="《创建和导出SVG的技巧》">《创建和导出SVG的技巧》</a>，最后在推荐一篇Adobe工程师michael chaize写的关于AI导出SVG的文章<a href="http://creativedroplets.com/export-svg-for-the-web-with-illustrator-cc/" title="《Export SVG for the web with Illustrator CC》">《Export SVG for the web with Illustrator CC》</a>。</p>

<p>不过，我觉得看视频更直观，顺便领略一下这位优秀的 <strong>阿拉伯女性前端开发工程师（兼自由作家和演讲人）</strong> 的风采。</p>

<p>博客和视频中谈到了多个点导出SVG需要注意的地方，篇幅限制，这里简单描述三个tip：</p>

<p><strong>（1）选择适合绘画的画板</strong>。</p>

<p>你有在网页上嵌入过SVG吗，给它指定一个高度和宽度，然后发现它其实比你指定的尺寸要小？开发人员常常会遇到这样的问题。</p>

<p>大多数情况下，这是因为SVG视窗中有一定大小的白色空白的空间。视窗是按照你在样式表中指定的尺寸显示的，但是它里面有额外的空白——在图形周围——使得你的图片看起来好像“缩水”了，因为这块空白是占空间的，在视窗里面。为了避免这种情况，你需要确保你的画板是刚刚好放下里面的图像的，不要大太多。</p>

<p>画板的尺寸就是导出的SVG的视窗的尺寸，所有画板上的空白都会最终变成视窗中的白色空白。</p>

<p><img src="http://benweizhu.github.io/images/svg/fit-artboard.png" width="400" title="fit artboard" alt="Alt text" /></p>

<p><em>对于没有AI工具的开发，可以在下面的SVGO优化选项中选择“Prefer viewBox to width/height”。</em></p>

<p><strong>（2）选择合适的导出选项</strong></p>

<p><img src="http://benweizhu.github.io/images/svg/export-options.png" width="400" title="保存" alt="Alt text" />   <br/>
上面的图片中展示的选项是推荐的生成适合Web使用的SVG的。如果你不想使用Web字体，可以选择把文本转换成轮廓。</p>

<p><img src="http://benweizhu.github.io/images/svg/output-fewer.png" width="400" title="output-fewer" alt="Alt text" /><br/>
如果SVG中包含大量的文字，这个选项output fewer tspan elements可以很大程度降低svg的大小。</p>

<p><strong>（3）优化SVG</strong></p>

<p>通常是建议在把SVG从图形编辑器中导出后，再用单独的优化工具来进行优化。比如：删除无用Comments和Metadata，简化代码，简化单个路径等。推荐的第三方工具：NodeJS工具<a href="https://jakearchibald.github.io/svgomg/" title="svgomg">svgomg</a>，AI插件<a href="https://github.com/davidderaedt/SVG-NOW" title="SVG-NOW">SVG-NOW</a>，Sketch插件<a href="https://github.com/BohemianCoding/svgo-compressor" title="Svgo-compressor">Svgo-compressor</a>等，请参考Sara Soueidan的文章<a href="https://sarasoueidan.com/blog/svgo-tools/" title="《Useful SVGO[ptimization] Tools》">《Useful SVGO[ptimization] Tools》</a>。</p>

<p><img src="http://benweizhu.github.io/images/svg/svgomg.png" width="400" title="优化svg" alt="Alt text" /></p>

<p>3.IconFont</p>

<p>前面提到IconFont一般是由SVG通过工具转换而来，而如果开发最终需要使用IconFont展示图标，则对于导出的SVG有一些特殊要求。我在本文的前面一小节，已经介绍了几款IconFont的转换工具，每一款工具其实都有详细的文档说明SVG绘制的规则，尽管不尽相同，但有一些基本原则是一致的：</p>

<p>（1）将文字转换为路径  <br/>
（2）不可以使用图片（字体只是路径） <br/>
（3）修剪画板（trimming to art boundaries）（前面已经介绍过） <br/>
（4）将描边转化为闭合图形 <br/>
（5）简化无用的节点  <br/>
等等</p>

<p>更多关于IconFont的绘画规则，请参考：<a href="http://iconfont.cn/plus/help/detail?helptype=draw" title="Iconfont.cn文档">Iconfont.cn文档</a>，<a href="https://icomoon.io/#docs/importing" title="Icomoon文档">Icomoon文档</a>，<a href="https://github.com/nfroidure/gulp-iconfont#preparing-svgs" title="gulp-iconfont文档">gulp-iconfont文档</a>，<a href="https://github.com/fontello/fontello/wiki/How-to-use-custom-images" title="fontello文档">fontello文档</a>。</p>

<h4>尽早的沟通</h4>

<p>无论是开发还是设计师，最重要的还是沟通，借用Sara Soueidan的一句“设计师和开发者应该成为好朋友”。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端不止系列 - Retina屏幕下两倍图]]></title>
    <link href="http://benweizhu.github.io/blog/2017/03/25/css-retina-image/"/>
    <updated>2017-03-25T16:40:09+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/03/25/css-retina-image</id>
    <content type="html"><![CDATA[<h3>所见不一定即所得</h3>

<blockquote><p>眼睛是心灵的窗户，也是蒙蔽你的一种途径。</p></blockquote>

<p>假设，我给你一张图片，你觉得肉眼可以观察到全部的细节吗？</p>

<h3>屏幕上一张清晰的图片</h3>

<p>肉眼在屏幕上看到图片的清晰度由三个因素决定，一是图片像素本身是否精细，二是屏幕分辨率，三是屏幕大小。</p>

<p>我们来逐步分析它们之间的关系：</p>

<h4>屏幕分辨率</h4>

<p>屏幕分辨率也就是设备分辨率，设备像素，它是物理的像素，比如，新的iPhone7，屏幕分辨率是1334 x 750像素分辨率，326 ppi。</p>

<p><img src="http://benweizhu.github.io/images/iphone7-screen.png" width="400" title="iPhone7分辨率" alt="Alt text" /></p>

<h4>图像大小</h4>

<p>如果你学过《数字图像处理》这门课，那你对下面的解释就是非常熟悉了。</p>

<p>位图是由像素（Pixel）组成的，像素是位图最小的信息单元，存储在图像栅格中。每个像素都具有特定的位置和颜色值。按从左到右、从上到下的顺序来记录图像中每一个像素的信息，如：像素在屏幕上的位置、像素的颜色等。位图图像质量是由单位长度内像素的多少来决定的。单位长度内像素越多，分辨率越高，图像的效果越好。</p>

<p><img src="http://benweizhu.github.io/images/tw-logo.png" width="200" title="ThoughtWorks Logo" alt="Alt text" /></p>

<p>假设，以上这个logo的图像大小是1334 x 750像素和iPhone7屏幕分辨率一样，那么,一位图像素对应的就是一个设备像素，这就是会是一个完全保真的显示。因为一个位置像素不能进一步分裂，我想这一点应该大家非常容易理解，也就是一个萝卜一个坑。</p>

<h4>屏幕分辨率和屏幕尺寸</h4>

<p><img src="http://benweizhu.github.io/images/resolution.png" width="400" title="Windows分辨率" alt="Alt text" /></p>

<p>相信大部分人对上面这个设置肯定特别熟悉，有些人可能对XP，甚至98系统的样式更熟悉（一不小心暴露了年龄），在Windows系统下，提高屏幕分辨率一般都需要提高屏幕尺寸。</p>

<p>因为在固定屏幕的情况下，提高屏幕分辨率（如上图），图像和文字显示目标会相应缩小，原因是系统并不会自动根据屏幕尺寸和分辨率关系相应的调整文字和图标的大小，这是Windows系统自身的行为。</p>

<p>我相信，如果家里有年长的人使用电脑，肯定屏幕分辨率调的很低，因为这样文字和图标才会比较大，我家06年买的台式机就是这样。</p>

<p>也因此，我们很容易有一个错觉，那就是屏幕越大，分辨率就能越大（在单位面积内像素数量固定的情况下，尺寸越大，单个屏幕拥有的像素就越多，分辨率自然就越大）。</p>

<p><strong>直到，苹果Retina屏幕的出现，原来小屏幕也可以拥有大分辨率。</strong></p>

<h4>PPI的概念</h4>

<p>PPI，像素密度，即每英寸所拥有的像素数目（比如：上面iPhone 7的PPI是326），PPI数值越高，代表显示屏能够以越高的密度显示图像，画面的细节就会越丰富。</p>

<p>以Retina屏幕为例，它并不是像普通显示器那样通过增大尺寸来增加分辨率，而是靠提升屏幕单位面积内的像素数量，即像素密度来提升分辨率，这样就有了高像素密度屏幕。</p>

<p>根据上面的分析，分辨率提升了，那么图标和文字尺寸就会变小，但是Mac的操作系统不同，它自动采取相应的模式（如Mac下的HiDPI）进行适配，将缩小后的字体（苹果一直采用矢量字体）和图标重新放大，这样苹果用了更多的像素数来显示同样的内容，所以显示尺寸仍然不变。</p>

<p>苹果将“高像素密度屏幕”的概念营销出一个专业的术语“Retina”，将其称为双密度显示，声称人类的肉眼将无法区分单个像素。</p>

<p>当一个显示屏像素密度超过300ppi时，人眼就无法区分出单独的像素。这也是讲：显示设备清晰度已达到人视网膜可分辨像素的极限。因此，行动电话显示器的像素密度达到或高于300ppi就不会再出现颗粒感，而手持平板类电器显示器的像素密度达到或高于260ppi就不会再出现颗粒感，苹果电脑Mac的Retina显示器像素密度只要超过200ppi就无法区分出单独的像素。</p>

<p><img src="http://benweizhu.github.io/images/retina-display.jpg" width="500" title="retina-display" alt="Alt text" /></p>

<p>好，说了这么多，都是谈屏幕的问题，貌似和前端开发没有什么关系，我又不是要买新手机（呵呵），那么现在，我们现在来谈谈前端的问题。</p>

<h4>Web中的像素（CSS像素）</h4>

<p>CSS像素是一个抽象概念，设备无关像素，简称-“DIPS”，device-independent像素，主要使用在浏览器上，用来精确的度量（确定）Web页面上的内容。</p>

<p>在标准情况下一个CSS像素对应一个设备像素。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.box</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">12px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码，将会在显示屏设备上绘制一个200x300像素的盒子，在标准屏幕下，它占据的就是200x300设备像素。但是在Retina屏幕下，相同的div却使用了400x600设备像素，保持相同的物理尺寸显示，导致每个像素点实际上有4倍的普通像素点。</p>

<p><img src="http://benweizhu.github.io/images/retina-web.jpg" width="500" title="retina-web" alt="Alt text" /></p>

<p>对于图片来说也是如此：</p>

<p><img src="http://benweizhu.github.io/images/retina-web-bitmap.jpg" width="500" title="retina-web bitmap" alt="Alt text" /></p>

<p>这个时候，屏幕会怎么处理呢？其实，有点类似图像软件的放大图片功能，采用自有的算法（图像处理算法）计算放大方式。只不过，这里是苹果Retina屏幕的计算方法，一个CSS像素点实际分成了四个，造成颜色肯定会存在偏差（非全保真的显示），于是，我们看上去就变得模糊了（特别是图片，非常的明显）。</p>

<p>开发当中遇到这样的事情，我们应该怎么处理呢？这时，我们需要引出devicePixelRatio的概念。</p>

<h5>devicePixelRatio设备像素比</h5>

<p>window.devicePixelRatio是设备上物理像素和设备独立像素(device-independent pixels (dips))的比例。</p>

<p>公式表示就是：window.devicePixelRatio = 物理像素 / dips</p>

<ul>
<li>普通密度桌面显示屏的devicePixelRatio=1</li>
<li>高密度桌面显示屏(Mac Retina)的devicePixelRatio=2</li>
<li>主流手机显示屏的devicePixelRatio=2或3</li>
</ul>


<p>举例说明，一张100x100的图片，通过CSS设置它{ width:100px; height:100px }。在普通密度桌面显示屏的电脑上打开，没有什么问题，但假设在手机/或者Retina屏幕的Mac，按照逻辑分辨率来渲染，他们的devicePixelRatio=2，那么就相当于拿4个物理像素来描绘1个电子像素。这等于拿一个2倍的放大镜去看图片，图片可能因此变得模糊。</p>

<p><img src="http://benweizhu.github.io/images/devicePixelRatio.png" title="devicePixelRatio" alt="Alt text" /></p>

<h3>代码如何解决呢？</h3>

<p>原理我们明白了，那么从代码层面，我们应该如何实现呢？</p>

<p>一个常见的做法是把图片换成200x200的，CSS宽高不变，仍然是{ width:100px; height:100px }，这样，CSS宽高换算成物理像素是200x200，图片也是200x200，就不会变糊了。可以采用媒体查询和JS操作的方式</p>

<h4>CSS Media Queries</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#element</span> <span class="p">{</span> <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(&#39;hires.png&#39;)</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-device-pixel-ratio</span><span class="o">:</span> <span class="nt">2</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nf">#element</span> <span class="p">{</span> <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(&#39;hires@2x.png&#39;)</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-device-pixel-ratio</span><span class="o">:</span> <span class="nt">3</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nf">#element</span> <span class="p">{</span> <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(&#39;hires@3x.png&#39;)</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>JS查询</h4>

<p><strong>retinajs库</strong></p>

<p><a href="http://imulus.github.io/retinajs/">http://imulus.github.io/retinajs/</a></p>

<p><img src="http://benweizhu.github.io/images/caniuserdevicePixelRatio.png" title="devicePixelRatio" alt="Alt text" /></p>

<h3>是不是适配Retina屏幕所有的图片都需要切换呢？</h3>

<p>不是，一般情况下，不需要针对网站上的所有图片都提供两个版本（非Retina屏幕和Retina屏幕），大部分图片缩放并不会太多的影响用户的体验。</p>

<p>常常需要被处理的图片有：网站的logo、彩色图片图标，因为他们的图像大小都偏小，在Retina上物理像素放两倍显示就会出现模糊情况，这个时候，你就需要通过媒体查询或者JS操作来替换图片。</p>

<p><em>最后：眼睛是心灵的窗户，也是蒙蔽你的一种途径，带上知识的眼镜，将世界看个清楚</em></p>

<p>参考资料：  <br/>
1. <a href="http://www.w3cplus.com/css/towards-retina-web.html">http://www.w3cplus.com/css/towards-retina-web.html</a> <br/>
2. <a href="http://www.jianshu.com/p/bb76c606f0b4">http://www.jianshu.com/p/bb76c606f0b4</a>  <br/>
3. <a href="https://developer.mozilla.org/zh-CN/docs/Mobile/Viewport_meta_tag">https://developer.mozilla.org/zh-CN/docs/Mobile/Viewport_meta_tag</a> <br/>
4. <a href="http://caniuse.com/#search=devicePixelRatio">http://caniuse.com/#search=devicePixelRatio</a>  <br/>
5. <a href="https://www.web-tinker.com/article/20590.html">https://www.web-tinker.com/article/20590.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步做React(二) - CSS Modules]]></title>
    <link href="http://benweizhu.github.io/blog/2017/02/01/react-step-by-step-2/"/>
    <updated>2017-02-01T22:44:09+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/02/01/react-step-by-step-2</id>
    <content type="html"><![CDATA[<p>基于上次的内容 <a href="http://benweizhu.github.io/blog/2017/01/17/react-step-by-step-1/">《一步一步做React(一) - Hello React》</a>，我们继续搭建一个React项目的工程实践 - CSS Modules。</p>

<h3>CSS Modules概念</h3>

<p>Github文档 - <a href="https://github.com/css-modules/css-modules">CSS Modules</a></p>

<p><strong>CSS Modules — Local Scope 局部作用域</strong></p>

<p>CSS Modules里面最基础也是最重要的概念 - 局部作用域。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.backdrop {}
</span><span class='line'>.prompt {}
</span><span class='line'>.pullquote {}</span></code></pre></td></tr></table></div></figure>


<p>定义在style.css中的样式都存在于一个组件内的局部作用域，不会污染全局的样式。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import styles from "./style.css"
</span><span class='line'>
</span><span class='line'>const Component = props =&gt; {
</span><span class='line'>  return (
</span><span class='line'>    &lt;div className={styles.backdrop}&gt;
</span><span class='line'>      &lt;div className={styles.prompt}&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>      &lt;div className={styles.pullquote}&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>   &lt;/div&gt;
</span><span class='line'>  )
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>怎么解释？如何不会污染全局的样式？答案是唯一的命名。现在，我们先来看是怎么配置的。</p>

<h3>用webpack处理样式</h3>

<p><strong>style-loader | css-loader | sass-loader</strong></p>

<p>给webpack.config.js中的module添加一个新的loaders配置，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module: {
</span><span class='line'>  loaders: [
</span><span class='line'>    {
</span><span class='line'>      test: /\.jsx?/,
</span><span class='line'>      include: APP_DIR,
</span><span class='line'>      loader: 'babel',
</span><span class='line'>    },
</span><span class='line'>    {
</span><span class='line'>      test: /\.scss$/,
</span><span class='line'>      loaders: ["style", "css?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]", "sass"],
</span><span class='line'>    },
</span><span class='line'>  ],
</span><span class='line'>},</span></code></pre></td></tr></table></div></figure>


<p>webpack的loader是用来预处理由require()或者import加载文件，比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import styles from "./style.scss"</span></code></pre></td></tr></table></div></figure>


<p>在上面的webpack配置中，针对*.scss文件，配置了一个loader的管道，顺序是：</p>

<p>sass-loader => css-loader => style-loader</p>

<p>sass-loader顾名思义用来编译SCSS到CSS</p>

<p>css-loader和style-loader用来将样式嵌入到Webpack打包后的JS文件中，从而实现样式的模块化管理。</p>

<p>针对css-loader的配置，你会看到它的格式是如下的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>css?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]</span></code></pre></td></tr></table></div></figure>


<p>其实，这是webpack loader传递参数的一种方式（URL方式），css-loader的参数表请进入<a href="https://github.com/webpack-contrib/css-loader#options-1">传送门</a>。</p>

<p>localIdentName是用于指定局部className的格式，比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[name]__[local]___[hash:base64:5]
</span><span class='line'>ComponentName__LocalName___HashCode
</span><span class='line'>Component__pullquote___SDFe34IIE</span></code></pre></td></tr></table></div></figure>


<h3>如何抽离出独立的css文件？Extract Text Plugin</h3>

<p>正如前面所强调的，style-loader和css-loader，将样式嵌入到Webpack打包后的JS文件。</p>

<p>这当然不是最好的方式，我们需要将样式抽离到独立的css文件中，但就是<a href="https://github.com/webpack-contrib/extract-text-webpack-plugin">Extract Text Plugin</a>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yarn add extract-text-webpack-plugin --dev</span></code></pre></td></tr></table></div></figure>


<p>完整的webpack.config.js文件如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const path = require('path');
</span><span class='line'>const ExtractTextPlugin = require('extract-text-webpack-plugin');
</span><span class='line'>
</span><span class='line'>const BUILD_DIR = path.resolve(__dirname, 'public');
</span><span class='line'>const APP_DIR = path.resolve(__dirname, 'src');
</span><span class='line'>
</span><span class='line'>const extractCSS = new ExtractTextPlugin(`${BUILD_DIR}/styles.css`);
</span><span class='line'>
</span><span class='line'>const config = {
</span><span class='line'>  entry: `${APP_DIR}/index.jsx`,
</span><span class='line'>  output: {
</span><span class='line'>    path: BUILD_DIR,
</span><span class='line'>    filename: 'bundle.js',
</span><span class='line'>  },
</span><span class='line'>  module: {
</span><span class='line'>    loaders: [
</span><span class='line'>      {
</span><span class='line'>        test: /\.jsx?/,
</span><span class='line'>        include: APP_DIR,
</span><span class='line'>        loader: 'babel',
</span><span class='line'>      },
</span><span class='line'>      {
</span><span class='line'>        test: /\.scss$/,
</span><span class='line'>        loader: extractCSS.extract(['css?minimize&modules&importLoaders=2&localIdentName=[name]__[local]', 'postcss', 'sass']),
</span><span class='line'>      },
</span><span class='line'>    ],
</span><span class='line'>  },
</span><span class='line'>  resolve: {
</span><span class='line'>    extensions: ['', '.js', '.jsx'],
</span><span class='line'>  },
</span><span class='line'>  plugins: [
</span><span class='line'>    extractCSS,
</span><span class='line'>  ],
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>module.exports = config;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步做React(一) - Hello React]]></title>
    <link href="http://benweizhu.github.io/blog/2017/01/17/react-step-by-step-1/"/>
    <updated>2017-01-17T21:08:15+08:00</updated>
    <id>http://benweizhu.github.io/blog/2017/01/17/react-step-by-step-1</id>
    <content type="html"><![CDATA[<p>什么都不说，先照着做</p>

<h4>安装合适的node版本和包管理工具Yarn</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node -version v6.9.4(用nvm)
</span><span class='line'>
</span><span class='line'>brew update（如果是mac的）
</span><span class='line'>
</span><span class='line'>brew install yarn</span></code></pre></td></tr></table></div></figure>


<p><a href="https://yarnpkg.com/en/docs/install">https://yarnpkg.com/en/docs/install</a></p>

<h4>安装webpack</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yarn add --dev webpack</span></code></pre></td></tr></table></div></figure>


<h4>安装babel</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yarn add --dev babel-core babel-loader babel-preset-es2015 babel-preset-react</span></code></pre></td></tr></table></div></figure>


<h4>安装React</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yarn add react react-dom</span></code></pre></td></tr></table></div></figure>


<h4>创建和编辑.babelrc</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch .babelrc   
</span><span class='line'>vim .babelrc  </span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "presets" : ["es2015", "react"]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>创建和编辑webpack.config.js</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch webpack.config.js
</span><span class='line'>vim webpack.config.js</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var webpack = require('webpack');
</span><span class='line'>var path = require('path');
</span><span class='line'>
</span><span class='line'>var BUILD_DIR = path.resolve(__dirname, 'public');
</span><span class='line'>var APP_DIR = path.resolve(__dirname, 'src');
</span><span class='line'>
</span><span class='line'>var config = {
</span><span class='line'>  entry: APP_DIR + '/index.jsx',
</span><span class='line'>  output: {
</span><span class='line'>      path: BUILD_DIR,
</span><span class='line'>      filename: 'bundle.js'
</span><span class='line'>  },
</span><span class='line'>  module: {
</span><span class='line'>      loaders: [
</span><span class='line'>          {
</span><span class='line'>              test: /\.jsx?/,
</span><span class='line'>              include: APP_DIR,
</span><span class='line'>              loader: 'babel'
</span><span class='line'>          }
</span><span class='line'>      ]
</span><span class='line'>  }
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>module.exports = config;</span></code></pre></td></tr></table></div></figure>


<h4>创建和编辑src/index.jsx</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir src
</span><span class='line'>cd src
</span><span class='line'>touch index.jsx
</span><span class='line'>vim index.jsx</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import React from 'react';
</span><span class='line'>import {render} from 'react-dom';
</span><span class='line'>
</span><span class='line'>class App extends React.Component {
</span><span class='line'>  render () {
</span><span class='line'>      return &lt;p&gt; Hello React!&lt;/p&gt;;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>render(&lt;App/&gt;, document.getElementById('app'));</span></code></pre></td></tr></table></div></figure>


<h4>在html中引用</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd src
</span><span class='line'>touch index.html
</span><span class='line'>vim index.html</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!doctype html&gt;
</span><span class='line'>
</span><span class='line'>&lt;html lang="zh"&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>    &lt;!-- The first thing in any HTML file should be the charset --&gt;
</span><span class='line'>    &lt;meta charset="utf-8"&gt;
</span><span class='line'>    &lt;!-- Make the page mobile compatible --&gt;
</span><span class='line'>    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;
</span><span class='line'>    &lt;meta name="mobile-web-app-capable" content="yes"&gt;
</span><span class='line'>    &lt;title&gt;17High&lt;/title&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>&lt;div id="app"/&gt;
</span><span class='line'>&lt;!-- Display a message if JS has been disabled on the browser. --&gt;
</span><span class='line'>&lt;noscript&gt;If you're seeing this message, that means &lt;strong&gt;JavaScript has been disabled on your browser&lt;/strong&gt;, please &lt;strong&gt;enable JS&lt;/strong&gt; to make this app work.&lt;/noscript&gt;
</span><span class='line'>
</span><span class='line'>&lt;script src="../public/bundle.js" type="text/javascript"&gt;&lt;/script&gt;
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<h4>运行webpack命令，生成打包文件bundle.js</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./node_modules/.bin/webpack -d
</span><span class='line'>./node_modules/.bin/webpack -d --watch //监听文件变化</span></code></pre></td></tr></table></div></figure>


<p>打开index.html看效果</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你听说过“风格指南驱动开发”吗？]]></title>
    <link href="http://benweizhu.github.io/blog/2016/11/19/style-guide-driven-development/"/>
    <updated>2016-11-19T21:16:37+08:00</updated>
    <id>http://benweizhu.github.io/blog/2016/11/19/style-guide-driven-development</id>
    <content type="html"><![CDATA[<h3>第一次听说“SGDD”</h3>

<p>我听说过TDD（测试驱动开发），我在软件开发中一致坚持执行</p>

<p>它以其倡导先写测试程序，然后编码实现其功能得名，在开发中，我们带着两顶帽子思考：先戴上实现功能的帽子，在测试的辅助下，快速实现其功能；再戴上重构的帽子，在测试的保护下，通过去除冗余的代码，提高代码质量。</p>

<p>我也听说过BDD（行为驱动开发），我熟练使用Cucumber编写端到端测试</p>

<p>它鼓励软件项目中的开发者、QA和非技术人员或商业参与者之间进行协作，通过用自然语言书写非程序员可读的测试用例，以扩展测试驱动的开发方法。</p>

<p>我头一次听说SGDD（风格指南驱动开发），我蒙蔽了</p>

<p>我打开百度（请不要鄙视我，它毕竟还是“最好的中文搜索引擎”），搜索关键字 - “风格指南驱动开发”，却只看到寥寥的一篇翻译“干货”。收货不多，但能证明了一点，即风格指南驱动开发（SGDD）的思想还没有像TDD和BDD那样在国内得到较为广泛的推广。</p>

<p>本文是一篇我目前所在项目实践的总结，也是对这种新的开发思想的思考。</p>

<h3>“风格指南驱动开发”是什么？</h3>

<p>“风格指南驱动开发”其实是一个相当新的术语，最早在公开场合中谈到这个概念的人应该是Nicole Sullivan，她在2014年9月一次演讲《Components &amp; SGDD》中提出SGDD的概念（Nicole Sullivan目前在NPM这家公司，没错，就是那个NPM，做Product Manager &amp; Design Manager）。</p>

<p>“风格指南驱动开发”尝试着：</p>

<p>1.让UX和前端开发更紧密的工作在一起，将设计与前端开发的工作闭环缩小，更快速的迭代产品原型 <br/>
2.将UI开发和业务系统分离开，业务系统不仅仅是指后端系统（不仅仅是前后端分离），也包括业务的Web系统 <br/>
3.让设计文档更加“灵活”，更加及时（up to date），更加一致（single source of truth） <br/>
4.让前端资源管理更加规范，开发模式更加清晰 <br/>
5.让整个Web开发周期更加敏捷（Agile）</p>

<p>它是一种前端开发和团队工作方式的实践。</p>

<p>而实践的方式，就是做到以下两点：组件化的设计和动态风格指南。</p>

<h3>组件化的设计 - 我的眼里一切都可以是组件</h3>

<p>大型的Web应用通常都会有大量的JS，CSS和其他资源文件（字体文件，图标，图片），随着页面越来越多，交互越来越复杂，如果没有很好的管理，就会导致资源的冗余，依赖关系复杂度增加，可维护性降低，开发难度增加，这其实是前端开发常见的通病。</p>

<p>如果和后端的开发相比较，比如：Java开发，天生就拥有包管理和类的支持，而根据业务/功能层次来划分，我们拥有了常见的（或者约定俗成）实现层次，如：Controller，Service，Repository，Util，Constant等，同时，我们还会利用框架和语言特性带来的优势，比如，IOC，AOP，注解，继承，接口等，而统统这些能够带来的好处就是职责的单一，模块的高内聚，接口化，可重用，易于测试等等。</p>

<p>对于Web前端开发，由于涉及到的内容较广，又不太可能完全具备后端语言的优秀特性，所以，更加需要开发人员具有优秀的设计和管理的思想，比如：CSS的合理命名，有效的利用CSS预处理器，JavaScript的模块化，利用框架的特性（比如AngularJS的依赖注入，指令等。）等，在这之中，有一个最近开始被大家关注，非常重要的设计和管理思想就是“组件化”。</p>

<p>组件是一个个独立存在的模块，它能够具备一些非常优秀的特性：<strong>单一的职责，资源的高内聚，独立的作用域，可独立的测试，接口的规范化，可重用，可组合等</strong>。这些优秀的特性其实就已经非常接近我们常常在后端语言中描述的特性。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/style-guide/folder-structure.png" width="300" title="代码组织结构" alt="Alt text">
</p>


<p style="text-align: center;">我们项目的代码组织结构</p>


<p>除开开发关注的特性，组件化对于整个软件开发流程也是有益的，合理的组件划分可以合理控制开发闭环，UX可以更快的看到设计实现的原型，提升团队成员沟通频率，BA（业务分析人员）可以方便的根据组件合理的编写Story（故事卡）和Task（比故事更小的任务卡）等等。</p>

<p>而这些让组件化成为“风格指南驱动开发”的必要元素。</p>

<h3>“风格指南驱动开发”中的“风格指南”</h3>

<p>除了组件化，“风格指南驱动开发”还需要另外一个实现驱动开发的基石，也就是它名字中的“风格指南”。</p>

<p>“风格指南”对大家应该不陌生，主要分为两种类型：静态风格指南和动态风格指南。</p>

<p>静态风格指南是我们比较常见的静态设计文档，比如，由设计师提供的PSD/PDF等文件，文档中包含：调色板，字体，按钮，链接等等。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/sgdd/static-style-guide.png" width="500" title="Static Style Guide" alt="Alt text">
</p>


<p style="text-align: center;">medialoot上的一个样例</p>


<p>动态风格指南，也称为Living Style Guide（“活的”风格指南），它是一个包含风格指南的Web站点。当你看到它时，也许你会觉的有点像BootStrap，然而，和BootStrap以及静态风格指南不同，企业开发中的Living Style Guide得到的是:</p>

<p>1.设计在代码实现层面上的最新版本，它包含了展示UI组件交互和行为的Demo以及相应的实现和使用代码等 <br/>
2.用户是UX，前端开发和BA（业务分析），在UX和BA的眼中看到的文档即最新实现结果，而在前端开发眼中看到的代码即设计 <br/>
3.文档中看到的实现即是产品实现中最终的一致结果 <br/>
4.除了基础组件，也具有更加偏重业务的大型组件 <br/>
5.产生供产品环境使用的最终资源（库）</p>

<p>综合以上不同之处，相信大家可以猜到对于“风格指南驱动开发”来说，它所需要的是后者。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/sgdd/living-style-guide.png" width="500" title="Living Style Guide" alt="Alt text">
</p>


<p style="text-align: center;">一个Living Style Guide的样例</p>


<h3>工作流程 - 如何“驱动开发”？</h3>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/sgdd/sgdd-process.png" width="500" title="Style Guide Driven Development Process" alt="Alt text">
</p>


<p style="text-align: center;">开发流程</p>


<p>也许，你会更加关心“风格指南驱动开发”的整个开发流程，但其实，当你拥有了组件化的思想和“动态的风格指南”，“风格指南驱动开发”的整个过程其实是行云流水的，我简单描述一下：</p>

<p>1.挖掘到新的需求/特性</p>

<p>当新的需求出现时，UX开始进行页面设计，Living Style Guide会作为设计的参考文档，通常情况，设计师会查看已有的调色板，字体，和其他基本元素或组件来组成新的页面布局。在组件化的思想和Living Style Guide的帮助下，BA和设计师都会尝试使用或者扩展现有的组件。</p>

<p>2.抽象成组件</p>

<p>一旦设计完成，BA，UX和开发会开始讨论如何把新的设计细分为独立的组件，哪些是已经存在可以重用的，哪些是新的需用新建或者扩展实现的。Living Style Guide作为桥梁帮助设计与开发进行沟通，促进双方的理解，确保实现的准确性。而抽象出来的组件，帮助BA划分任务和故事（Story），以便更加准确的估算“故事点”。</p>

<p>3.实现和文档化</p>

<p>此时，Living Style Guide是作为一个开发框架和设计试验场（playground）。</p>

<p>作为一个试验场（playground），允许你随时看到每一个开发出来的组件，作为开发框架，允许你快速开发，它和真正的产品实现完全隔离，这种隔离会鼓励你一以更加抽象的方式创建组件，以便于让他们更容易被重用。</p>

<p>Living Style Guide的开发注重组件化的隔离和规范化的开发流程（套路清晰明了），我们常常会开发一些自动化的构建任务来帮助快速初始化一个组件需要的基本内容，只要开发人员对开发所需的前端技术栈有掌握，就能较快速的开发完成相应的组件。</p>

<p>而开发完成的组件在Living Style Guide中立刻变成“活的文档”，可以快速展示各种不同的组件应用场景，提供给UX和BA做审查（review）。</p>

<p>4.组件在产品应用中的热插拔</p>

<p>最后一步，就是将组件应用到真正的产品实现中（该产品代码应该是与Living Style Guide毫无关系的业务代码）。而对于Living Style Guide输出的结果，应该可以任意选择刚好满足需求所需要的组件，拥有足够的灵活性，才能实现它在产品应用代码中的热插拔。</p>

<p>如果还有第5步的话，那就是重复上面的4步，这就是“风格指南驱动开发”的完整流程。</p>

<h3>留在最后的思考 - 它到底驱动了什么？</h3>

<p>作为好奇宝宝的你们和我，当你读完这篇文章，当我写完这篇项目上的实践总结，其实，应该仍然在思考，它到底驱动了什么？</p>

<p>在TDD和BDD中，通过测试，驱动我们编写刚好满足测试和满足需求的实现，而测试反过来成为保护伞，在我们通过重构提升代码质量的同时，保证功能的安全性。</p>

<p>那么，“风格指南驱动开发”到底驱动了什么？也许，它驱动着我们尽最大可能去重新使用已有的组件（代码）和设计更通用的组件，也驱动着我们（开发，UX，BA）进行更加频繁的沟通，它驱动着BA（业务分析）书写更加合理的Story，也驱动开发进行更加合理的代码和资源的管理。</p>

<p>如果转载本文，请注明转载地址： <a href="http://benweizhu.github.io/blog/2016/11/19/style-guide-driven-development/">http://benweizhu.github.io/blog/2016/11/19/style-guide-driven-development/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Living Style Guide - 缩小设计和开发的沟通鸿沟]]></title>
    <link href="http://benweizhu.github.io/blog/2016/10/27/living-style-guide/"/>
    <updated>2016-10-27T10:04:27+08:00</updated>
    <id>http://benweizhu.github.io/blog/2016/10/27/living-style-guide</id>
    <content type="html"><![CDATA[<p>本文作者：朱本威，杨松</p>

<h3>什么是Style Guide（风格指南）？</h3>

<p>如果你做过Web开发，我打赌你肯定听说过“风格指南”!</p>

<p>风格指南是什么？它是一系列关于书写和设计标准的文档，比如一些常见的标准有：字体，颜色，Logo，间距等等。</p>

<p>风格指南最早出自于印刷行业，比如：出版社就是风格指南的常见用户。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/style-guide/duzhe99.png" width="500" title="1999年的《读者》" alt="Alt text">
  <img src="http://benweizhu.github.io/images/style-guide/duzhe2016.png" width="294" title="2016年的《读者》" alt="Alt text">
</p>


<p style="text-align: center;">从1999年到2016年，《读者》的封面风格都没有改变过</p>


<p>好的品牌，通常都有一个非常棒的风格指南，无论是哪个行业，比如：KFC。我们也将KFC的这种风格指南成为VI（Visual Identity，企业视觉设计）。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/style-guide/KFC.png" width="500" title="KFC Style Guide" alt="Alt text">
</p>


<p style="text-align: center;">KFC老爷爷大家都认识</p>


<p>对于我们的WEB开发，也需要风格指南，目的是保证最终的交付产物和最初设计的一致性，打造出一致的核心用户体验。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/style-guide/optus.png" width="500" title="OPUTS Style Guide" alt="Alt text">
</p>


<p style="text-align: center;">Optus澳大利亚电讯公司</p>


<h3>风格指南过去的工作方式</h3>

<p>在过去，一种常用的工作方式，设计与开发是分离开了。设计师在这儿，前端工程师在那儿，中间有一条无形的巨大的鸿沟。</p>

<p>唯一的沟通渠道就是这样一个PDF材料。设计师最开始把PDF给你，然后和工程师各自为阵开始忙自己的，打死不相往来。</p>

<p>沟通不及时就不说了，有时候设计还要埋怨你，说你的实现怎么和他最初的设计不一样。</p>

<p>每一个工程师都应该都会有一段被设计师逼着改实现的经历，也许有的设计师们根本不理解我们修复IE问题时的痛苦，也不一定明白PDF文档沟通的效率是有限的。</p>

<p>“我怎么能知道点击每一个按钮时候的行为呢？”</p>

<p>答案是我根本不知道，等我看完了一百页文档，还不如你直接给我解释来得简单直接。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/style-guide/ui-dev.png" width="500" title="UX 和 UIDev" alt="Alt text">
</p>


<p style="text-align: center;">UX，UI Dev和Backend Dev</p>


<p>而每一次修改都需要很长的反馈周期，中间浪费了不少时间。</p>

<p>然而，当第二版，第三版，第四版来的时候，我的PDF和PSD文件已经堆积成山，我也不清楚哪一个才是最新的版本，没有版本管理工具，即便有，这种二进制文件也很难立刻查看它和上一个版本的区别在哪。</p>

<p>而且我相信大部分像我一样没有强迫症的人，一定是文件下载或者拷贝随意放置在桌面或者什么位置，然后常常根据时间排序去找最新的。久而久之，就不知道在哪了，然后又找设计师要一版。</p>

<p>经历了以上种种的痛点之后，我们是怎么做的？</p>

<h3>Living Style Guide</h3>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/style-guide/living-style-guide-logo.png" width="500" title="UX 和 UIDev" alt="Alt text">
</p>


<p>我们忍受不了这种不够敏捷的工作方式，尝试着用新的方式去解决这个问题，我们构建一个Living Style Guide。它是一个在线站点，同时也是一种工作方式，一种实践。我们尝试通过这种实践去解决这个问题。</p>

<p><strong>Living Style Guide和Style Guide的区别：</strong></p>

<p>一个直观的变化就是，曾经的PDF文档，代码化了。比如，最开始只存在于PDF文件中的调色板，字体，在网站上就可以直接查看，而不用担心是否过期，找不到等等。</p>

<p>同时，也是一种工作方式的改变，我们的设计师与工程师需要更加紧密地工作在一起了。让Living Style Guide成了一个钮带，连接着设计师与工程师。</p>

<p>设计看到的文档即代码，开发人员看到的代码即文档。不会出现设计师所认为的设计和实际开发出来的结果不一致的情况，我们做到Single source of truth(唯一真实来源)。同时，你看到的是动态，可交互的一系列组件。不需要考虑怎么用文档去描述一种行为，你所看到的就包含自身行为。</p>

<p>敏捷宣言中有这样一句话：工作的软件 高于 详尽的文档，Living Style Guide在努力实现这一点，尝试将设计与前端的闭环缩小。</p>

<h3>聊聊工程师们关心的干货</h3>

<p><strong>选择合适的技术栈</strong></p>

<p>技术栈的选择还是要回归到项目需求上。我们从大的方向上考虑了这么几点：组件化，数据驱动，易定制和可测试。</p>

<p>Living Style Guide是一个供设计师和前端开发工程师使用的平台，并可以将开发的内容打包使用在其他不同的Web应用平台，对通用性和易用性都有较高的要求，我们没有做一个大而全的框架，而是想要做到以组件为单位，灵活发布，并能灵活使用在各种平台。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/style-guide/tech-stack.png" width="500" title="我们的技术栈" alt="Alt text">
</p>


<p style="text-align: center;">我们的技术栈</p>


<p>上面这张图涵盖了我们大部分的技术栈内容，具体内容我就不单独介绍了。不过，我突然想起来前段时间有一篇非常火的文章《在2016年学JavaScript是一种什么样的体验?》，它写的就是我们这个feel。</p>

<p><strong>关于代码组织结构方式</strong></p>

<p>组件化是我们的核心价值，所以在代码结构上，我们将“自包含”属性作为一个很重要的特性。每一个组件包含了它自己所需要的相关文件：测试文件（单元测试，功能测试），样式文件（Sass），组件和文档，而公共的部分，我们抽离到其他位置，从而尽量做到高内聚，低耦合，同时提高代码重用性。</p>

<p style="text-align: center;">
  <img src="http://benweizhu.github.io/images/style-guide/folder-structure.png" width="300" title="代码组织结构" alt="Alt text">
</p>


<p style="text-align: center;">我们项目的代码组织结构</p>


<p><strong>需要注意的点</strong></p>

<p>组件化的好处是相互隔离，又可被重用。实现组件化一定要需要合理的分类和管理好组件，比如，区分业务组件和通用组件，保证被重用的组件拥有足够的可扩展性。</p>

<p><strong>最后</strong></p>

<p>Living Style Guide是我们在缩小设计与开发沟通鸿沟的一种尝试，努力将闭环缩小，以提高效率，降低成本，这是一种实践，也是设计师和工程师工作方式的改变。</p>

<p>转载请注明： <a href="http://benweizhu.github.io/blog/2016/10/27/living-style-guide/">http://benweizhu.github.io/blog/2016/10/27/living-style-guide/</a></p>

<p>参考资料： <br/>
1. <a href="https://asinthecity.com/2011/11/10/the-difference-between-a-ux-designer-and-ui-developer/">https://asinthecity.com/2011/11/10/the-difference-between-a-ux-designer-and-ui-developer/</a> <br/>
2. 敏捷宣言（ <a href="http://agilemanifesto.org/iso/zhchs/">http://agilemanifesto.org/iso/zhchs/</a> ）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS和软件工程中的设计原则]]></title>
    <link href="http://benweizhu.github.io/blog/2016/08/21/css-for-software-engineers-for-css-developers/"/>
    <updated>2016-08-21T18:10:13+08:00</updated>
    <id>http://benweizhu.github.io/blog/2016/08/21/css-for-software-engineers-for-css-developers</id>
    <content type="html"><![CDATA[<p>原视频： <a href="https://vimeo.com/177216958">https://vimeo.com/177216958</a></p>

<p>PPT如下：</p>

<script async class="speakerdeck-embed" data-id="087e1c8ae1c4452f82ae6fd5e6215a9a" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>作者提到CSS开发过程的很多原则：
  • DRY/Single Source of Truth <br/>
  • The Single Responsibility Principle <br/>
  • The Separation of Concerns <br/>
  • Immutability <br/>
  • Cylcomatic Complexity <br/>
  • The Open/Close Principle <br/>
  • Orthogonality</p>

<p>这些原则在其他软件开发领域应用非常广泛，然而绝大多数人在写CSS的时候却又显得相当随意。
可以参考一下作者的观点，每一原则他都给出了对应的应用场景。</p>

<p>同时对于非常喜欢写嵌套规则的同学，强烈建议去了解<a href="%E5%9C%88%E5%A4%8D%E6%9D%82%E5%BA%A6">Cylcomatic Complexity</a>，尝试着去减少嵌套，减少以后的维护成本。</p>

<p>个人感觉，作者对于这些设计原则本身的说明，占用了太多的篇幅，并没有告诉你如果要实现这个设计，应该怎么做？但作者讲解了一些反例，并印证它不满足那些原则。我们应该反向思考，我们在css中过于随意的css选择器，定义出scope正确的合理的css。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVG和IconFont]]></title>
    <link href="http://benweizhu.github.io/blog/2016/07/12/svg-and-icon-font/"/>
    <updated>2016-07-12T15:28:07+08:00</updated>
    <id>http://benweizhu.github.io/blog/2016/07/12/svg-and-icon-font</id>
    <content type="html"><![CDATA[<p>在大型企业中，它们都拥有自己的VI，有自己的设计团队，他们来开发设计一些企业特有的图标和标志。而这些图标一般以矢量图的方式提供给我们。</p>

<p>矢量图，也称为面向对象的图像或绘图图像，在数学上定义为一系列由线连接的点。矢量文件中的图形元素称为对象。每个对象都是一个自成一体的实体，它具有颜色、形状、轮廓、大小和屏幕位置等属性。</p>

<p>SVG（Scalable Vector Graphics）是什么？</p>

<p>大部分人第一次见到它，肯定认为是一种矢量图图形格式，但严格来说它也是一种开放标准的矢量图形语言，是使用XML来描述二维图形和绘图程序的语言，它是一门语言，DSL（领域特定语言）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot;</span>
</span><span class='line'><span class="cp">&quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">&quot;100%&quot;</span> <span class="na">height=</span><span class="s">&quot;100%&quot;</span> <span class="na">version=</span><span class="s">&quot;1.1&quot;</span>
</span><span class='line'><span class="na">xmlns=</span><span class="s">&quot;http://www.w3.org/2000/svg&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;50&quot;</span> <span class="na">r=</span><span class="s">&quot;40&quot;</span> <span class="na">stroke=</span><span class="s">&quot;black&quot;</span>
</span><span class='line'><span class="na">stroke-width=</span><span class="s">&quot;2&quot;</span> <span class="na">fill=</span><span class="s">&quot;red&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/svg&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面这段代码得到的svg矢量图，如下：</p>

<p><img src="https://rawgit.com/benweizhu/5036fcaf39960a28ce9b0aca17a78caa/raw/31797b14c698431c9a6f5435a2f5a28dda2ce1bd/circle.svg" alt="Alt text" /></p>

<p>我们在响应式网页设计的工作中经常用到SVG，因为一般的图片没有办法进行适当的缩放，普通图片的缩放会导致图像的失真，同时，图片的文件大小也可能和你希望的图片不一致（大图被缩小使用，导致图片文件大小仍然很大）。</p>

<p>我相信大部分前端开发工程师都用过IconFont，比如：<a href="http://fontawesome.io/icons/">http://fontawesome.io/icons/</a> 和bootstrap中的glyphicons <a href="http://v3.bootcss.com/components/#glyphicons">http://v3.bootcss.com/components/#glyphicons</a> 。</p>

<p>关于为什么要转换为Icon Font？CSS-Tricks中有一篇文章详细的对比了SVG和ICON Font，见： <a href="https://css-tricks.com/icon-fonts-vs-svg/">https://css-tricks.com/icon-fonts-vs-svg/</a></p>

<p>简单版，一个最主要的原因必须使用IconFont，因为要兼容IE8。</p>

<p>一个比较有用的gulp插件，可以将SVG文件转化为font字体文件，并自动生成对应的scss文件（包含font-familly和content）。</p>

<p><a href="https://github.com/nfroidure/gulp-iconfont">https://github.com/nfroidure/gulp-iconfont</a></p>

<p>当然，我们也可以使用一些在线工具来将SVG文件转化成字体文件比如： <a href="https://icomoon.io/">https://icomoon.io/</a> 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.bash_profile和.bashrc]]></title>
    <link href="http://benweizhu.github.io/blog/2016/07/02/bash-profile-and-bashrc/"/>
    <updated>2016-07-02T12:54:48+08:00</updated>
    <id>http://benweizhu.github.io/blog/2016/07/02/bash-profile-and-bashrc</id>
    <content type="html"><![CDATA[<p>做个记录</p>

<p>转载自： <a href="http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html">http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html</a></p>

<p>WHEN working with Linux, Unix, and Mac OS X, I always forget which bash config file to edit when I want to set my PATH and other environmental variables for my shell. Should you edit .bash_profile or .bashrc in your home directory?
You can put configurations in either file, and you can create either if it doesn’t exist. But why two different files? What is the difference?
According to the bash man page, .bash_profile is executed for login shells, while .bashrc is executed for interactive non-login shells.</p>

<p><strong>What is a login or non-login shell?</strong></p>

<p>When you login (type username and password) via console, either sitting at the machine, or remotely via ssh: .bash_profile is executed to configure your shell before the initial command prompt.
But, if you’ve already logged into your machine and open a new terminal window (xterm) inside Gnome or KDE, then .bashrc is executed before the window command prompt. .bashrc is also run when you start a new bash instance by typing /bin/bash in a terminal.
Why two different files?</p>

<p>Say, you’d like to print some lengthy diagnostic information about your machine each time you login (load average, memory usage, current users, etc). You only want to see it on login, so you only want to place this in your .bash_profile. If you put it in your .bashrc, you’d see it every time you open a new terminal window.
Mac OS X — an exception</p>

<p>An exception to the terminal window guidelines is Mac OS X’s Terminal.app, which runs a login shell by default for each new terminal window, calling .bash_profile instead of .bashrc. Other GUI terminal emulators may do the same, but most tend not to.</p>

<p>就是注意一点，这里提到Mac会有些不同。</p>

<p>什么时候会用到呢？其实有很多，比如，安装mysql时，希望通过命令访问，就需要把mysql的路径放在path中。又比如，安装nvm时，配置nvm的命令。还有比如希望使用alias命令，添加一些快捷命令，也需要配置。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在AWS上部署Jenkins]]></title>
    <link href="http://benweizhu.github.io/blog/2016/06/27/host-jenkins-on-aws/"/>
    <updated>2016-06-27T20:57:25+08:00</updated>
    <id>http://benweizhu.github.io/blog/2016/06/27/host-jenkins-on-aws</id>
    <content type="html"><![CDATA[<h2>注册AWS账号</h2>

<p><a href="https://aws.amazon.com">https://aws.amazon.com</a></p>

<h2>通过信用卡验证</h2>

<p>付款1刀</p>

<h2>选择Region</h2>

<p>美国东部（弗吉尼亚北部） <br/>
美国西部（俄勒冈） <br/>
美国西部（加利福尼亚北部） <br/>
欧洲（爱尔兰） <br/>
欧洲（法兰克福） <br/>
亚太区域（新加坡） <br/>
亚太区域（东京） <br/>
亚太区域 (首尔) <br/>
亚太区域（悉尼）<br/>
南美洲（圣保罗）</p>

<h2>AWS Identity and Access Management (IAM)</h2>

<ul>
<li>对您 AWS 账户的共享访问权限</li>
<li>精细权限</li>
<li>在 Amazon EC2 上运行的应用程序针对 AWS 资源的安全访问权限</li>
<li>等等</li>
</ul>


<h3>创建用户</h3>

<p><a href="https://console.aws.amazon.com/iam/home#home">https://console.aws.amazon.com/iam/home#home</a></p>

<p>AWS分为根账号用户和IAM用户</p>

<p>在账户中创建与组织中的用户对应的各IAM用户，而不是与他人共享您的根账户凭证。IAM用户不是单独的账户；它们是您账户中的用户。每个用户都可以有自己的密码以用于访问AWS管理控制台。您还可以为每个用户创建单独的访问密钥，以便用户可以发出编程请求以使用账户中的资源。</p>

<p>可以将IAM用户组织为IAM组，然后将策略附加到组。这种情况下，各用户仍有自己的凭证，但是组中的所有用户都具有附加到组的权限。</p>

<p>1.我创建了一个Administrators的组，并赋予AdministratorAccess权限。 <br/>
2.创建一个用户，用户名：someuser，勾选：为每个用户生成访问密钥，用户需要访问密钥，以确保向 AWS 服务 API 提交安全的 REST 或查询协议请求。<br/>
3.给用户分配用户组 <br/>
4.设置用户的安全证书管理，即创建用户名密码访问权限和第二验证策略 <br/>
5.下载用户密码安全凭证</p>

<p>要使用AWS管理控制台的用户必须通过特定于您账户的登录页面登录到您的AWS账户。您需要为您的用户提供他们用于访问登录页面的URL地址。凭证中包含URL： <a href="https://My_AWS_Account_ID.signin.aws.amazon.com/console/">https://My_AWS_Account_ID.signin.aws.amazon.com/console/</a></p>

<h3>创建EC2实例（我等穷人只能用免费的）</h3>

<p>Amazon Elastic Compute Cloud (Amazon EC2) 在 Amazon Web Services (AWS) 云中提供可扩展的计算容量。使用 Amazon EC2 可避免前期的硬件投入，因此您能够快速开发和部署应用程序。通过使用 Amazon EC2，您可以根据自身需要启动任意数量的虚拟服务器、配置安全和网络以及管理存储。Amazon EC2 允许您根据需要进行缩放以应对需求变化或流行高峰，降低流量预测需求。</p>

<p>1.用新用户登录： <a href="https://My_AWS_Account_ID.signin.aws.amazon.com/console/">https://My_AWS_Account_ID.signin.aws.amazon.com/console/</a> <br/>
2.创建一个EC2实例<br/>
3.选择一个Amazon系统映像（AMI），我选择Ubuntu的免费版 <br/>
4.选择一个实例类型（计算资源），免费版只有1G内存，实在不够用 <br/>
5.配置实例详细信息（我采用默认配置） <br/>
6.选择存储大小，最大免费30G <br/>
7.标签实例（我留空了） <br/>
8.配置安全组，这里要注意了，只要配置SSH和TCP的8080端口（jenkins用） <br/>
9.下载SSH证书</p>

<p>SSH证书是用于SSH登录服务器的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh -i somepem.pem user@serveraddress
</span></code></pre></td></tr></table></div></figure>


<h2>安装Jenkins</h2>

<p>SSH登录到服务器上，然后运行下面的脚本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>wget -q -O - https://jenkins-ci.org/debian/jenkins-ci.org.key <span class="p">|</span> sudo apt-key add -
</span><span class='line'>sudo sh -c <span class="s1">&#39;echo deb http://pkg.jenkins-ci.org/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list&#39;</span>
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install jenkins
</span></code></pre></td></tr></table></div></figure>


<p>注意jenkins默认是8080端口，这就是上面安全组要配置的TCP的8080端口。</p>

<p>然后，可以通过ip地址+8080端口。</p>

<p>参考资料：  <br/>
1. <a href="http://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/concepts.html">http://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/concepts.html</a>  <br/>
2. <a href="http://docs.aws.amazon.com/zh_cn/IAM/latest/UserGuide/introduction.html">http://docs.aws.amazon.com/zh_cn/IAM/latest/UserGuide/introduction.html</a> <br/>
3. <a href="http://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/AMIs.html">http://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/AMIs.html</a> <br/>
4. <a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu">https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu</a> <br/>
5. <a href="http://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html">http://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我也想来谈谈HTTPS]]></title>
    <link href="http://benweizhu.github.io/blog/2016/06/13/I-want-to-talk-about-https-too/"/>
    <updated>2016-06-13T17:50:10+08:00</updated>
    <id>http://benweizhu.github.io/blog/2016/06/13/I-want-to-talk-about-https-too</id>
    <content type="html"><![CDATA[<h2>安全越来越被重视</h2>

<p>2014年8月份Google在它的官博上发表<a href="https://webmasters.googleblog.com/2014/08/https-as-ranking-signal.html">《HTTPS as a ranking signal》</a>
 公告已经调整其搜索引擎算法，采用 HTTPS 加密的网站在搜索结果中的排名将会更高，其目标非常简单，就是要鼓励全球网站采用安全度更高的HTTPS以保证访客安全。</p>

<p>同一年（2014年），百度开始对外开放了https的访问，并于3月初正式对全网用户进行了https跳转。对百度自身来说，https能够保护用户体验，减少劫持/隐私泄露对用户的伤害。</p>

<p>2015年，百度开放收录https站点公告。继启用https加密之后，百度搜索再次重磅推出：全面支持https页面直接收录；另外从相关性的角度，百度搜索引擎认为权值相同的站点，采用https协议的页面更加安全，排名上会优先对待。</p>

<h2>为什么说HTTP不安全</h2>

<p>HTTP报文是由一行一行的简单字符串组成的。HTTP报文都是纯文本，不是二进制代码，所以人可以很方便地对其进行读写。</p>

<p>下图显示了一个简单事务所使用的报文：</p>

<p><img src="http://benweizhu.github.io/images/http-message.png" title="简单文本结构组成的 HTTP 报文" alt="Alt text" /></p>

<p>HTTP传输的内容是明文的，你上网浏览过、提交过的内容，所有在后台工作的人，比如路由器的所有者、网线途径路线的不明意图者、省市运营商、运营商骨干网、跨运营商网关等都能够查看。如果你访问的是国外网站，那么还得加上国际宽带出口、国外运营商等。这串名单可以不断延伸，一直到你对互联网由崇拜转为恐惧。举个例子：</p>

<p><strong>一个简单非https的登录采用POST方法提交包含用户名和密码的表单，会发生什么？</strong></p>

<p><img src="http://benweizhu.github.io/images/login-example.png" title="简单文本结构组成的 HTTP 报文" alt="Alt text" /></p>

<p>POST表单发出去的信息，<strong>没有做任何的安全性信息置乱（加密编码）</strong>，直接编码为下一层协议(TCP层)需要的内容，所有用户名和密码信息一览无余，任何只要拦截到报文信息的人都可以获取到你的用户名和密码，是不是想一想都觉得恐怖？</p>

<p>互联网巨头Google曾表示，希望互联网HTTPS化、乃至于提出“HTTP = 不安全”口号的原因，过去数年里，我们一直生活在明文时代，上网的所有痕迹都暴露在巨型机构眼中。</p>

<h2>那么，问题来了，怎么样的才是安全的呢？安全的技术需求有哪些才能算安全？</h2>

<p>从信息安全的角度说，网络信息安全与保密的技术特征主要表现在系统的保密性、完整性、真实性、可靠性、可用性、不可抵赖性等。</p>

<p>简单解释其中几条重要的特性:</p>

<p><strong>保密性</strong> 是网络信息不被泄露给非授权的用户、实体或过程，或供其利用的特性。也就是你的用户名和密码不能被除了你和登录系统之外的第三方获取（你告诉别人不算）。 <br/>
<strong>完整性</strong> 就是网络信息在存储或传输过程中保持不被偶然或蓄意地删除、修改、伪造、乱序、重放、插入等破坏和丢失的特性。 <br/>
<strong>不可抵赖性</strong> 也称作不可否认性，在网络信息系统的信息交互过程中，确信参与者的真实同一性。即所有参与者都不能否认或抵赖曾经完成的操作和承诺。</p>

<h2>对于包含用户敏感信息的网站需要怎样的安全？</h2>

<p>我们从从实际角度出发，对于一个包含用户敏感信息的网站，我们期望实现HTTP安全技术能够满足至少以下需求：</p>

<ul>
<li>服务器认证（客户端知道它们是在与真正的而不是伪造的服务器通话）</li>
<li>客户端认证（服务器知道它们是在与真正的而不是伪造的客户端通话）</li>
<li>完整性（客户端和服务器的数据不会被修改）</li>
<li>加密（客户端和服务器的对话是私密的，无需担心被窃听）</li>
<li>效率（一个运行的足够快的算法，以便低端的客户端和服务器使用）</li>
<li>普适性（基本上所有的客户端和服务器都支持这个协议）</li>
<li>管理的可扩展性（在任何地方的任何人都可以立即进行安全通信）</li>
<li>适应性（能够支持当前最知名的安全方法）</li>
<li>在社会上的可行性（满足社会的政治文化需要）</li>
</ul>


<h2>HTTPS协议来解决安全性的问题：HTTPS和HTTP的不同 - TLS安全层（会话层）</h2>

<p>超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，HTTPS，也被称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种网络安全传输协议。</p>

<p>HTTPS开发的主要目的，是提供对网络服务器的认证，保证交换信息的机密性和完整性。该协议由网景公司首创，所有主要的浏览器和服务器都支持此协议。</p>

<p>在计算机网络上，HTTPS经由超文本传输协议进行通信，但利用SSL/TLS來对包进行加密，即所有的HTTP请求和响应数据在发送到网络上之前，都要进行加密。如下图：</p>

<p><img src="http://benweizhu.github.io/images/https-layer.png" title="HTTPS数据层结构" alt="Alt text" /></p>

<p>很明显，安全操作，即数据编码（加密）和解码（解密）的工作是由SSL一层来完成，而其他的部分和HTTP协议没有太多的不同。下面这张图，更详细的展示了TLS层的里面的结构。</p>

<p><img src="http://benweizhu.github.io/images/TLS.png" title="TLS层" alt="Alt text" /></p>

<p>SSL层是实现HTTPS的安全性的基石，它是如何做到的呢？我们需要了解SSL层背后基本原理和概念，由于涉及到信息安全和密码学的概念，我尽量用简单的语言和示意图来描述。</p>

<h2>SSL层背后基本原理和概念</h2>

<p>这也是本文的重点，介绍HTTPS（SSL层）背后的基本原理和概念，涉及到的概念：密码学基础知识-加密算法，数字证书，CA中心等。</p>

<p><strong>加密算法</strong></p>

<p>加密算法严格来说术语编码学（密码编码学），编码是信息从一种形式或格式转换为另一种形式的过程。解码，是编码的逆过程（对应密码学中的解密）。</p>

<p><img src="http://benweizhu.github.io/images/jiami.gif" title="加密算法" alt="Alt text" /></p>

<p><strong>对称加密算法</strong></p>

<p><img src="http://benweizhu.github.io/images/symmetric-encryption-algorithms.gif" title="对称加密算法" alt="Alt text" /></p>

<p>对称加密算法是应用较早的加密算法，技术成熟。在对称加密算法中，数据发信方将明文（原始数据）和加密密钥一起经过特殊加密算法处理后，使其变成复杂的加密密文发送出去。收信方收到密文后，若想解读原文，则需要使用加密用过的密钥及相同算法的逆算法对密文进行解密，才能使其恢复成可读明文。在对称加密算法中，使用的密钥只有一个，发收信双方都使用这个密钥对数据进行加密和解密，这就要求解密方事先必须知道加密密钥。</p>

<p>目前，比较常用的对称加密算法：DES（不安全），3DES（相对安全），AES（高级对称加密算法，相对安全）。</p>

<p>一旦通信人数增加，秘钥难以管理</p>

<p><img src="http://benweizhu.github.io/images/key-management.gif" title="秘钥管理难题" alt="Alt text" /></p>

<p><strong>非对称加密算法（加密和签名）（又一堆概念和解释）</strong></p>

<p>非对称加密算法需要两个密钥：公开密钥（public key）和私有密钥（private key）。公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。 非对称加密算法实现机密信息交换的基本过程是：甲方生成一对密钥并将其中的一把作为公用密钥向其它方公开；得到该公用密钥的乙方使用该密钥对机密信息进行加密后再发送给甲方；甲方再用自己保存的另一把专用密钥对加密后的信息进行解密。</p>

<p>另一方面，甲方可以使用乙方的私钥对机密信息进行签名后再发送给乙方；乙方再用自己的公钥对数据进行验签。</p>

<p><img src="http://benweizhu.github.io/images/feiduichen.gif" title="非对称加密算法" alt="Alt text" /></p>

<p>而这个使用私钥对信息进行加密，用公钥进行解密的过程，称作数字签名。</p>

<p>PS：签名过程中一般不会直接对原文（明文）信息进行签名，而是先将原文进行Hash运算，得到摘要（Digest），然后在对摘要进行签名，然后将签名信息附属到对原文加密后得到的密文信息中一起发送给对方。这样可以保证机密性（原文加密），不可否认性（签名）和完整性（Hash验证）。</p>

<p>目前，常用的非对称加密算法：RSA（1024/2048位，目前比较流行的），ECC（椭圆曲线加密算法，更前沿的算法，相对RSA，需要的秘钥更短）。</p>

<p><strong>HASH散列函数</strong></p>

<p>散列函数（或散列算法，又称哈希函数，英语：Hash Function）是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该函数将数据打乱混合，重新创建一个叫做散列值（hash values，hash codes，hash sums，或hashes）的指纹。</p>

<p>所有散列函数都有如下一个基本特性：如果两个散列值是不相同的（根据同一函数），那么这两个散列值的原始输入也是不相同的。这个特性是散列函数具有确定性的结果，具有这种性质的散列函数称为单向散列函数。但另一方面，散列函数的输入和输出不是唯一对应关系的，如果两个散列值相同，两个输入值很可能是相同的，但也可能不同，这种情况称为“哈希碰撞”，这通常是两个不同长度的输入值，刻意计算出相同的输出值。</p>

<p><strong>那么，有一个很重要的问题：加密算法是如何保证数据传输的安全？</strong></p>

<p>利用数学计算的困难性</p>

<p>RSA算法基于一个十分简单的数论事实（这是秘钥部分，算法部分是模运算）：将两个大素数/质数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。 <br/>
椭圆加密算法（ECC）是一种公钥加密体制，最初由Koblitz和Miller两人于1985年提出，其数学基础是利用椭圆曲线上的有理点构成Abel加法群上椭圆离散对数的计算困难性。</p>

<p>加密算法是公开的，关键在于秘钥</p>

<p>针对加密算法的破解，是在没有密钥的情况下，把明文给还原出来。不过更细的还分为只知道密文的唯密文攻击，知道若干明文密文对的已知明文攻击，能够构造确定明文让对方加密并得到对应密文的选择明文攻击等。</p>

<p>密码学中有柯克霍夫斯基原则，即加密算法的安全性依赖的是密钥的保密而不是算法的保密。</p>

<p>因为，保证秘钥的定期更换是非常重要的。</p>

<p><strong>数字证书，用来实现身份认证和秘钥交换（继续一堆概念和解释）</strong></p>

<p>数字证书是一个经证书授权中心数字签名的包含公开密钥拥有者信息以及公开密钥的文件。最简单的证书包含一个公开密钥、名称以及证书授权中心的数字签名。</p>

<p>数字证书是一种权威性的电子文档，可以由权威公正的第三方机构，即CA（例如中国各地方的CA公司）中心签发的证书，也可以由企业级CA系统进行签发。
它以数字证书为核心的加密技术(加密传输、数字签名、数字信封等安全技术)可以对网络上传输的信息进行加密和解密、数字签名和签名验证，确保网上传递信息的机密性、完整性及交易的不可抵赖性。使用了数字证书，即使您发送的信息在网上被他人截获，甚至您丢失了个人的账户、密码等信息，仍可以保证您的账户、资金安全。</p>

<p>以X.509证书为例，可以看一下它的关键信息的结构</p>

<table>
<thead>
<tr>
<th> 英文 </th>
<th> 解释 </th>
</tr>
</thead>
<tbody>
<tr>
<td> Version </td>
<td> 版本 </td>
</tr>
<tr>
<td> Algorithm ID </td>
<td> 算法标识 </td>
</tr>
<tr>
<td> Issuer </td>
<td> 颁发者 </td>
</tr>
<tr>
<td> Validity </td>
<td> 有效期 </td>
</tr>
<tr>
<td> Subject</td>
<td> 使用者 </td>
</tr>
<tr>
<td> Subject Public Key Info </td>
<td> 使用者公钥信息 </td>
</tr>
<tr>
<td> Public Key Algorithm </td>
<td> 公钥算法 </td>
</tr>
<tr>
<td> Subject Public Key </td>
<td> 公钥 </td>
</tr>
<tr>
<td> Issuer Unique Identifier (Optional) </td>
<td> 颁发者唯一标识 </td>
</tr>
<tr>
<td> Subject Unique Identifier (Optional) </td>
<td> 使用者唯一标识 </td>
</tr>
<tr>
<td> Certificate Signature Algorithm </td>
<td> 证书签名算法 </td>
</tr>
<tr>
<td> Certificate Signature </td>
<td> 证书签名 </td>
</tr>
</tbody>
</table>


<p><strong>身份认证（我凭什么信任你）</strong></p>

<p>身份认证是建立每一个TLS连接的不可或缺的部分。比如，你有可能和任何一方建立一个加密的通道，包括攻击者，除非我们可以确定通信的服务端是我们可以信任的，否则，所有的加密（保密）工作都没有任何作用。</p>

<p>而身份认证的方式就是通过证书，证书是以数字方式签名的声明，它将公钥的值与持有相应私钥的主体(个人、设备和服务)的身份绑定在一起。通过在证书上签名，CA可以核实与证书上公钥相应的私钥为证书所指定的主体所拥有。</p>

<p><img src="http://benweizhu.github.io/images/certificate.png" title="certificate" alt="Alt text" /></p>

<p><img src="http://benweizhu.github.io/images/letsencrpt.png" title="letsencrpt" alt="Alt text" /></p>

<p>以上这些概念会在下面的TLS层引用，如果没看懂，请回头再看看对应概念的含义。</p>

<h2>了解TLS协议</h2>

<p>如上面的那张所示，HTTPS的安全主要靠的是TLS协议层的操作。那么它到底做了什么，来建立一条安全的数据传输通道呢？</p>

<p><strong>TLS握手：安全通道是如何建立的</strong></p>

<p><img src="http://benweizhu.github.io/images/TLS-handshake-protocol.png" title="TLS握手" alt="Alt text" /></p>

<p>0 ms
TLS运行在一个可靠的TCP协议上，意味着我们必须首先完成TCP协议的三次握手。</p>

<p>56 ms
在TCP连接建立完成之后，客户端会以明文的方式发送一系列说明，比如使用的TLS协议版本，客户端所支持的加密算法等。</p>

<p>84 ms
服务器端拿到TLS协议版本，根据客户端提供的加密算法列表选择一个合适的加密算法，然后将选择的算法连同服务器的证书一起发送到客户端。</p>

<p>112 ms
假设服务器和客户端协商后，得到一个共同的TLS版本和加密算法，客户端检测服务端的证书，非常满意，客户端就会要么使用RSA加密算法（公钥加密）或者DH秘钥交换协议，得到一个服务器和客户端公用的对称秘钥。</p>

<p>由于历史和商业原因，基于RSA的秘钥交换占据了TLS协议的大片江山：客户端生成一个对称秘钥，使用服务器端证书的公钥加密，然后发送给服务器端，服务器端利用私钥解密得到对称秘钥。</p>

<p>140 ms
服务器处理由客户端发送的秘钥交换参数，通过验证MAC（Message Authentication Code，消息认证码）来验证消息的完整性，返回一个加密过的“Finished”消息给客户端。</p>

<p>在密码学中，消息认证码（英语：Message authentication code，缩写为MAC），又译为消息鉴别码、文件消息认证码、讯息鉴别码、信息认证码，是经过特定算法后产生的一小段信息，检查某段消息的完整性，以及作身份验证。它可以用来检查在消息传递过程中，其内容是否被更改过，不管更改的原因是来自意外或是蓄意攻击。同时可以作为消息来源的身份验证，确认消息的来源。</p>

<p>消息认证码的算法中，通常会使用使用带密钥的散列函数，或者块密码的带认证工作模式（如CBC）。</p>

<p>168 ms
客户端用协商得到的堆成秘钥解密“Finished”消息，验证MAC（消息完整性验证），如果一切ok，那么这个加密的通道就建立完成，可以开始数据传输了。</p>

<p>在这之后的通信，采用对称秘钥对数据加密传输，从而保证数据的机密性。</p>

<p>到此为止，我是想要介绍的基本原理的全部内容，但HTTPS得知识点不止如此，还有更多说，现在来点干货！！</p>

<h2>那么，教练，我想用HTTPS</h2>

<p><img src="http://benweizhu.github.io/images/anxi.jpg" title="安西教练" alt="Alt text" /></p>

<h3>有两点，选择合适的证书和了解服务器的配置方式</h3>

<p><strong>Let’s Encrypt(It’s free, automated, and open.)是一种不错的选择</strong></p>

<p><a href="https://letsencrypt.org/">https://letsencrypt.org/</a></p>

<p>ThoughtWorks2016年4月份最新发布的技术雷达对Let’s Encrypt项目的介绍：</p>

<p>从2015年，12月开始，Let’s Encrypt项目从封闭测试阶段转向公开测试阶段，也就是说用户不再需要收到邀请才能使用它了。Let’s Encrypt为那些寻求网站安全的用户提供了一种简单的方式获取和管理证书。Let’s Encrypt也促使安全和隐私前进了一大步，而这一趋势已经随着ThoughtWorks和我们许多使用其进行证书认证的项目开始了。</p>

<p>Let’s Encrypt发布最新数据，至今该项目已经颁发了超过300万份证书——300万这个数字是在5月8日-9日之间达成的。Let’s Encrypt是为了让HTTP连接做得更加安全的一个项目，所以越多的网站能够加入进来，则整个互联网也会变得更加安全。</p>

<p>关于如何配置服务器来使用证书，请参考我的另外一篇以NGINX为例的博客（全民安全站Let’s Encrypt配置NGINX）： <a href="http://benweizhu.github.io/blog/2016/05/29/nginx-lets-encrypt/">http://benweizhu.github.io/blog/2016/05/29/nginx-lets-encrypt/</a></p>

<p>参考资料： <br/>
1. HTTP权威指南  <br/>
2. 《High Performance Browser Networking》Chapter 4. Transport Layer Security (TLS) <br/>
3. <a href="https://webmasters.googleblog.com/2014/08/https-as-ranking-signal.html">https://webmasters.googleblog.com/2014/08/https-as-ranking-signal.html</a> <br/>
4. <a href="http://zhanzhang.baidu.com/wiki/494">http://zhanzhang.baidu.com/wiki/494</a> <br/>
5. 维基百科 HTTPS，消息认证码，HASH散列函数 <br/>
6. 百度百科 对称加密，非对称加密，数字证书 <br/>
7. <a href="https://www.zhihu.com/question/19979490">https://www.zhihu.com/question/19979490</a> <br/>
8. <a href="http://www.leiphone.com/news/201412/AYbd3Tp7tbbSa0AD.html">http://www.leiphone.com/news/201412/AYbd3Tp7tbbSa0AD.html</a></p>

<p>本文参考大量网络资料，如有发现文中参考资料遗漏，请联系本文作者，我会及时更新</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[全民安全站Let's Encrypt配置NGINX]]></title>
    <link href="http://benweizhu.github.io/blog/2016/05/29/nginx-lets-encrypt/"/>
    <updated>2016-05-29T17:40:12+08:00</updated>
    <id>http://benweizhu.github.io/blog/2016/05/29/nginx-lets-encrypt</id>
    <content type="html"><![CDATA[<p>ThoughtWorks2016年4月份最新发布的技术雷达对Let’s Encrypt项目的介绍：</p>

<p>从2015年，12月开始，Let’s Encrypt项目从封闭测试阶段转向公开测试阶段，也就是说用户不再需要收到邀请才能使用它了。Let’s Encrypt为那些寻求网站安全的用户提供了一种简单的方式获取和管理证书。Let’s Encrypt也促使安全和隐私前进了一大步，而这一趋势已经随着ThoughtWorks和我们许多使用其进行证书认证的项目开始了。</p>

<p>Let&rsquo;s Encrypt发布最新数据，至今该项目已经颁发了超过300万份证书——300万这个数字是在5月8日-9日之间达成的。Let&rsquo;s Encrypt是为了让HTTP连接做得更加安全的一个项目，所以越多的网站能够加入进来，则整个互联网也会变得更加安全。</p>

<p>本文是一个简单的Tutorial，告诉你怎样在NGINX服务器配置SSL实现网站的https：</p>

<h2>登录到你的服务器上</h2>

<p>保证你申请SSL的域名和服务器的IP是一致的，即域名确实是解析到你的服务器上的，可以使用nslookup命令查询。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nslookup www.yourwebsite.com
</span></code></pre></td></tr></table></div></figure>


<p>Let’s Encrypt在给你分配证书时，会检查你所在的服务器是否和域名解析的服务器一致。</p>

<h2>配置基本的Nginx设置：</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>server <span class="o">{</span>
</span><span class='line'>    listen       <span class="m">80</span> default_server<span class="p">;</span>
</span><span class='line'>    listen       <span class="o">[</span>::<span class="o">]</span>:80 default_server<span class="p">;</span>
</span><span class='line'>    server_name  yourwebsite.com<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    location ^~ /.well-known/acme-challenge/ <span class="o">{</span>
</span><span class='line'>       default_type <span class="s2">&quot;text/plain&quot;</span><span class="p">;</span>
</span><span class='line'>       root     /var/www/letsencrypt<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">location</span> <span class="o">=</span> /.well-known/acme-challenge/ <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> 404<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    ... 其他配置，例如
</span><span class='line'>    location / <span class="o">{</span>
</span><span class='line'>      proxy_pass http://localhost:8080<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里location配置了一个/.well-known/acme-challenge/路径，里面host了简单文件，我这里host了一个简单的html文件。原因是你必须证明，你拥有所请求的证书的域名。因为 Let&rsquo;s Encrypt要求你host一些文件。</p>

<h2>使用certbot申请证书</h2>

<p>克隆certbot仓库：<a href="https://github.com/certbot/certbot">https://github.com/certbot/certbot</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install -y git
</span><span class='line'>sudo git clone https://github.com/certbot/certbot /opt/letsencrypt
</span><span class='line'>/opt/letsencrypt/letsencrypt-auto
</span></code></pre></td></tr></table></div></figure>


<p>运行certbot提供的脚本获取证书</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">DOMAINS</span><span class="o">=</span><span class="s2">&quot;yourdomain.here,www.yourdomain.here&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">DIR</span><span class="o">=</span>/var/www/letsencrypt
</span><span class='line'>/opt/letsencrypt/letsencrypt-auto certonly --server https://acme-v01.api.letsencrypt.org/directory -a webroot --webroot-path<span class="o">=</span><span class="nv">$DIR</span> -d <span class="nv">$DOMAINS</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意这里指定了一个webroot-path，他应该和上面well-known配置的root一样。</p>

<p>运行成功之后，你会看到下面这个提示</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>IMPORTANT NOTES:
</span><span class='line'>- Congratulations! Your certificate and chain have been saved at
</span><span class='line'>  /etc/letsencrypt/live/letsecure.me/fullchain.pem. Your cert will
</span><span class='line'>  expire on 2016-XX-XX. To obtain a new version of the certificate in
</span><span class='line'>  the future, simply run Let<span class="s1">&#39;s Encrypt again.</span>
</span><span class='line'><span class="s1">- Your account credentials have been saved in your Let&#39;</span>s Encrypt
</span><span class='line'>  configuration directory at /etc/letsencrypt. You should make a
</span><span class='line'>  secure backup of this folder now. This configuration directory will
</span><span class='line'>  also contain certificates and private keys obtained by Let<span class="s1">&#39;s</span>
</span><span class='line'><span class="s1">  Encrypt so making regular backups of this folder is ideal.</span>
</span><span class='line'><span class="s1">- If you like Let&#39;</span>s Encrypt, please consider supporting our work by:
</span><span class='line'>
</span><span class='line'>Donating to ISRG / Let<span class="err">&#39;</span>s Encrypt:   https://letsencrypt.org/donate
</span></code></pre></td></tr></table></div></figure>


<h2>配置https证书</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssl_certificate /etc/letsencrypt/live/yourdomain.here/fullchain.pem<span class="p">;</span>
</span><span class='line'>ssl_certificate_key /etc/letsencrypt/live/yourdomain.here/privkey.pem<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整配置</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>server <span class="o">{</span>
</span><span class='line'>    listen <span class="m">443</span> ssl<span class="p">;</span>
</span><span class='line'>    server_name yourdomain.here www.yourdomain.here<span class="p">;</span>
</span><span class='line'>    ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class="p">;</span>
</span><span class='line'>    ssl_ciphers EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5<span class="p">;</span>
</span><span class='line'>    ssl_prefer_server_ciphers On<span class="p">;</span>
</span><span class='line'>    ssl_certificate /etc/letsencrypt/live/yourdomain.here/fullchain.pem<span class="p">;</span>
</span><span class='line'>    ssl_certificate_key /etc/letsencrypt/live/yourdomain.here/privkey.pem<span class="p">;</span>
</span><span class='line'>    ssl_session_cache shared:SSL:128m<span class="p">;</span>
</span><span class='line'>    add_header Strict-Transport-Security <span class="s2">&quot;max-age=31557600; includeSubDomains&quot;</span><span class="p">;</span>
</span><span class='line'>    ssl_stapling on<span class="p">;</span>
</span><span class='line'>    ssl_stapling_verify on<span class="p">;</span>
</span><span class='line'>    location / <span class="o">{</span>
</span><span class='line'>      proxy_pass http://localhost:8080<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置80端口跳转：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">return</span> <span class="m">301</span> https://<span class="nv">$server_name$request_uri</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整配置</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>server <span class="o">{</span>
</span><span class='line'>    listen       <span class="m">80</span> default_server<span class="p">;</span>
</span><span class='line'>    listen       <span class="o">[</span>::<span class="o">]</span>:80 default_server<span class="p">;</span>
</span><span class='line'>    server_name  yourwebsite.com<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    location ^~ /.well-known/acme-challenge/ <span class="o">{</span>
</span><span class='line'>       default_type <span class="s2">&quot;text/plain&quot;</span><span class="p">;</span>
</span><span class='line'>       root     /var/www/letsencrypt<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">location</span> <span class="o">=</span> /.well-known/acme-challenge/ <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> 404<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    location / <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="m">301</span> https://<span class="nv">$server_name$request_uri</span><span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>证书90天过期</h2>

<p>Let’s Encrypt证书会在90天后过期，需要配置脚本自动更新证书。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c"># This script renews all the Let&#39;s Encrypt certificates with a validity &lt; 30 days</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> ! /opt/letsencrypt/letsencrypt-auto renew &gt; /var/log/letsencrypt/renew.log 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">echo </span>Automated renewal failed:
</span><span class='line'>    cat /var/log/letsencrypt/renew.log
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>nginx -t <span class="o">&amp;&amp;</span> nginx -s reload
</span></code></pre></td></tr></table></div></figure>


<p>开启定时任务Cron</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo crontab -e
</span></code></pre></td></tr></table></div></figure>


<p>编辑任务内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>@daily /path/to/renewCerts.sh
</span></code></pre></td></tr></table></div></figure>


<p>参考资料：  <br/>
1.<a href="https://letsecure.me/secure-web-deployment-with-lets-encrypt-and-nginx/">https://letsecure.me/secure-web-deployment-with-lets-encrypt-and-nginx/</a>  <br/>
2.<a href="https://community.letsencrypt.org/t/how-to-nginx-configuration-to-enable-acme-challenge-support-on-all-http-virtual-hosts/5622">https://community.letsencrypt.org/t/how-to-nginx-configuration-to-enable-acme-challenge-support-on-all-http-virtual-hosts/5622</a>   <br/>
3.<a href="https://letsencrypt.org/getting-started/">https://letsencrypt.org/getting-started/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Nginx服务静态文件]]></title>
    <link href="http://benweizhu.github.io/blog/2016/05/22/nginx-serve-static/"/>
    <updated>2016-05-22T11:58:09+08:00</updated>
    <id>http://benweizhu.github.io/blog/2016/05/22/nginx-serve-static</id>
    <content type="html"><![CDATA[<p>使用Nginx服务静态文件的原因很简单：快。</p>

<p>上一篇文章中 <a href="http://benweizhu.github.io/blog/2016/05/21/use-nginx-as-reverse-proxy-for-tomcat/">http://benweizhu.github.io/blog/2016/05/21/use-nginx-as-reverse-proxy-for-tomcat/</a> ，我们使用Nginx作为Tomcat服务器的反向代理服务器，这样比在Tomcat直接配置80端口更加方便。</p>

<p>但是，却没有很好的利用Nginx服务器的特点，即 NGINX | High Performance Load Balancer, Web Server, &amp; Reverse等。</p>

<p>我们可以使用Nginx来服务器静态文件，使用Tomcat来处理JSP的动态文件。配置非常简单，分别使用下面两个配置：</p>

<h2>403错误：添加Nginx访问文案件的权限</h2>

<p>nginx配置中有一个user选项，默认，nginx配置的是nobody。 <a href="http://nginx.org/en/docs/ngx_core_module.html#user">http://nginx.org/en/docs/ngx_core_module.html#user</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#user  nobody;</span>
</span><span class='line'>worker_processes  1<span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#error_log  logs/error.log;</span>
</span><span class='line'><span class="c">#error_log  logs/error.log  notice;</span>
</span><span class='line'><span class="c">#error_log  logs/error.log  info;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#pid        logs/nginx.pid;</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要将它改为可以访问Tomcat服务器上文件的用户和用户组</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>user  yourusername yourusergroup<span class="p">;</span> <span class="c">#比如 benweizhu stuff</span>
</span><span class='line'>worker_processes  1<span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#error_log  logs/error.log;</span>
</span><span class='line'><span class="c">#error_log  logs/error.log  notice;</span>
</span><span class='line'><span class="c">#error_log  logs/error.log  info;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#pid        logs/nginx.pid;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>404错误：使用Alias来配置Static文件路径</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>location /static/ <span class="o">{</span>
</span><span class='line'>  autoindex  on<span class="p">;</span>
</span><span class='line'>  <span class="nb">alias</span> /Documents/servers/tomcat/apache-tomcat-8.0.30/webapps/someapp/static<span class="p">;</span> <span class="c">#完整路径</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nginx的Wiki推荐使用root字段</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>location /static/ <span class="o">{</span>
</span><span class='line'>  autoindex  on<span class="p">;</span>
</span><span class='line'>  root /Documents/servers/tomcat/apache-tomcat-8.0.30/webapps/someapp<span class="p">;</span> <span class="c">#完整路径</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考资料：   <br/>
1. <a href="https://nu2ruby.wordpress.com/2010/04/13/nginx-getgrnam-presmini-failed/">https://nu2ruby.wordpress.com/2010/04/13/nginx-getgrnam-presmini-failed/</a>   <br/>
2. <a href="http://stackoverflow.com/questions/16808813/nginx-serve-static-file-and-got-403-forbidden">http://stackoverflow.com/questions/16808813/nginx-serve-static-file-and-got-403-forbidden</a>   <br/>
3. <a href="http://stackoverflow.com/questions/1474374/nginx-doesnt-serve-static">http://stackoverflow.com/questions/1474374/nginx-doesnt-serve-static</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将Nginx作为Tomcat的反向代理服务器]]></title>
    <link href="http://benweizhu.github.io/blog/2016/05/21/use-nginx-as-reverse-proxy-for-tomcat/"/>
    <updated>2016-05-21T21:15:08+08:00</updated>
    <id>http://benweizhu.github.io/blog/2016/05/21/use-nginx-as-reverse-proxy-for-tomcat</id>
    <content type="html"><![CDATA[<p>本例子，以mac作为主机：</p>

<h2>安装Nginx</h2>

<p>通过HomeBrew安装Nginx。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>brew install nginx
</span></code></pre></td></tr></table></div></figure>


<p>然后，运行启动nginx。如果启动遇到问题，使用brew doctor查看下，有可能是没有link（brew link nginx），或者没有文件执行权限（chmod去改）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>nginx
</span></code></pre></td></tr></table></div></figure>


<p>nginx启动默认是8080端口，所以到 <a href="http://localhost:8080">http://localhost:8080</a> 上测试下。mac上nginx.conf的位置在/usr/local/etc/nginx/nginx.conf，也可以通过brew info nginx查看。
因为我们要使用80端口，所以需要修改配置，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>server <span class="o">{</span>
</span><span class='line'>    listen       8080<span class="p">;</span>
</span><span class='line'>    server_name  localhost<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#access_log  logs/host.access.log  main;</span>
</span><span class='line'>
</span><span class='line'>    location / <span class="o">{</span>
</span><span class='line'>        root   html<span class="p">;</span>
</span><span class='line'>        index  index.html index.htm<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>改为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>server <span class="o">{</span>
</span><span class='line'>    listen       80<span class="p">;</span>
</span><span class='line'>    server_name  localhost<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#access_log  logs/host.access.log  main;</span>
</span><span class='line'>
</span><span class='line'>    location / <span class="o">{</span>
</span><span class='line'>        root   html<span class="p">;</span>
</span><span class='line'>        index  index.html index.htm<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个时候，需要sudo去启动nginx了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo nginx
</span></code></pre></td></tr></table></div></figure>


<p>访问 <a href="http://localhost">http://localhost</a> 进行测试，可以看到Nginx的主页。</p>

<h2>安装Tomcat</h2>

<p><a href="https://tomcat.apache.org/download-80.cgi">https://tomcat.apache.org/download-80.cgi</a></p>

<p>运行bin下面的./startup.sh。同样如果没有执行权限，用chmod修改。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./startup.sh
</span></code></pre></td></tr></table></div></figure>


<p>默认是8080，访问 <a href="http://localhost:8080">http://localhost:8080</a> 可以看到Tomcat的主页。</p>

<h2>修改Nginx配置，通过proxy_pass转发80请求到8080</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>server <span class="o">{</span>
</span><span class='line'>        listen       80<span class="p">;</span>
</span><span class='line'>        server_name  localhost<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">#access_log  logs/host.access.log  main;</span>
</span><span class='line'>
</span><span class='line'>        location / <span class="o">{</span>
</span><span class='line'>            proxy_pass http://127.0.0.1:8080<span class="p">;</span>
</span><span class='line'>            root   html<span class="p">;</span>
</span><span class='line'>            index  index.html index.htm<span class="p">;</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时，重启Nginx服务器:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo nginx -s stop
</span><span class='line'>sudo nginx
</span></code></pre></td></tr></table></div></figure>


<p>再次访问 <a href="http://localhost">http://localhost</a> 进行测试，就会看到Tomcat的主页了。</p>

<p>参考资料：<br/>
1. <a href="http://learnaholic.me/2012/10/10/installing-nginx-in-mac-os-x-mountain-lion/">http://learnaholic.me/2012/10/10/installing-nginx-in-mac-os-x-mountain-lion/</a><br/>
2. <a href="https://devtidbits.com/2015/12/08/nginx-as-a-reverse-proxy-to-apache-tomcat/">https://devtidbits.com/2015/12/08/nginx-as-a-reverse-proxy-to-apache-tomcat/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JS 改变默认行为 e.preventDefault() e.returnValue e.stopPropagation e.cancelBubble Return False]]></title>
    <link href="http://benweizhu.github.io/blog/2016/05/02/js-prevent-default/"/>
    <updated>2016-05-02T09:31:27+08:00</updated>
    <id>http://benweizhu.github.io/blog/2016/05/02/js-prevent-default</id>
    <content type="html"><![CDATA[<p>事件对象有一些方法可以改变一个元素的默认行为，以及它的祖先元素如何对这个事件作出响应。</p>

<p>有一些事件，比如点击链接或提交表单，会把用户导向另一个页面。为了阻止这类元素的这种默认行为，比如在用户点击链接或提交表单之后还是停留在当前页面，而不是导向新的页面，可以使用事件对象e的preventDefault()。</p>

<p>IE5~IE8有一个同样功能的属性returnValue，如果将其设置为false，就能达到同样的效果。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">e</span><span class="p">.</span><span class="nx">returnValue</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>处理完某个元素上的事件之后，可能需要阻止这个事件向其祖先元素继续冒泡传播。这时候，可以使用e.stopPropagation()方法。</p>

<p>IE8或更早的IE版本中，使用拥有同样功能的属性e.cancelBubble，将其设置为true可以达到同样的效果。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">e</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">e</span><span class="p">.</span><span class="nx">cancelBubble</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你想要同时实现，preventDefault和stopPropagation，可以使用return false。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">));</span>
</span><span class='line'>   <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考资料： <br/>
1.《JavaScript&amp;jQuery交互式Web前端开发》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript事件流和事件代理/委托]]></title>
    <link href="http://benweizhu.github.io/blog/2016/04/27/event-stream-and-event-delegation/"/>
    <updated>2016-04-27T21:05:57+08:00</updated>
    <id>http://benweizhu.github.io/blog/2016/04/27/event-stream-and-event-delegation</id>
    <content type="html"><![CDATA[<p>HTML元素都位于另一些。如果鼠标移动到某一个链接，或者点击了链接，同样鼠标也移动到了它的父元素上，并点击了那个父元素。</p>

<p>当你点击某个元素时，产生了一个点击事件，从而产生了一个事件流。</p>

<h3>事件流分为两种：</h3>

<p>事件冒泡：事件从最具体的节点开始向外传播到最宽泛的节点。这是事件流的默认类型，被绝大多数浏览器所支持。</p>

<p>事件捕获：事件从最宽泛的节点开始向内传播到最具体的节点。这种方式在IE8和更早版本的IE中不被支持。</p>

<p><img src="http://benweizhu.github.io/images/js_event_bubble.png" width="500" title="事件流" alt="Alt text" /></p>

<p data-height="424" data-theme-id="0" data-slug-hash="dMgMox" data-default-tab="js,result" data-user="benweizhu" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/benweizhu/pen/dMgMox/">Bubbling Event</a> by Benwei (<a href="http://codepen.io/benweizhu">@benweizhu</a>) on <a href="http://codepen.io">CodePen</a>.</p>


<script async src="//assets.codepen.io/assets/embed/ei.js"></script>


<p>看一个codepen的例子</p>

<p>什么时候事件冒泡或者说事件流会变得如此重要？</p>

<p>当代码在一个元素和其祖先元素或者后代元素上都有事件处理程序时，事件流就会变得非常重要。</p>

<h3>事件代理/委托</h3>

<p>为大量的元素创建事件监听器会造成页面速度下降，事件流允许你在父元素上监听事件。</p>

<p>如果用户可以和页面中的大量元素进行交互，比如：大量的按钮，很长列表，表格中每一个单元格。如果想这些元素分别添加事件监听器就会使用大量的内存，从而降低性能。</p>

<p>事件可以影响到容器元素（祖先元素），因此可以将事件处理程序放置在一个元素容器上，然后使用事件对象的target属性找到它的后代中是哪一个发生了事件，因此只需要响应一个元素上的事件（而不是在每一个子元素上分别响应事件）。</p>

<p>看一个codepen的例子</p>

<p data-height="266" data-theme-id="0" data-slug-hash="WwaqyP" data-default-tab="js,result" data-user="benweizhu" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/benweizhu/pen/WwaqyP/">WwaqyP</a> by Benwei (<a href="http://codepen.io/benweizhu">@benweizhu</a>) on <a href="http://codepen.io">CodePen</a>.</p>


<script async src="//assets.codepen.io/assets/embed/ei.js"></script>


<p>参考资料： <br/>
1.《JavaScript&amp;jQuery交互式Web前端开发》</p>
]]></content>
  </entry>
  
</feed>
